{"ast":null,"code":"import _assertThisInitialized from \"C:/Users/lucas/Desktop/Estudos Js/React-Playground/reactApp/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"C:/Users/lucas/Desktop/Estudos Js/React-Playground/reactApp/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/lucas/Desktop/Estudos Js/React-Playground/reactApp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/lucas/Desktop/Estudos Js/React-Playground/reactApp/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/lucas/Desktop/Estudos Js/React-Playground/reactApp/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classCallCheck from \"C:/Users/lucas/Desktop/Estudos Js/React-Playground/reactApp/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/lucas/Desktop/Estudos Js/React-Playground/reactApp/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/**\n * Records what objects are colliding with each other\n */\nvar ObjectCollisionMatrix = /*#__PURE__*/function () {\n  /**\n   * The matrix storage.\n   */\n\n  /**\n   * @todo Remove useless constructor\n   */\n  function ObjectCollisionMatrix() {\n    _classCallCheck(this, ObjectCollisionMatrix);\n    this.matrix = {};\n  }\n  /**\n   * get\n   */\n  _createClass(ObjectCollisionMatrix, [{\n    key: \"get\",\n    value: function get(bi, bj) {\n      var i = bi.id;\n      var j = bj.id;\n      if (j > i) {\n        var temp = j;\n        j = i;\n        i = temp;\n      }\n      return \"\".concat(i, \"-\").concat(j) in this.matrix;\n    }\n    /**\n     * set\n     */\n  }, {\n    key: \"set\",\n    value: function set(bi, bj, value) {\n      var i = bi.id;\n      var j = bj.id;\n      if (j > i) {\n        var temp = j;\n        j = i;\n        i = temp;\n      }\n      if (value) {\n        this.matrix[\"\".concat(i, \"-\").concat(j)] = true;\n      } else {\n        delete this.matrix[\"\".concat(i, \"-\").concat(j)];\n      }\n    }\n    /**\n     * Empty the matrix\n     */\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.matrix = {};\n    }\n    /**\n     * Set max number of objects\n     */\n  }, {\n    key: \"setNumObjects\",\n    value: function setNumObjects(n) {}\n  }]);\n  return ObjectCollisionMatrix;\n}();\n/**\n * A 3x3 matrix.\n * Authored by {@link http://github.com/schteppe/ schteppe}\n */\nvar Mat3 = /*#__PURE__*/function () {\n  /**\n   * A vector of length 9, containing all matrix elements.\n   */\n\n  /**\n   * @param elements A vector of length 9, containing all matrix elements.\n   */\n  function Mat3(elements) {\n    _classCallCheck(this, Mat3);\n    if (elements === void 0) {\n      elements = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n    }\n    this.elements = elements;\n  }\n  /**\n   * Sets the matrix to identity\n   * @todo Should perhaps be renamed to `setIdentity()` to be more clear.\n   * @todo Create another function that immediately creates an identity matrix eg. `eye()`\n   */\n  _createClass(Mat3, [{\n    key: \"identity\",\n    value: function identity() {\n      var e = this.elements;\n      e[0] = 1;\n      e[1] = 0;\n      e[2] = 0;\n      e[3] = 0;\n      e[4] = 1;\n      e[5] = 0;\n      e[6] = 0;\n      e[7] = 0;\n      e[8] = 1;\n    }\n    /**\n     * Set all elements to zero\n     */\n  }, {\n    key: \"setZero\",\n    value: function setZero() {\n      var e = this.elements;\n      e[0] = 0;\n      e[1] = 0;\n      e[2] = 0;\n      e[3] = 0;\n      e[4] = 0;\n      e[5] = 0;\n      e[6] = 0;\n      e[7] = 0;\n      e[8] = 0;\n    }\n    /**\n     * Sets the matrix diagonal elements from a Vec3\n     */\n  }, {\n    key: \"setTrace\",\n    value: function setTrace(vector) {\n      var e = this.elements;\n      e[0] = vector.x;\n      e[4] = vector.y;\n      e[8] = vector.z;\n    }\n    /**\n     * Gets the matrix diagonal elements\n     */\n  }, {\n    key: \"getTrace\",\n    value: function getTrace(target) {\n      if (target === void 0) {\n        target = new Vec3();\n      }\n      var e = this.elements;\n      target.x = e[0];\n      target.y = e[4];\n      target.z = e[8];\n      return target;\n    }\n    /**\n     * Matrix-Vector multiplication\n     * @param v The vector to multiply with\n     * @param target Optional, target to save the result in.\n     */\n  }, {\n    key: \"vmult\",\n    value: function vmult(v, target) {\n      if (target === void 0) {\n        target = new Vec3();\n      }\n      var e = this.elements;\n      var x = v.x;\n      var y = v.y;\n      var z = v.z;\n      target.x = e[0] * x + e[1] * y + e[2] * z;\n      target.y = e[3] * x + e[4] * y + e[5] * z;\n      target.z = e[6] * x + e[7] * y + e[8] * z;\n      return target;\n    }\n    /**\n     * Matrix-scalar multiplication\n     */\n  }, {\n    key: \"smult\",\n    value: function smult(s) {\n      for (var i = 0; i < this.elements.length; i++) {\n        this.elements[i] *= s;\n      }\n    }\n    /**\n     * Matrix multiplication\n     * @param matrix Matrix to multiply with from left side.\n     */\n  }, {\n    key: \"mmult\",\n    value: function mmult(matrix, target) {\n      if (target === void 0) {\n        target = new Mat3();\n      }\n      var A = this.elements;\n      var B = matrix.elements;\n      var T = target.elements;\n      var a11 = A[0],\n        a12 = A[1],\n        a13 = A[2],\n        a21 = A[3],\n        a22 = A[4],\n        a23 = A[5],\n        a31 = A[6],\n        a32 = A[7],\n        a33 = A[8];\n      var b11 = B[0],\n        b12 = B[1],\n        b13 = B[2],\n        b21 = B[3],\n        b22 = B[4],\n        b23 = B[5],\n        b31 = B[6],\n        b32 = B[7],\n        b33 = B[8];\n      T[0] = a11 * b11 + a12 * b21 + a13 * b31;\n      T[1] = a11 * b12 + a12 * b22 + a13 * b32;\n      T[2] = a11 * b13 + a12 * b23 + a13 * b33;\n      T[3] = a21 * b11 + a22 * b21 + a23 * b31;\n      T[4] = a21 * b12 + a22 * b22 + a23 * b32;\n      T[5] = a21 * b13 + a22 * b23 + a23 * b33;\n      T[6] = a31 * b11 + a32 * b21 + a33 * b31;\n      T[7] = a31 * b12 + a32 * b22 + a33 * b32;\n      T[8] = a31 * b13 + a32 * b23 + a33 * b33;\n      return target;\n    }\n    /**\n     * Scale each column of the matrix\n     */\n  }, {\n    key: \"scale\",\n    value: function scale(vector, target) {\n      if (target === void 0) {\n        target = new Mat3();\n      }\n      var e = this.elements;\n      var t = target.elements;\n      for (var i = 0; i !== 3; i++) {\n        t[3 * i + 0] = vector.x * e[3 * i + 0];\n        t[3 * i + 1] = vector.y * e[3 * i + 1];\n        t[3 * i + 2] = vector.z * e[3 * i + 2];\n      }\n      return target;\n    }\n    /**\n     * Solve Ax=b\n     * @param b The right hand side\n     * @param target Optional. Target vector to save in.\n     * @return The solution x\n     * @todo should reuse arrays\n     */\n  }, {\n    key: \"solve\",\n    value: function solve(b, target) {\n      if (target === void 0) {\n        target = new Vec3();\n      }\n\n      // Construct equations\n      var nr = 3; // num rows\n\n      var nc = 4; // num cols\n\n      var eqns = [];\n      var i;\n      var j;\n      for (i = 0; i < nr * nc; i++) {\n        eqns.push(0);\n      }\n      for (i = 0; i < 3; i++) {\n        for (j = 0; j < 3; j++) {\n          eqns[i + nc * j] = this.elements[i + 3 * j];\n        }\n      }\n      eqns[3 + 4 * 0] = b.x;\n      eqns[3 + 4 * 1] = b.y;\n      eqns[3 + 4 * 2] = b.z; // Compute right upper triangular version of the matrix - Gauss elimination\n\n      var n = 3;\n      var k = n;\n      var np;\n      var kp = 4; // num rows\n\n      var p;\n      do {\n        i = k - n;\n        if (eqns[i + nc * i] === 0) {\n          // the pivot is null, swap lines\n          for (j = i + 1; j < k; j++) {\n            if (eqns[i + nc * j] !== 0) {\n              np = kp;\n              do {\n                // do ligne( i ) = ligne( i ) + ligne( k )\n                p = kp - np;\n                eqns[p + nc * i] += eqns[p + nc * j];\n              } while (--np);\n              break;\n            }\n          }\n        }\n        if (eqns[i + nc * i] !== 0) {\n          for (j = i + 1; j < k; j++) {\n            var multiplier = eqns[i + nc * j] / eqns[i + nc * i];\n            np = kp;\n            do {\n              // do ligne( k ) = ligne( k ) - multiplier * ligne( i )\n              p = kp - np;\n              eqns[p + nc * j] = p <= i ? 0 : eqns[p + nc * j] - eqns[p + nc * i] * multiplier;\n            } while (--np);\n          }\n        }\n      } while (--n); // Get the solution\n\n      target.z = eqns[2 * nc + 3] / eqns[2 * nc + 2];\n      target.y = (eqns[1 * nc + 3] - eqns[1 * nc + 2] * target.z) / eqns[1 * nc + 1];\n      target.x = (eqns[0 * nc + 3] - eqns[0 * nc + 2] * target.z - eqns[0 * nc + 1] * target.y) / eqns[0 * nc + 0];\n      if (isNaN(target.x) || isNaN(target.y) || isNaN(target.z) || target.x === Infinity || target.y === Infinity || target.z === Infinity) {\n        throw \"Could not solve equation! Got x=[\".concat(target.toString(), \"], b=[\").concat(b.toString(), \"], A=[\").concat(this.toString(), \"]\");\n      }\n      return target;\n    }\n    /**\n     * Get an element in the matrix by index. Index starts at 0, not 1!!!\n     * @param value If provided, the matrix element will be set to this value.\n     */\n  }, {\n    key: \"e\",\n    value: function e(row, column, value) {\n      if (value === undefined) {\n        return this.elements[column + 3 * row];\n      } else {\n        // Set value\n        this.elements[column + 3 * row] = value;\n      }\n    }\n    /**\n     * Copy another matrix into this matrix object.\n     */\n  }, {\n    key: \"copy\",\n    value: function copy(matrix) {\n      for (var i = 0; i < matrix.elements.length; i++) {\n        this.elements[i] = matrix.elements[i];\n      }\n      return this;\n    }\n    /**\n     * Returns a string representation of the matrix.\n     */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var r = '';\n      var sep = ',';\n      for (var i = 0; i < 9; i++) {\n        r += this.elements[i] + sep;\n      }\n      return r;\n    }\n    /**\n     * reverse the matrix\n     * @param target Target matrix to save in.\n     * @return The solution x\n     */\n  }, {\n    key: \"reverse\",\n    value: function reverse(target) {\n      if (target === void 0) {\n        target = new Mat3();\n      }\n\n      // Construct equations\n      var nr = 3; // num rows\n\n      var nc = 6; // num cols\n\n      var eqns = reverse_eqns;\n      var i;\n      var j;\n      for (i = 0; i < 3; i++) {\n        for (j = 0; j < 3; j++) {\n          eqns[i + nc * j] = this.elements[i + 3 * j];\n        }\n      }\n      eqns[3 + 6 * 0] = 1;\n      eqns[3 + 6 * 1] = 0;\n      eqns[3 + 6 * 2] = 0;\n      eqns[4 + 6 * 0] = 0;\n      eqns[4 + 6 * 1] = 1;\n      eqns[4 + 6 * 2] = 0;\n      eqns[5 + 6 * 0] = 0;\n      eqns[5 + 6 * 1] = 0;\n      eqns[5 + 6 * 2] = 1; // Compute right upper triangular version of the matrix - Gauss elimination\n\n      var n = 3;\n      var k = n;\n      var np;\n      var kp = nc; // num rows\n\n      var p;\n      do {\n        i = k - n;\n        if (eqns[i + nc * i] === 0) {\n          // the pivot is null, swap lines\n          for (j = i + 1; j < k; j++) {\n            if (eqns[i + nc * j] !== 0) {\n              np = kp;\n              do {\n                // do line( i ) = line( i ) + line( k )\n                p = kp - np;\n                eqns[p + nc * i] += eqns[p + nc * j];\n              } while (--np);\n              break;\n            }\n          }\n        }\n        if (eqns[i + nc * i] !== 0) {\n          for (j = i + 1; j < k; j++) {\n            var multiplier = eqns[i + nc * j] / eqns[i + nc * i];\n            np = kp;\n            do {\n              // do line( k ) = line( k ) - multiplier * line( i )\n              p = kp - np;\n              eqns[p + nc * j] = p <= i ? 0 : eqns[p + nc * j] - eqns[p + nc * i] * multiplier;\n            } while (--np);\n          }\n        }\n      } while (--n); // eliminate the upper left triangle of the matrix\n\n      i = 2;\n      do {\n        j = i - 1;\n        do {\n          var _multiplier = eqns[i + nc * j] / eqns[i + nc * i];\n          np = nc;\n          do {\n            p = nc - np;\n            eqns[p + nc * j] = eqns[p + nc * j] - eqns[p + nc * i] * _multiplier;\n          } while (--np);\n        } while (j--);\n      } while (--i); // operations on the diagonal\n\n      i = 2;\n      do {\n        var _multiplier2 = 1 / eqns[i + nc * i];\n        np = nc;\n        do {\n          p = nc - np;\n          eqns[p + nc * i] = eqns[p + nc * i] * _multiplier2;\n        } while (--np);\n      } while (i--);\n      i = 2;\n      do {\n        j = 2;\n        do {\n          p = eqns[nr + j + nc * i];\n          if (isNaN(p) || p === Infinity) {\n            throw \"Could not reverse! A=[\".concat(this.toString(), \"]\");\n          }\n          target.e(i, j, p);\n        } while (j--);\n      } while (i--);\n      return target;\n    }\n    /**\n     * Set the matrix from a quaterion\n     */\n  }, {\n    key: \"setRotationFromQuaternion\",\n    value: function setRotationFromQuaternion(q) {\n      var x = q.x;\n      var y = q.y;\n      var z = q.z;\n      var w = q.w;\n      var x2 = x + x;\n      var y2 = y + y;\n      var z2 = z + z;\n      var xx = x * x2;\n      var xy = x * y2;\n      var xz = x * z2;\n      var yy = y * y2;\n      var yz = y * z2;\n      var zz = z * z2;\n      var wx = w * x2;\n      var wy = w * y2;\n      var wz = w * z2;\n      var e = this.elements;\n      e[3 * 0 + 0] = 1 - (yy + zz);\n      e[3 * 0 + 1] = xy - wz;\n      e[3 * 0 + 2] = xz + wy;\n      e[3 * 1 + 0] = xy + wz;\n      e[3 * 1 + 1] = 1 - (xx + zz);\n      e[3 * 1 + 2] = yz - wx;\n      e[3 * 2 + 0] = xz - wy;\n      e[3 * 2 + 1] = yz + wx;\n      e[3 * 2 + 2] = 1 - (xx + yy);\n      return this;\n    }\n    /**\n     * Transpose the matrix\n     * @param target Optional. Where to store the result.\n     * @return The target Mat3, or a new Mat3 if target was omitted.\n     */\n  }, {\n    key: \"transpose\",\n    value: function transpose(target) {\n      if (target === void 0) {\n        target = new Mat3();\n      }\n      var M = this.elements;\n      var T = target.elements;\n      var tmp; //Set diagonals\n\n      T[0] = M[0];\n      T[4] = M[4];\n      T[8] = M[8];\n      tmp = M[1];\n      T[1] = M[3];\n      T[3] = tmp;\n      tmp = M[2];\n      T[2] = M[6];\n      T[6] = tmp;\n      tmp = M[5];\n      T[5] = M[7];\n      T[7] = tmp;\n      return target;\n    }\n  }]);\n  return Mat3;\n}();\nvar reverse_eqns = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n\n/**\n * 3-dimensional vector\n * @example\n *     const v = new Vec3(1, 2, 3)\n *     console.log('x=' + v.x) // x=1\n */\nvar Vec3 = /*#__PURE__*/function () {\n  function Vec3(x, y, z) {\n    _classCallCheck(this, Vec3);\n    if (x === void 0) {\n      x = 0.0;\n    }\n    if (y === void 0) {\n      y = 0.0;\n    }\n    if (z === void 0) {\n      z = 0.0;\n    }\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n  /**\n   * Vector cross product\n   * @param target Optional target to save in.\n   */\n  _createClass(Vec3, [{\n    key: \"cross\",\n    value: function cross(vector, target) {\n      if (target === void 0) {\n        target = new Vec3();\n      }\n      var vx = vector.x;\n      var vy = vector.y;\n      var vz = vector.z;\n      var x = this.x;\n      var y = this.y;\n      var z = this.z;\n      target.x = y * vz - z * vy;\n      target.y = z * vx - x * vz;\n      target.z = x * vy - y * vx;\n      return target;\n    }\n    /**\n     * Set the vectors' 3 elements\n     */\n  }, {\n    key: \"set\",\n    value: function set(x, y, z) {\n      this.x = x;\n      this.y = y;\n      this.z = z;\n      return this;\n    }\n    /**\n     * Set all components of the vector to zero.\n     */\n  }, {\n    key: \"setZero\",\n    value: function setZero() {\n      this.x = this.y = this.z = 0;\n    }\n    /**\n     * Vector addition\n     */\n  }, {\n    key: \"vadd\",\n    value: function vadd(vector, target) {\n      if (target) {\n        target.x = vector.x + this.x;\n        target.y = vector.y + this.y;\n        target.z = vector.z + this.z;\n      } else {\n        return new Vec3(this.x + vector.x, this.y + vector.y, this.z + vector.z);\n      }\n    }\n    /**\n     * Vector subtraction\n     * @param target Optional target to save in.\n     */\n  }, {\n    key: \"vsub\",\n    value: function vsub(vector, target) {\n      if (target) {\n        target.x = this.x - vector.x;\n        target.y = this.y - vector.y;\n        target.z = this.z - vector.z;\n      } else {\n        return new Vec3(this.x - vector.x, this.y - vector.y, this.z - vector.z);\n      }\n    }\n    /**\n     * Get the cross product matrix a_cross from a vector, such that a x b = a_cross * b = c\n     *\n     * See {@link https://www8.cs.umu.se/kurser/TDBD24/VT06/lectures/Lecture6.pdf Umeå University Lecture}\n     */\n  }, {\n    key: \"crossmat\",\n    value: function crossmat() {\n      return new Mat3([0, -this.z, this.y, this.z, 0, -this.x, -this.y, this.x, 0]);\n    }\n    /**\n     * Normalize the vector. Note that this changes the values in the vector.\n      * @return Returns the norm of the vector\n     */\n  }, {\n    key: \"normalize\",\n    value: function normalize() {\n      var x = this.x;\n      var y = this.y;\n      var z = this.z;\n      var n = Math.sqrt(x * x + y * y + z * z);\n      if (n > 0.0) {\n        var invN = 1 / n;\n        this.x *= invN;\n        this.y *= invN;\n        this.z *= invN;\n      } else {\n        // Make something up\n        this.x = 0;\n        this.y = 0;\n        this.z = 0;\n      }\n      return n;\n    }\n    /**\n     * Get the version of this vector that is of length 1.\n     * @param target Optional target to save in\n     * @return Returns the unit vector\n     */\n  }, {\n    key: \"unit\",\n    value: function unit(target) {\n      if (target === void 0) {\n        target = new Vec3();\n      }\n      var x = this.x;\n      var y = this.y;\n      var z = this.z;\n      var ninv = Math.sqrt(x * x + y * y + z * z);\n      if (ninv > 0.0) {\n        ninv = 1.0 / ninv;\n        target.x = x * ninv;\n        target.y = y * ninv;\n        target.z = z * ninv;\n      } else {\n        target.x = 1;\n        target.y = 0;\n        target.z = 0;\n      }\n      return target;\n    }\n    /**\n     * Get the length of the vector\n     */\n  }, {\n    key: \"length\",\n    value: function length() {\n      var x = this.x;\n      var y = this.y;\n      var z = this.z;\n      return Math.sqrt(x * x + y * y + z * z);\n    }\n    /**\n     * Get the squared length of the vector.\n     */\n  }, {\n    key: \"lengthSquared\",\n    value: function lengthSquared() {\n      return this.dot(this);\n    }\n    /**\n     * Get distance from this point to another point\n     */\n  }, {\n    key: \"distanceTo\",\n    value: function distanceTo(p) {\n      var x = this.x;\n      var y = this.y;\n      var z = this.z;\n      var px = p.x;\n      var py = p.y;\n      var pz = p.z;\n      return Math.sqrt((px - x) * (px - x) + (py - y) * (py - y) + (pz - z) * (pz - z));\n    }\n    /**\n     * Get squared distance from this point to another point\n     */\n  }, {\n    key: \"distanceSquared\",\n    value: function distanceSquared(p) {\n      var x = this.x;\n      var y = this.y;\n      var z = this.z;\n      var px = p.x;\n      var py = p.y;\n      var pz = p.z;\n      return (px - x) * (px - x) + (py - y) * (py - y) + (pz - z) * (pz - z);\n    }\n    /**\n     * Multiply all the components of the vector with a scalar.\n     * @param target The vector to save the result in.\n     */\n  }, {\n    key: \"scale\",\n    value: function scale(scalar, target) {\n      if (target === void 0) {\n        target = new Vec3();\n      }\n      var x = this.x;\n      var y = this.y;\n      var z = this.z;\n      target.x = scalar * x;\n      target.y = scalar * y;\n      target.z = scalar * z;\n      return target;\n    }\n    /**\n     * Multiply the vector with an other vector, component-wise.\n     * @param target The vector to save the result in.\n     */\n  }, {\n    key: \"vmul\",\n    value: function vmul(vector, target) {\n      if (target === void 0) {\n        target = new Vec3();\n      }\n      target.x = vector.x * this.x;\n      target.y = vector.y * this.y;\n      target.z = vector.z * this.z;\n      return target;\n    }\n    /**\n     * Scale a vector and add it to this vector. Save the result in \"target\". (target = this + vector * scalar)\n     * @param target The vector to save the result in.\n     */\n  }, {\n    key: \"addScaledVector\",\n    value: function addScaledVector(scalar, vector, target) {\n      if (target === void 0) {\n        target = new Vec3();\n      }\n      target.x = this.x + scalar * vector.x;\n      target.y = this.y + scalar * vector.y;\n      target.z = this.z + scalar * vector.z;\n      return target;\n    }\n    /**\n     * Calculate dot product\n     * @param vector\n     */\n  }, {\n    key: \"dot\",\n    value: function dot(vector) {\n      return this.x * vector.x + this.y * vector.y + this.z * vector.z;\n    }\n  }, {\n    key: \"isZero\",\n    value: function isZero() {\n      return this.x === 0 && this.y === 0 && this.z === 0;\n    }\n    /**\n     * Make the vector point in the opposite direction.\n     * @param target Optional target to save in\n     */\n  }, {\n    key: \"negate\",\n    value: function negate(target) {\n      if (target === void 0) {\n        target = new Vec3();\n      }\n      target.x = -this.x;\n      target.y = -this.y;\n      target.z = -this.z;\n      return target;\n    }\n    /**\n     * Compute two artificial tangents to the vector\n     * @param t1 Vector object to save the first tangent in\n     * @param t2 Vector object to save the second tangent in\n     */\n  }, {\n    key: \"tangents\",\n    value: function tangents(t1, t2) {\n      var norm = this.length();\n      if (norm > 0.0) {\n        var n = Vec3_tangents_n;\n        var inorm = 1 / norm;\n        n.set(this.x * inorm, this.y * inorm, this.z * inorm);\n        var randVec = Vec3_tangents_randVec;\n        if (Math.abs(n.x) < 0.9) {\n          randVec.set(1, 0, 0);\n          n.cross(randVec, t1);\n        } else {\n          randVec.set(0, 1, 0);\n          n.cross(randVec, t1);\n        }\n        n.cross(t1, t2);\n      } else {\n        // The normal length is zero, make something up\n        t1.set(1, 0, 0);\n        t2.set(0, 1, 0);\n      }\n    }\n    /**\n     * Converts to a more readable format\n     */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"\".concat(this.x, \",\").concat(this.y, \",\").concat(this.z);\n    }\n    /**\n     * Converts to an array\n     */\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      return [this.x, this.y, this.z];\n    }\n    /**\n     * Copies value of source to this vector.\n     */\n  }, {\n    key: \"copy\",\n    value: function copy(vector) {\n      this.x = vector.x;\n      this.y = vector.y;\n      this.z = vector.z;\n      return this;\n    }\n    /**\n     * Do a linear interpolation between two vectors\n     * @param t A number between 0 and 1. 0 will make this function return u, and 1 will make it return v. Numbers in between will generate a vector in between them.\n     */\n  }, {\n    key: \"lerp\",\n    value: function lerp(vector, t, target) {\n      var x = this.x;\n      var y = this.y;\n      var z = this.z;\n      target.x = x + (vector.x - x) * t;\n      target.y = y + (vector.y - y) * t;\n      target.z = z + (vector.z - z) * t;\n    }\n    /**\n     * Check if a vector equals is almost equal to another one.\n     */\n  }, {\n    key: \"almostEquals\",\n    value: function almostEquals(vector, precision) {\n      if (precision === void 0) {\n        precision = 1e-6;\n      }\n      if (Math.abs(this.x - vector.x) > precision || Math.abs(this.y - vector.y) > precision || Math.abs(this.z - vector.z) > precision) {\n        return false;\n      }\n      return true;\n    }\n    /**\n     * Check if a vector is almost zero\n     */\n  }, {\n    key: \"almostZero\",\n    value: function almostZero(precision) {\n      if (precision === void 0) {\n        precision = 1e-6;\n      }\n      if (Math.abs(this.x) > precision || Math.abs(this.y) > precision || Math.abs(this.z) > precision) {\n        return false;\n      }\n      return true;\n    }\n    /**\n     * Check if the vector is anti-parallel to another vector.\n     * @param precision Set to zero for exact comparisons\n     */\n  }, {\n    key: \"isAntiparallelTo\",\n    value: function isAntiparallelTo(vector, precision) {\n      this.negate(antip_neg);\n      return antip_neg.almostEquals(vector, precision);\n    }\n    /**\n     * Clone the vector\n     */\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new Vec3(this.x, this.y, this.z);\n    }\n  }]);\n  return Vec3;\n}();\nVec3.ZERO = new Vec3(0, 0, 0);\nVec3.UNIT_X = new Vec3(1, 0, 0);\nVec3.UNIT_Y = new Vec3(0, 1, 0);\nVec3.UNIT_Z = new Vec3(0, 0, 1);\nvar Vec3_tangents_n = new Vec3();\nvar Vec3_tangents_randVec = new Vec3();\nvar antip_neg = new Vec3();\n\n/**\n * Axis aligned bounding box class.\n */\nvar AABB = /*#__PURE__*/function () {\n  /**\n   * The lower bound of the bounding box\n   */\n\n  /**\n   * The upper bound of the bounding box\n   */\n  function AABB(options) {\n    _classCallCheck(this, AABB);\n    if (options === void 0) {\n      options = {};\n    }\n    this.lowerBound = new Vec3();\n    this.upperBound = new Vec3();\n    if (options.lowerBound) {\n      this.lowerBound.copy(options.lowerBound);\n    }\n    if (options.upperBound) {\n      this.upperBound.copy(options.upperBound);\n    }\n  }\n  /**\n   * Set the AABB bounds from a set of points.\n   * @param points An array of Vec3's.\n   * @return The self object\n   */\n  _createClass(AABB, [{\n    key: \"setFromPoints\",\n    value: function setFromPoints(points, position, quaternion, skinSize) {\n      var l = this.lowerBound;\n      var u = this.upperBound;\n      var q = quaternion; // Set to the first point\n\n      l.copy(points[0]);\n      if (q) {\n        q.vmult(l, l);\n      }\n      u.copy(l);\n      for (var i = 1; i < points.length; i++) {\n        var p = points[i];\n        if (q) {\n          q.vmult(p, tmp$1);\n          p = tmp$1;\n        }\n        if (p.x > u.x) {\n          u.x = p.x;\n        }\n        if (p.x < l.x) {\n          l.x = p.x;\n        }\n        if (p.y > u.y) {\n          u.y = p.y;\n        }\n        if (p.y < l.y) {\n          l.y = p.y;\n        }\n        if (p.z > u.z) {\n          u.z = p.z;\n        }\n        if (p.z < l.z) {\n          l.z = p.z;\n        }\n      } // Add offset\n\n      if (position) {\n        position.vadd(l, l);\n        position.vadd(u, u);\n      }\n      if (skinSize) {\n        l.x -= skinSize;\n        l.y -= skinSize;\n        l.z -= skinSize;\n        u.x += skinSize;\n        u.y += skinSize;\n        u.z += skinSize;\n      }\n      return this;\n    }\n    /**\n     * Copy bounds from an AABB to this AABB\n     * @param aabb Source to copy from\n     * @return The this object, for chainability\n     */\n  }, {\n    key: \"copy\",\n    value: function copy(aabb) {\n      this.lowerBound.copy(aabb.lowerBound);\n      this.upperBound.copy(aabb.upperBound);\n      return this;\n    }\n    /**\n     * Clone an AABB\n     */\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new AABB().copy(this);\n    }\n    /**\n     * Extend this AABB so that it covers the given AABB too.\n     */\n  }, {\n    key: \"extend\",\n    value: function extend(aabb) {\n      this.lowerBound.x = Math.min(this.lowerBound.x, aabb.lowerBound.x);\n      this.upperBound.x = Math.max(this.upperBound.x, aabb.upperBound.x);\n      this.lowerBound.y = Math.min(this.lowerBound.y, aabb.lowerBound.y);\n      this.upperBound.y = Math.max(this.upperBound.y, aabb.upperBound.y);\n      this.lowerBound.z = Math.min(this.lowerBound.z, aabb.lowerBound.z);\n      this.upperBound.z = Math.max(this.upperBound.z, aabb.upperBound.z);\n    }\n    /**\n     * Returns true if the given AABB overlaps this AABB.\n     */\n  }, {\n    key: \"overlaps\",\n    value: function overlaps(aabb) {\n      var l1 = this.lowerBound;\n      var u1 = this.upperBound;\n      var l2 = aabb.lowerBound;\n      var u2 = aabb.upperBound; //      l2        u2\n      //      |---------|\n      // |--------|\n      // l1       u1\n\n      var overlapsX = l2.x <= u1.x && u1.x <= u2.x || l1.x <= u2.x && u2.x <= u1.x;\n      var overlapsY = l2.y <= u1.y && u1.y <= u2.y || l1.y <= u2.y && u2.y <= u1.y;\n      var overlapsZ = l2.z <= u1.z && u1.z <= u2.z || l1.z <= u2.z && u2.z <= u1.z;\n      return overlapsX && overlapsY && overlapsZ;\n    } // Mostly for debugging\n  }, {\n    key: \"volume\",\n    value: function volume() {\n      var l = this.lowerBound;\n      var u = this.upperBound;\n      return (u.x - l.x) * (u.y - l.y) * (u.z - l.z);\n    }\n    /**\n     * Returns true if the given AABB is fully contained in this AABB.\n     */\n  }, {\n    key: \"contains\",\n    value: function contains(aabb) {\n      var l1 = this.lowerBound;\n      var u1 = this.upperBound;\n      var l2 = aabb.lowerBound;\n      var u2 = aabb.upperBound; //      l2        u2\n      //      |---------|\n      // |---------------|\n      // l1              u1\n\n      return l1.x <= l2.x && u1.x >= u2.x && l1.y <= l2.y && u1.y >= u2.y && l1.z <= l2.z && u1.z >= u2.z;\n    }\n  }, {\n    key: \"getCorners\",\n    value: function getCorners(a, b, c, d, e, f, g, h) {\n      var l = this.lowerBound;\n      var u = this.upperBound;\n      a.copy(l);\n      b.set(u.x, l.y, l.z);\n      c.set(u.x, u.y, l.z);\n      d.set(l.x, u.y, u.z);\n      e.set(u.x, l.y, u.z);\n      f.set(l.x, u.y, l.z);\n      g.set(l.x, l.y, u.z);\n      h.copy(u);\n    }\n    /**\n     * Get the representation of an AABB in another frame.\n     * @return The \"target\" AABB object.\n     */\n  }, {\n    key: \"toLocalFrame\",\n    value: function toLocalFrame(frame, target) {\n      var corners = transformIntoFrame_corners;\n      var a = corners[0];\n      var b = corners[1];\n      var c = corners[2];\n      var d = corners[3];\n      var e = corners[4];\n      var f = corners[5];\n      var g = corners[6];\n      var h = corners[7]; // Get corners in current frame\n\n      this.getCorners(a, b, c, d, e, f, g, h); // Transform them to new local frame\n\n      for (var i = 0; i !== 8; i++) {\n        var corner = corners[i];\n        frame.pointToLocal(corner, corner);\n      }\n      return target.setFromPoints(corners);\n    }\n    /**\n     * Get the representation of an AABB in the global frame.\n     * @return The \"target\" AABB object.\n     */\n  }, {\n    key: \"toWorldFrame\",\n    value: function toWorldFrame(frame, target) {\n      var corners = transformIntoFrame_corners;\n      var a = corners[0];\n      var b = corners[1];\n      var c = corners[2];\n      var d = corners[3];\n      var e = corners[4];\n      var f = corners[5];\n      var g = corners[6];\n      var h = corners[7]; // Get corners in current frame\n\n      this.getCorners(a, b, c, d, e, f, g, h); // Transform them to new local frame\n\n      for (var i = 0; i !== 8; i++) {\n        var corner = corners[i];\n        frame.pointToWorld(corner, corner);\n      }\n      return target.setFromPoints(corners);\n    }\n    /**\n     * Check if the AABB is hit by a ray.\n     */\n  }, {\n    key: \"overlapsRay\",\n    value: function overlapsRay(ray) {\n      var direction = ray.direction,\n        from = ray.from; // const t = 0\n      // ray.direction is unit direction vector of ray\n\n      var dirFracX = 1 / direction.x;\n      var dirFracY = 1 / direction.y;\n      var dirFracZ = 1 / direction.z; // this.lowerBound is the corner of AABB with minimal coordinates - left bottom, rt is maximal corner\n\n      var t1 = (this.lowerBound.x - from.x) * dirFracX;\n      var t2 = (this.upperBound.x - from.x) * dirFracX;\n      var t3 = (this.lowerBound.y - from.y) * dirFracY;\n      var t4 = (this.upperBound.y - from.y) * dirFracY;\n      var t5 = (this.lowerBound.z - from.z) * dirFracZ;\n      var t6 = (this.upperBound.z - from.z) * dirFracZ; // const tmin = Math.max(Math.max(Math.min(t1, t2), Math.min(t3, t4)));\n      // const tmax = Math.min(Math.min(Math.max(t1, t2), Math.max(t3, t4)));\n\n      var tmin = Math.max(Math.max(Math.min(t1, t2), Math.min(t3, t4)), Math.min(t5, t6));\n      var tmax = Math.min(Math.min(Math.max(t1, t2), Math.max(t3, t4)), Math.max(t5, t6)); // if tmax < 0, ray (line) is intersecting AABB, but whole AABB is behing us\n\n      if (tmax < 0) {\n        //t = tmax;\n        return false;\n      } // if tmin > tmax, ray doesn't intersect AABB\n\n      if (tmin > tmax) {\n        //t = tmax;\n        return false;\n      }\n      return true;\n    }\n  }]);\n  return AABB;\n}();\nvar tmp$1 = new Vec3();\nvar transformIntoFrame_corners = [new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3()];\n\n/**\n * Collision \"matrix\".\n * It's actually a triangular-shaped array of whether two bodies are touching this step, for reference next step\n */\nvar ArrayCollisionMatrix = /*#__PURE__*/function () {\n  /**\n   * The matrix storage.\n   */\n  function ArrayCollisionMatrix() {\n    _classCallCheck(this, ArrayCollisionMatrix);\n    this.matrix = [];\n  }\n  /**\n   * Get an element\n   */\n  _createClass(ArrayCollisionMatrix, [{\n    key: \"get\",\n    value: function get(bi, bj) {\n      var i = bi.index;\n      var j = bj.index;\n      if (j > i) {\n        var temp = j;\n        j = i;\n        i = temp;\n      }\n      return this.matrix[(i * (i + 1) >> 1) + j - 1];\n    }\n    /**\n     * Set an element\n     */\n  }, {\n    key: \"set\",\n    value: function set(bi, bj, value) {\n      var i = bi.index;\n      var j = bj.index;\n      if (j > i) {\n        var temp = j;\n        j = i;\n        i = temp;\n      }\n      this.matrix[(i * (i + 1) >> 1) + j - 1] = value ? 1 : 0;\n    }\n    /**\n     * Sets all elements to zero\n     */\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      for (var i = 0, l = this.matrix.length; i !== l; i++) {\n        this.matrix[i] = 0;\n      }\n    }\n    /**\n     * Sets the max number of objects\n     */\n  }, {\n    key: \"setNumObjects\",\n    value: function setNumObjects(n) {\n      this.matrix.length = n * (n - 1) >> 1;\n    }\n  }]);\n  return ArrayCollisionMatrix;\n}();\n/**\n * Base class for objects that dispatches events.\n */\nvar EventTarget = /*#__PURE__*/function () {\n  function EventTarget() {\n    _classCallCheck(this, EventTarget);\n  }\n  _createClass(EventTarget, [{\n    key: \"addEventListener\",\n    value:\n    /**\n     * Add an event listener\n     * @return The self object, for chainability.\n     */\n    function addEventListener(type, listener) {\n      if (this._listeners === undefined) {\n        this._listeners = {};\n      }\n      var listeners = this._listeners;\n      if (listeners[type] === undefined) {\n        listeners[type] = [];\n      }\n      if (!listeners[type].includes(listener)) {\n        listeners[type].push(listener);\n      }\n      return this;\n    }\n    /**\n     * Check if an event listener is added\n     */\n  }, {\n    key: \"hasEventListener\",\n    value: function hasEventListener(type, listener) {\n      if (this._listeners === undefined) {\n        return false;\n      }\n      var listeners = this._listeners;\n      if (listeners[type] !== undefined && listeners[type].includes(listener)) {\n        return true;\n      }\n      return false;\n    }\n    /**\n     * Check if any event listener of the given type is added\n     */\n  }, {\n    key: \"hasAnyEventListener\",\n    value: function hasAnyEventListener(type) {\n      if (this._listeners === undefined) {\n        return false;\n      }\n      var listeners = this._listeners;\n      return listeners[type] !== undefined;\n    }\n    /**\n     * Remove an event listener\n     * @return The self object, for chainability.\n     */\n  }, {\n    key: \"removeEventListener\",\n    value: function removeEventListener(type, listener) {\n      if (this._listeners === undefined) {\n        return this;\n      }\n      var listeners = this._listeners;\n      if (listeners[type] === undefined) {\n        return this;\n      }\n      var index = listeners[type].indexOf(listener);\n      if (index !== -1) {\n        listeners[type].splice(index, 1);\n      }\n      return this;\n    }\n    /**\n     * Emit an event.\n     * @return The self object, for chainability.\n     */\n  }, {\n    key: \"dispatchEvent\",\n    value: function dispatchEvent(event) {\n      if (this._listeners === undefined) {\n        return this;\n      }\n      var listeners = this._listeners;\n      var listenerArray = listeners[event.type];\n      if (listenerArray !== undefined) {\n        event.target = this;\n        for (var i = 0, l = listenerArray.length; i < l; i++) {\n          listenerArray[i].call(this, event);\n        }\n      }\n      return this;\n    }\n  }]);\n  return EventTarget;\n}();\n/**\n * A Quaternion describes a rotation in 3D space. The Quaternion is mathematically defined as Q = x*i + y*j + z*k + w, where (i,j,k) are imaginary basis vectors. (x,y,z) can be seen as a vector related to the axis of rotation, while the real multiplier, w, is related to the amount of rotation.\n * @param x Multiplier of the imaginary basis vector i.\n * @param y Multiplier of the imaginary basis vector j.\n * @param z Multiplier of the imaginary basis vector k.\n * @param w Multiplier of the real part.\n * @see http://en.wikipedia.org/wiki/Quaternion\n */\nvar Quaternion = /*#__PURE__*/function () {\n  function Quaternion(x, y, z, w) {\n    _classCallCheck(this, Quaternion);\n    if (x === void 0) {\n      x = 0;\n    }\n    if (y === void 0) {\n      y = 0;\n    }\n    if (z === void 0) {\n      z = 0;\n    }\n    if (w === void 0) {\n      w = 1;\n    }\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n  }\n  /**\n   * Set the value of the quaternion.\n   */\n  _createClass(Quaternion, [{\n    key: \"set\",\n    value: function set(x, y, z, w) {\n      this.x = x;\n      this.y = y;\n      this.z = z;\n      this.w = w;\n      return this;\n    }\n    /**\n     * Convert to a readable format\n     * @return \"x,y,z,w\"\n     */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"\".concat(this.x, \",\").concat(this.y, \",\").concat(this.z, \",\").concat(this.w);\n    }\n    /**\n     * Convert to an Array\n     * @return [x, y, z, w]\n     */\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      return [this.x, this.y, this.z, this.w];\n    }\n    /**\n     * Set the quaternion components given an axis and an angle in radians.\n     */\n  }, {\n    key: \"setFromAxisAngle\",\n    value: function setFromAxisAngle(vector, angle) {\n      var s = Math.sin(angle * 0.5);\n      this.x = vector.x * s;\n      this.y = vector.y * s;\n      this.z = vector.z * s;\n      this.w = Math.cos(angle * 0.5);\n      return this;\n    }\n    /**\n     * Converts the quaternion to [ axis, angle ] representation.\n     * @param targetAxis A vector object to reuse for storing the axis.\n     * @return An array, first element is the axis and the second is the angle in radians.\n     */\n  }, {\n    key: \"toAxisAngle\",\n    value: function toAxisAngle(targetAxis) {\n      if (targetAxis === void 0) {\n        targetAxis = new Vec3();\n      }\n      this.normalize(); // if w>1 acos and sqrt will produce errors, this cant happen if quaternion is normalised\n\n      var angle = 2 * Math.acos(this.w);\n      var s = Math.sqrt(1 - this.w * this.w); // assuming quaternion normalised then w is less than 1, so term always positive.\n\n      if (s < 0.001) {\n        // test to avoid divide by zero, s is always positive due to sqrt\n        // if s close to zero then direction of axis not important\n        targetAxis.x = this.x; // if it is important that axis is normalised then replace with x=1; y=z=0;\n\n        targetAxis.y = this.y;\n        targetAxis.z = this.z;\n      } else {\n        targetAxis.x = this.x / s; // normalise axis\n\n        targetAxis.y = this.y / s;\n        targetAxis.z = this.z / s;\n      }\n      return [targetAxis, angle];\n    }\n    /**\n     * Set the quaternion value given two vectors. The resulting rotation will be the needed rotation to rotate u to v.\n     */\n  }, {\n    key: \"setFromVectors\",\n    value: function setFromVectors(u, v) {\n      if (u.isAntiparallelTo(v)) {\n        var t1 = sfv_t1;\n        var t2 = sfv_t2;\n        u.tangents(t1, t2);\n        this.setFromAxisAngle(t1, Math.PI);\n      } else {\n        var _a = u.cross(v);\n        this.x = _a.x;\n        this.y = _a.y;\n        this.z = _a.z;\n        this.w = Math.sqrt(Math.pow(u.length(), 2) * Math.pow(v.length(), 2)) + u.dot(v);\n        this.normalize();\n      }\n      return this;\n    }\n    /**\n     * Multiply the quaternion with an other quaternion.\n     */\n  }, {\n    key: \"mult\",\n    value: function mult(quat, target) {\n      if (target === void 0) {\n        target = new Quaternion();\n      }\n      var ax = this.x;\n      var ay = this.y;\n      var az = this.z;\n      var aw = this.w;\n      var bx = quat.x;\n      var by = quat.y;\n      var bz = quat.z;\n      var bw = quat.w;\n      target.x = ax * bw + aw * bx + ay * bz - az * by;\n      target.y = ay * bw + aw * by + az * bx - ax * bz;\n      target.z = az * bw + aw * bz + ax * by - ay * bx;\n      target.w = aw * bw - ax * bx - ay * by - az * bz;\n      return target;\n    }\n    /**\n     * Get the inverse quaternion rotation.\n     */\n  }, {\n    key: \"inverse\",\n    value: function inverse(target) {\n      if (target === void 0) {\n        target = new Quaternion();\n      }\n      var x = this.x;\n      var y = this.y;\n      var z = this.z;\n      var w = this.w;\n      this.conjugate(target);\n      var inorm2 = 1 / (x * x + y * y + z * z + w * w);\n      target.x *= inorm2;\n      target.y *= inorm2;\n      target.z *= inorm2;\n      target.w *= inorm2;\n      return target;\n    }\n    /**\n     * Get the quaternion conjugate\n     */\n  }, {\n    key: \"conjugate\",\n    value: function conjugate(target) {\n      if (target === void 0) {\n        target = new Quaternion();\n      }\n      target.x = -this.x;\n      target.y = -this.y;\n      target.z = -this.z;\n      target.w = this.w;\n      return target;\n    }\n    /**\n     * Normalize the quaternion. Note that this changes the values of the quaternion.\n     */\n  }, {\n    key: \"normalize\",\n    value: function normalize() {\n      var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n      if (l === 0) {\n        this.x = 0;\n        this.y = 0;\n        this.z = 0;\n        this.w = 0;\n      } else {\n        l = 1 / l;\n        this.x *= l;\n        this.y *= l;\n        this.z *= l;\n        this.w *= l;\n      }\n      return this;\n    }\n    /**\n     * Approximation of quaternion normalization. Works best when quat is already almost-normalized.\n     * @author unphased, https://github.com/unphased\n     */\n  }, {\n    key: \"normalizeFast\",\n    value: function normalizeFast() {\n      var f = (3.0 - (this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w)) / 2.0;\n      if (f === 0) {\n        this.x = 0;\n        this.y = 0;\n        this.z = 0;\n        this.w = 0;\n      } else {\n        this.x *= f;\n        this.y *= f;\n        this.z *= f;\n        this.w *= f;\n      }\n      return this;\n    }\n    /**\n     * Multiply the quaternion by a vector\n     */\n  }, {\n    key: \"vmult\",\n    value: function vmult(v, target) {\n      if (target === void 0) {\n        target = new Vec3();\n      }\n      var x = v.x;\n      var y = v.y;\n      var z = v.z;\n      var qx = this.x;\n      var qy = this.y;\n      var qz = this.z;\n      var qw = this.w; // q*v\n\n      var ix = qw * x + qy * z - qz * y;\n      var iy = qw * y + qz * x - qx * z;\n      var iz = qw * z + qx * y - qy * x;\n      var iw = -qx * x - qy * y - qz * z;\n      target.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n      target.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n      target.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n      return target;\n    }\n    /**\n     * Copies value of source to this quaternion.\n     * @return this\n     */\n  }, {\n    key: \"copy\",\n    value: function copy(quat) {\n      this.x = quat.x;\n      this.y = quat.y;\n      this.z = quat.z;\n      this.w = quat.w;\n      return this;\n    }\n    /**\n     * Convert the quaternion to euler angle representation. Order: YZX, as this page describes: https://www.euclideanspace.com/maths/standards/index.htm\n     * @param order Three-character string, defaults to \"YZX\"\n     */\n  }, {\n    key: \"toEuler\",\n    value: function toEuler(target, order) {\n      if (order === void 0) {\n        order = 'YZX';\n      }\n      var heading;\n      var attitude;\n      var bank;\n      var x = this.x;\n      var y = this.y;\n      var z = this.z;\n      var w = this.w;\n      switch (order) {\n        case 'YZX':\n          var test = x * y + z * w;\n          if (test > 0.499) {\n            // singularity at north pole\n            heading = 2 * Math.atan2(x, w);\n            attitude = Math.PI / 2;\n            bank = 0;\n          }\n          if (test < -0.499) {\n            // singularity at south pole\n            heading = -2 * Math.atan2(x, w);\n            attitude = -Math.PI / 2;\n            bank = 0;\n          }\n          if (heading === undefined) {\n            var sqx = x * x;\n            var sqy = y * y;\n            var sqz = z * z;\n            heading = Math.atan2(2 * y * w - 2 * x * z, 1 - 2 * sqy - 2 * sqz); // Heading\n\n            attitude = Math.asin(2 * test); // attitude\n\n            bank = Math.atan2(2 * x * w - 2 * y * z, 1 - 2 * sqx - 2 * sqz); // bank\n          }\n\n          break;\n        default:\n          throw new Error(\"Euler order \".concat(order, \" not supported yet.\"));\n      }\n      target.y = heading;\n      target.z = attitude;\n      target.x = bank;\n    }\n    /**\n     * Set the quaternion components given Euler angle representation.\n     *\n     * @param order The order to apply angles: 'XYZ' or 'YXZ' or any other combination.\n     *\n     * See {@link https://www.mathworks.com/matlabcentral/fileexchange/20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors MathWorks} reference\n     */\n  }, {\n    key: \"setFromEuler\",\n    value: function setFromEuler(x, y, z, order) {\n      if (order === void 0) {\n        order = 'XYZ';\n      }\n      var c1 = Math.cos(x / 2);\n      var c2 = Math.cos(y / 2);\n      var c3 = Math.cos(z / 2);\n      var s1 = Math.sin(x / 2);\n      var s2 = Math.sin(y / 2);\n      var s3 = Math.sin(z / 2);\n      if (order === 'XYZ') {\n        this.x = s1 * c2 * c3 + c1 * s2 * s3;\n        this.y = c1 * s2 * c3 - s1 * c2 * s3;\n        this.z = c1 * c2 * s3 + s1 * s2 * c3;\n        this.w = c1 * c2 * c3 - s1 * s2 * s3;\n      } else if (order === 'YXZ') {\n        this.x = s1 * c2 * c3 + c1 * s2 * s3;\n        this.y = c1 * s2 * c3 - s1 * c2 * s3;\n        this.z = c1 * c2 * s3 - s1 * s2 * c3;\n        this.w = c1 * c2 * c3 + s1 * s2 * s3;\n      } else if (order === 'ZXY') {\n        this.x = s1 * c2 * c3 - c1 * s2 * s3;\n        this.y = c1 * s2 * c3 + s1 * c2 * s3;\n        this.z = c1 * c2 * s3 + s1 * s2 * c3;\n        this.w = c1 * c2 * c3 - s1 * s2 * s3;\n      } else if (order === 'ZYX') {\n        this.x = s1 * c2 * c3 - c1 * s2 * s3;\n        this.y = c1 * s2 * c3 + s1 * c2 * s3;\n        this.z = c1 * c2 * s3 - s1 * s2 * c3;\n        this.w = c1 * c2 * c3 + s1 * s2 * s3;\n      } else if (order === 'YZX') {\n        this.x = s1 * c2 * c3 + c1 * s2 * s3;\n        this.y = c1 * s2 * c3 + s1 * c2 * s3;\n        this.z = c1 * c2 * s3 - s1 * s2 * c3;\n        this.w = c1 * c2 * c3 - s1 * s2 * s3;\n      } else if (order === 'XZY') {\n        this.x = s1 * c2 * c3 - c1 * s2 * s3;\n        this.y = c1 * s2 * c3 - s1 * c2 * s3;\n        this.z = c1 * c2 * s3 + s1 * s2 * c3;\n        this.w = c1 * c2 * c3 + s1 * s2 * s3;\n      }\n      return this;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new Quaternion(this.x, this.y, this.z, this.w);\n    }\n    /**\n     * Performs a spherical linear interpolation between two quat\n     *\n     * @param toQuat second operand\n     * @param t interpolation amount between the self quaternion and toQuat\n     * @param target A quaternion to store the result in. If not provided, a new one will be created.\n     * @returns {Quaternion} The \"target\" object\n     */\n  }, {\n    key: \"slerp\",\n    value: function slerp(toQuat, t, target) {\n      if (target === void 0) {\n        target = new Quaternion();\n      }\n      var ax = this.x;\n      var ay = this.y;\n      var az = this.z;\n      var aw = this.w;\n      var bx = toQuat.x;\n      var by = toQuat.y;\n      var bz = toQuat.z;\n      var bw = toQuat.w;\n      var omega;\n      var cosom;\n      var sinom;\n      var scale0;\n      var scale1; // calc cosine\n\n      cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n      if (cosom < 0.0) {\n        cosom = -cosom;\n        bx = -bx;\n        by = -by;\n        bz = -bz;\n        bw = -bw;\n      } // calculate coefficients\n\n      if (1.0 - cosom > 0.000001) {\n        // standard case (slerp)\n        omega = Math.acos(cosom);\n        sinom = Math.sin(omega);\n        scale0 = Math.sin((1.0 - t) * omega) / sinom;\n        scale1 = Math.sin(t * omega) / sinom;\n      } else {\n        // \"from\" and \"to\" quaternions are very close\n        //  ... so we can do a linear interpolation\n        scale0 = 1.0 - t;\n        scale1 = t;\n      } // calculate final values\n\n      target.x = scale0 * ax + scale1 * bx;\n      target.y = scale0 * ay + scale1 * by;\n      target.z = scale0 * az + scale1 * bz;\n      target.w = scale0 * aw + scale1 * bw;\n      return target;\n    }\n    /**\n     * Rotate an absolute orientation quaternion given an angular velocity and a time step.\n     */\n  }, {\n    key: \"integrate\",\n    value: function integrate(angularVelocity, dt, angularFactor, target) {\n      if (target === void 0) {\n        target = new Quaternion();\n      }\n      var ax = angularVelocity.x * angularFactor.x,\n        ay = angularVelocity.y * angularFactor.y,\n        az = angularVelocity.z * angularFactor.z,\n        bx = this.x,\n        by = this.y,\n        bz = this.z,\n        bw = this.w;\n      var half_dt = dt * 0.5;\n      target.x += half_dt * (ax * bw + ay * bz - az * by);\n      target.y += half_dt * (ay * bw + az * bx - ax * bz);\n      target.z += half_dt * (az * bw + ax * by - ay * bx);\n      target.w += half_dt * (-ax * bx - ay * by - az * bz);\n      return target;\n    }\n  }]);\n  return Quaternion;\n}();\nvar sfv_t1 = new Vec3();\nvar sfv_t2 = new Vec3();\n\n/**\n * The available shape types.\n */\nvar SHAPE_TYPES = {\n  /** SPHERE */\n  SPHERE: 1,\n  /** PLANE */\n  PLANE: 2,\n  /** BOX */\n  BOX: 4,\n  /** COMPOUND */\n  COMPOUND: 8,\n  /** CONVEXPOLYHEDRON */\n  CONVEXPOLYHEDRON: 16,\n  /** HEIGHTFIELD */\n  HEIGHTFIELD: 32,\n  /** PARTICLE */\n  PARTICLE: 64,\n  /** CYLINDER */\n  CYLINDER: 128,\n  /** TRIMESH */\n  TRIMESH: 256\n};\n/**\n * ShapeType\n */\n\n/**\n * Base class for shapes\n */\nvar Shape = /*#__PURE__*/function () {\n  /**\n   * Identifier of the Shape.\n   */\n\n  /**\n   * The type of this shape. Must be set to an int > 0 by subclasses.\n   */\n\n  /**\n   * The local bounding sphere radius of this shape.\n   */\n\n  /**\n   * Whether to produce contact forces when in contact with other bodies. Note that contacts will be generated, but they will be disabled.\n   * @default true\n   */\n\n  /**\n   * @default 1\n   */\n\n  /**\n   * @default -1\n   */\n\n  /**\n   * Optional material of the shape that regulates contact properties.\n   */\n\n  /**\n   * The body to which the shape is added to.\n   */\n\n  /**\n   * All the Shape types.\n   */\n  function Shape(options) {\n    _classCallCheck(this, Shape);\n    if (options === void 0) {\n      options = {};\n    }\n    this.id = Shape.idCounter++;\n    this.type = options.type || 0;\n    this.boundingSphereRadius = 0;\n    this.collisionResponse = options.collisionResponse ? options.collisionResponse : true;\n    this.collisionFilterGroup = options.collisionFilterGroup !== undefined ? options.collisionFilterGroup : 1;\n    this.collisionFilterMask = options.collisionFilterMask !== undefined ? options.collisionFilterMask : -1;\n    this.material = options.material ? options.material : null;\n    this.body = null;\n  }\n  /**\n   * Computes the bounding sphere radius.\n   * The result is stored in the property `.boundingSphereRadius`\n   */\n  _createClass(Shape, [{\n    key: \"updateBoundingSphereRadius\",\n    value: function updateBoundingSphereRadius() {\n      throw \"computeBoundingSphereRadius() not implemented for shape type \".concat(this.type);\n    }\n    /**\n     * Get the volume of this shape\n     */\n  }, {\n    key: \"volume\",\n    value: function volume() {\n      throw \"volume() not implemented for shape type \".concat(this.type);\n    }\n    /**\n     * Calculates the inertia in the local frame for this shape.\n     * @see http://en.wikipedia.org/wiki/List_of_moments_of_inertia\n     */\n  }, {\n    key: \"calculateLocalInertia\",\n    value: function calculateLocalInertia(mass, target) {\n      throw \"calculateLocalInertia() not implemented for shape type \".concat(this.type);\n    }\n    /**\n     * @todo use abstract for these kind of methods\n     */\n  }, {\n    key: \"calculateWorldAABB\",\n    value: function calculateWorldAABB(pos, quat, min, max) {\n      throw \"calculateWorldAABB() not implemented for shape type \".concat(this.type);\n    }\n  }]);\n  return Shape;\n}();\nShape.idCounter = 0;\nShape.types = SHAPE_TYPES;\n\n/**\n * Transformation utilities.\n */\nvar Transform = /*#__PURE__*/function () {\n  /**\n   * position\n   */\n\n  /**\n   * quaternion\n   */\n  function Transform(options) {\n    _classCallCheck(this, Transform);\n    if (options === void 0) {\n      options = {};\n    }\n    this.position = new Vec3();\n    this.quaternion = new Quaternion();\n    if (options.position) {\n      this.position.copy(options.position);\n    }\n    if (options.quaternion) {\n      this.quaternion.copy(options.quaternion);\n    }\n  }\n  /**\n   * Get a global point in local transform coordinates.\n   */\n  _createClass(Transform, [{\n    key: \"pointToLocal\",\n    value: function pointToLocal(worldPoint, result) {\n      return Transform.pointToLocalFrame(this.position, this.quaternion, worldPoint, result);\n    }\n    /**\n     * Get a local point in global transform coordinates.\n     */\n  }, {\n    key: \"pointToWorld\",\n    value: function pointToWorld(localPoint, result) {\n      return Transform.pointToWorldFrame(this.position, this.quaternion, localPoint, result);\n    }\n    /**\n     * vectorToWorldFrame\n     */\n  }, {\n    key: \"vectorToWorldFrame\",\n    value: function vectorToWorldFrame(localVector, result) {\n      if (result === void 0) {\n        result = new Vec3();\n      }\n      this.quaternion.vmult(localVector, result);\n      return result;\n    }\n    /**\n     * pointToLocalFrame\n     */\n  }], [{\n    key: \"pointToLocalFrame\",\n    value: function pointToLocalFrame(position, quaternion, worldPoint, result) {\n      if (result === void 0) {\n        result = new Vec3();\n      }\n      worldPoint.vsub(position, result);\n      quaternion.conjugate(tmpQuat$1);\n      tmpQuat$1.vmult(result, result);\n      return result;\n    }\n    /**\n     * pointToWorldFrame\n     */\n  }, {\n    key: \"pointToWorldFrame\",\n    value: function pointToWorldFrame(position, quaternion, localPoint, result) {\n      if (result === void 0) {\n        result = new Vec3();\n      }\n      quaternion.vmult(localPoint, result);\n      result.vadd(position, result);\n      return result;\n    }\n    /**\n     * vectorToWorldFrame\n     */\n  }, {\n    key: \"vectorToWorldFrame\",\n    value: function vectorToWorldFrame(quaternion, localVector, result) {\n      if (result === void 0) {\n        result = new Vec3();\n      }\n      quaternion.vmult(localVector, result);\n      return result;\n    }\n    /**\n     * vectorToLocalFrame\n     */\n  }, {\n    key: \"vectorToLocalFrame\",\n    value: function vectorToLocalFrame(position, quaternion, worldVector, result) {\n      if (result === void 0) {\n        result = new Vec3();\n      }\n      quaternion.w *= -1;\n      quaternion.vmult(worldVector, result);\n      quaternion.w *= -1;\n      return result;\n    }\n  }]);\n  return Transform;\n}();\nvar tmpQuat$1 = new Quaternion();\n\n/**\n * A set of polygons describing a convex shape.\n *\n * The shape MUST be convex for the code to work properly. No polygons may be coplanar (contained\n * in the same 3D plane), instead these should be merged into one polygon.\n *\n * @author qiao / https://github.com/qiao (original author, see https://github.com/qiao/three.js/commit/85026f0c769e4000148a67d45a9e9b9c5108836f)\n * @author schteppe / https://github.com/schteppe\n * @see https://www.altdevblogaday.com/2011/05/13/contact-generation-between-3d-convex-meshes/\n *\n * @todo Move the clipping functions to ContactGenerator?\n * @todo Automatically merge coplanar polygons in constructor.\n * @example\n *     const convexShape = new CANNON.ConvexPolyhedron({ vertices, faces })\n *     const convexBody = new CANNON.Body({ mass: 1, shape: convexShape })\n *     world.addBody(convexBody)\n */\nvar ConvexPolyhedron = /*#__PURE__*/function (_Shape) {\n  _inherits(ConvexPolyhedron, _Shape);\n  var _super = _createSuper(ConvexPolyhedron);\n  /** vertices */\n\n  /**\n   * Array of integer arrays, indicating which vertices each face consists of\n   */\n\n  /** faceNormals */\n\n  /** worldVertices */\n\n  /** worldVerticesNeedsUpdate */\n\n  /** worldFaceNormals */\n\n  /** worldFaceNormalsNeedsUpdate */\n\n  /**\n   * If given, these locally defined, normalized axes are the only ones being checked when doing separating axis check.\n   */\n\n  /** uniqueEdges */\n\n  /**\n   * @param vertices An array of Vec3's\n   * @param faces Array of integer arrays, describing which vertices that is included in each face.\n   */\n  function ConvexPolyhedron(props) {\n    var _this;\n    _classCallCheck(this, ConvexPolyhedron);\n    if (props === void 0) {\n      props = {};\n    }\n    var _props = props,\n      _props$vertices = _props.vertices,\n      vertices = _props$vertices === void 0 ? [] : _props$vertices,\n      _props$faces = _props.faces,\n      faces = _props$faces === void 0 ? [] : _props$faces,\n      _props$normals = _props.normals,\n      normals = _props$normals === void 0 ? [] : _props$normals,\n      axes = _props.axes,\n      boundingSphereRadius = _props.boundingSphereRadius;\n    _this = _super.call(this, {\n      type: Shape.types.CONVEXPOLYHEDRON\n    });\n    _this.vertices = vertices;\n    _this.faces = faces;\n    _this.faceNormals = normals;\n    if (_this.faceNormals.length === 0) {\n      _this.computeNormals();\n    }\n    if (!boundingSphereRadius) {\n      _this.updateBoundingSphereRadius();\n    } else {\n      _this.boundingSphereRadius = boundingSphereRadius;\n    }\n    _this.worldVertices = []; // World transformed version of .vertices\n\n    _this.worldVerticesNeedsUpdate = true;\n    _this.worldFaceNormals = []; // World transformed version of .faceNormals\n\n    _this.worldFaceNormalsNeedsUpdate = true;\n    _this.uniqueAxes = axes ? axes.slice() : null;\n    _this.uniqueEdges = [];\n    _this.computeEdges();\n    return _this;\n  }\n  /**\n   * Computes uniqueEdges\n   */\n  _createClass(ConvexPolyhedron, [{\n    key: \"computeEdges\",\n    value: function computeEdges() {\n      var faces = this.faces;\n      var vertices = this.vertices;\n      var edges = this.uniqueEdges;\n      edges.length = 0;\n      var edge = new Vec3();\n      for (var i = 0; i !== faces.length; i++) {\n        var face = faces[i];\n        var numVertices = face.length;\n        for (var j = 0; j !== numVertices; j++) {\n          var k = (j + 1) % numVertices;\n          vertices[face[j]].vsub(vertices[face[k]], edge);\n          edge.normalize();\n          var found = false;\n          for (var p = 0; p !== edges.length; p++) {\n            if (edges[p].almostEquals(edge) || edges[p].almostEquals(edge)) {\n              found = true;\n              break;\n            }\n          }\n          if (!found) {\n            edges.push(edge.clone());\n          }\n        }\n      }\n    }\n    /**\n     * Compute the normals of the faces.\n     * Will reuse existing Vec3 objects in the `faceNormals` array if they exist.\n     */\n  }, {\n    key: \"computeNormals\",\n    value: function computeNormals() {\n      this.faceNormals.length = this.faces.length; // Generate normals\n\n      for (var i = 0; i < this.faces.length; i++) {\n        // Check so all vertices exists for this face\n        for (var j = 0; j < this.faces[i].length; j++) {\n          if (!this.vertices[this.faces[i][j]]) {\n            throw new Error(\"Vertex \".concat(this.faces[i][j], \" not found!\"));\n          }\n        }\n        var n = this.faceNormals[i] || new Vec3();\n        this.getFaceNormal(i, n);\n        n.negate(n);\n        this.faceNormals[i] = n;\n        var vertex = this.vertices[this.faces[i][0]];\n        if (n.dot(vertex) < 0) {\n          console.error(\".faceNormals[\".concat(i, \"] = Vec3(\").concat(n.toString(), \") looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.\"));\n          for (var _j = 0; _j < this.faces[i].length; _j++) {\n            console.warn(\".vertices[\".concat(this.faces[i][_j], \"] = Vec3(\").concat(this.vertices[this.faces[i][_j]].toString(), \")\"));\n          }\n        }\n      }\n    }\n    /**\n     * Compute the normal of a face from its vertices\n     */\n  }, {\n    key: \"getFaceNormal\",\n    value: function getFaceNormal(i, target) {\n      var f = this.faces[i];\n      var va = this.vertices[f[0]];\n      var vb = this.vertices[f[1]];\n      var vc = this.vertices[f[2]];\n      ConvexPolyhedron.computeNormal(va, vb, vc, target);\n    }\n    /**\n     * Get face normal given 3 vertices\n     */\n  }, {\n    key: \"clipAgainstHull\",\n    value:\n    /**\n     * @param minDist Clamp distance\n     * @param result The an array of contact point objects, see clipFaceAgainstHull\n     */\n\n    function clipAgainstHull(posA, quatA, hullB, posB, quatB, separatingNormal, minDist, maxDist, result) {\n      var WorldNormal = new Vec3();\n      var closestFaceB = -1;\n      var dmax = -Number.MAX_VALUE;\n      for (var face = 0; face < hullB.faces.length; face++) {\n        WorldNormal.copy(hullB.faceNormals[face]);\n        quatB.vmult(WorldNormal, WorldNormal);\n        var d = WorldNormal.dot(separatingNormal);\n        if (d > dmax) {\n          dmax = d;\n          closestFaceB = face;\n        }\n      }\n      var worldVertsB1 = [];\n      for (var i = 0; i < hullB.faces[closestFaceB].length; i++) {\n        var _b = hullB.vertices[hullB.faces[closestFaceB][i]];\n        var worldb = new Vec3();\n        worldb.copy(_b);\n        quatB.vmult(worldb, worldb);\n        posB.vadd(worldb, worldb);\n        worldVertsB1.push(worldb);\n      }\n      if (closestFaceB >= 0) {\n        this.clipFaceAgainstHull(separatingNormal, posA, quatA, worldVertsB1, minDist, maxDist, result);\n      }\n    }\n    /**\n     * Find the separating axis between this hull and another\n     * @param target The target vector to save the axis in\n     * @return Returns false if a separation is found, else true\n     */\n  }, {\n    key: \"findSeparatingAxis\",\n    value: function findSeparatingAxis(hullB, posA, quatA, posB, quatB, target, faceListA, faceListB) {\n      var faceANormalWS3 = new Vec3();\n      var Worldnormal1 = new Vec3();\n      var deltaC = new Vec3();\n      var worldEdge0 = new Vec3();\n      var worldEdge1 = new Vec3();\n      var Cross = new Vec3();\n      var dmin = Number.MAX_VALUE;\n      var hullA = this;\n      if (!hullA.uniqueAxes) {\n        var numFacesA = faceListA ? faceListA.length : hullA.faces.length; // Test face normals from hullA\n\n        for (var i = 0; i < numFacesA; i++) {\n          var fi = faceListA ? faceListA[i] : i; // Get world face normal\n\n          faceANormalWS3.copy(hullA.faceNormals[fi]);\n          quatA.vmult(faceANormalWS3, faceANormalWS3);\n          var d = hullA.testSepAxis(faceANormalWS3, hullB, posA, quatA, posB, quatB);\n          if (d === false) {\n            return false;\n          }\n          if (d < dmin) {\n            dmin = d;\n            target.copy(faceANormalWS3);\n          }\n        }\n      } else {\n        // Test unique axes\n        for (var _i = 0; _i !== hullA.uniqueAxes.length; _i++) {\n          // Get world axis\n          quatA.vmult(hullA.uniqueAxes[_i], faceANormalWS3);\n          var _d = hullA.testSepAxis(faceANormalWS3, hullB, posA, quatA, posB, quatB);\n          if (_d === false) {\n            return false;\n          }\n          if (_d < dmin) {\n            dmin = _d;\n            target.copy(faceANormalWS3);\n          }\n        }\n      }\n      if (!hullB.uniqueAxes) {\n        // Test face normals from hullB\n        var numFacesB = faceListB ? faceListB.length : hullB.faces.length;\n        for (var _i2 = 0; _i2 < numFacesB; _i2++) {\n          var _fi = faceListB ? faceListB[_i2] : _i2;\n          Worldnormal1.copy(hullB.faceNormals[_fi]);\n          quatB.vmult(Worldnormal1, Worldnormal1);\n          var _d2 = hullA.testSepAxis(Worldnormal1, hullB, posA, quatA, posB, quatB);\n          if (_d2 === false) {\n            return false;\n          }\n          if (_d2 < dmin) {\n            dmin = _d2;\n            target.copy(Worldnormal1);\n          }\n        }\n      } else {\n        // Test unique axes in B\n        for (var _i3 = 0; _i3 !== hullB.uniqueAxes.length; _i3++) {\n          quatB.vmult(hullB.uniqueAxes[_i3], Worldnormal1);\n          var _d3 = hullA.testSepAxis(Worldnormal1, hullB, posA, quatA, posB, quatB);\n          if (_d3 === false) {\n            return false;\n          }\n          if (_d3 < dmin) {\n            dmin = _d3;\n            target.copy(Worldnormal1);\n          }\n        }\n      } // Test edges\n\n      for (var e0 = 0; e0 !== hullA.uniqueEdges.length; e0++) {\n        // Get world edge\n        quatA.vmult(hullA.uniqueEdges[e0], worldEdge0);\n        for (var e1 = 0; e1 !== hullB.uniqueEdges.length; e1++) {\n          // Get world edge 2\n          quatB.vmult(hullB.uniqueEdges[e1], worldEdge1);\n          worldEdge0.cross(worldEdge1, Cross);\n          if (!Cross.almostZero()) {\n            Cross.normalize();\n            var dist = hullA.testSepAxis(Cross, hullB, posA, quatA, posB, quatB);\n            if (dist === false) {\n              return false;\n            }\n            if (dist < dmin) {\n              dmin = dist;\n              target.copy(Cross);\n            }\n          }\n        }\n      }\n      posB.vsub(posA, deltaC);\n      if (deltaC.dot(target) > 0.0) {\n        target.negate(target);\n      }\n      return true;\n    }\n    /**\n     * Test separating axis against two hulls. Both hulls are projected onto the axis and the overlap size is returned if there is one.\n     * @return The overlap depth, or FALSE if no penetration.\n     */\n  }, {\n    key: \"testSepAxis\",\n    value: function testSepAxis(axis, hullB, posA, quatA, posB, quatB) {\n      var hullA = this;\n      ConvexPolyhedron.project(hullA, axis, posA, quatA, maxminA);\n      ConvexPolyhedron.project(hullB, axis, posB, quatB, maxminB);\n      var maxA = maxminA[0];\n      var minA = maxminA[1];\n      var maxB = maxminB[0];\n      var minB = maxminB[1];\n      if (maxA < minB || maxB < minA) {\n        return false; // Separated\n      }\n\n      var d0 = maxA - minB;\n      var d1 = maxB - minA;\n      var depth = d0 < d1 ? d0 : d1;\n      return depth;\n    }\n    /**\n     * calculateLocalInertia\n     */\n  }, {\n    key: \"calculateLocalInertia\",\n    value: function calculateLocalInertia(mass, target) {\n      // Approximate with box inertia\n      // Exact inertia calculation is overkill, but see http://geometrictools.com/Documentation/PolyhedralMassProperties.pdf for the correct way to do it\n      var aabbmax = new Vec3();\n      var aabbmin = new Vec3();\n      this.computeLocalAABB(aabbmin, aabbmax);\n      var x = aabbmax.x - aabbmin.x;\n      var y = aabbmax.y - aabbmin.y;\n      var z = aabbmax.z - aabbmin.z;\n      target.x = 1.0 / 12.0 * mass * (2 * y * 2 * y + 2 * z * 2 * z);\n      target.y = 1.0 / 12.0 * mass * (2 * x * 2 * x + 2 * z * 2 * z);\n      target.z = 1.0 / 12.0 * mass * (2 * y * 2 * y + 2 * x * 2 * x);\n    }\n    /**\n     * @param face_i Index of the face\n     */\n  }, {\n    key: \"getPlaneConstantOfFace\",\n    value: function getPlaneConstantOfFace(face_i) {\n      var f = this.faces[face_i];\n      var n = this.faceNormals[face_i];\n      var v = this.vertices[f[0]];\n      var c = -n.dot(v);\n      return c;\n    }\n    /**\n     * Clip a face against a hull.\n     * @param worldVertsB1 An array of Vec3 with vertices in the world frame.\n     * @param minDist Distance clamping\n     * @param Array result Array to store resulting contact points in. Will be objects with properties: point, depth, normal. These are represented in world coordinates.\n     */\n  }, {\n    key: \"clipFaceAgainstHull\",\n    value: function clipFaceAgainstHull(separatingNormal, posA, quatA, worldVertsB1, minDist, maxDist, result) {\n      var faceANormalWS = new Vec3();\n      var edge0 = new Vec3();\n      var WorldEdge0 = new Vec3();\n      var worldPlaneAnormal1 = new Vec3();\n      var planeNormalWS1 = new Vec3();\n      var worldA1 = new Vec3();\n      var localPlaneNormal = new Vec3();\n      var planeNormalWS = new Vec3();\n      var hullA = this;\n      var worldVertsB2 = [];\n      var pVtxIn = worldVertsB1;\n      var pVtxOut = worldVertsB2;\n      var closestFaceA = -1;\n      var dmin = Number.MAX_VALUE; // Find the face with normal closest to the separating axis\n\n      for (var face = 0; face < hullA.faces.length; face++) {\n        faceANormalWS.copy(hullA.faceNormals[face]);\n        quatA.vmult(faceANormalWS, faceANormalWS);\n        var d = faceANormalWS.dot(separatingNormal);\n        if (d < dmin) {\n          dmin = d;\n          closestFaceA = face;\n        }\n      }\n      if (closestFaceA < 0) {\n        return;\n      } // Get the face and construct connected faces\n\n      var polyA = hullA.faces[closestFaceA];\n      polyA.connectedFaces = [];\n      for (var i = 0; i < hullA.faces.length; i++) {\n        for (var j = 0; j < hullA.faces[i].length; j++) {\n          if ( /* Sharing a vertex*/\n          polyA.indexOf(hullA.faces[i][j]) !== -1 && /* Not the one we are looking for connections from */\n          i !== closestFaceA && /* Not already added */\n          polyA.connectedFaces.indexOf(i) === -1) {\n            polyA.connectedFaces.push(i);\n          }\n        }\n      } // Clip the polygon to the back of the planes of all faces of hull A,\n      // that are adjacent to the witness face\n\n      var numVerticesA = polyA.length;\n      for (var _i4 = 0; _i4 < numVerticesA; _i4++) {\n        var _a2 = hullA.vertices[polyA[_i4]];\n        var _b2 = hullA.vertices[polyA[(_i4 + 1) % numVerticesA]];\n        _a2.vsub(_b2, edge0);\n        WorldEdge0.copy(edge0);\n        quatA.vmult(WorldEdge0, WorldEdge0);\n        posA.vadd(WorldEdge0, WorldEdge0);\n        worldPlaneAnormal1.copy(this.faceNormals[closestFaceA]);\n        quatA.vmult(worldPlaneAnormal1, worldPlaneAnormal1);\n        posA.vadd(worldPlaneAnormal1, worldPlaneAnormal1);\n        WorldEdge0.cross(worldPlaneAnormal1, planeNormalWS1);\n        planeNormalWS1.negate(planeNormalWS1);\n        worldA1.copy(_a2);\n        quatA.vmult(worldA1, worldA1);\n        posA.vadd(worldA1, worldA1);\n        var otherFace = polyA.connectedFaces[_i4];\n        localPlaneNormal.copy(this.faceNormals[otherFace]);\n        var _localPlaneEq = this.getPlaneConstantOfFace(otherFace);\n        planeNormalWS.copy(localPlaneNormal);\n        quatA.vmult(planeNormalWS, planeNormalWS);\n        var _planeEqWS = _localPlaneEq - planeNormalWS.dot(posA); // Clip face against our constructed plane\n\n        this.clipFaceAgainstPlane(pVtxIn, pVtxOut, planeNormalWS, _planeEqWS); // Throw away all clipped points, but save the remaining until next clip\n\n        while (pVtxIn.length) {\n          pVtxIn.shift();\n        }\n        while (pVtxOut.length) {\n          pVtxIn.push(pVtxOut.shift());\n        }\n      } // only keep contact points that are behind the witness face\n\n      localPlaneNormal.copy(this.faceNormals[closestFaceA]);\n      var localPlaneEq = this.getPlaneConstantOfFace(closestFaceA);\n      planeNormalWS.copy(localPlaneNormal);\n      quatA.vmult(planeNormalWS, planeNormalWS);\n      var planeEqWS = localPlaneEq - planeNormalWS.dot(posA);\n      for (var _i5 = 0; _i5 < pVtxIn.length; _i5++) {\n        var depth = planeNormalWS.dot(pVtxIn[_i5]) + planeEqWS; // ???\n\n        if (depth <= minDist) {\n          console.log(\"clamped: depth=\".concat(depth, \" to minDist=\").concat(minDist));\n          depth = minDist;\n        }\n        if (depth <= maxDist) {\n          var point = pVtxIn[_i5];\n          if (depth <= 1e-6) {\n            var p = {\n              point: point,\n              normal: planeNormalWS,\n              depth: depth\n            };\n            result.push(p);\n          }\n        }\n      }\n    }\n    /**\n     * Clip a face in a hull against the back of a plane.\n     * @param planeConstant The constant in the mathematical plane equation\n     */\n  }, {\n    key: \"clipFaceAgainstPlane\",\n    value: function clipFaceAgainstPlane(inVertices, outVertices, planeNormal, planeConstant) {\n      var n_dot_first;\n      var n_dot_last;\n      var numVerts = inVertices.length;\n      if (numVerts < 2) {\n        return outVertices;\n      }\n      var firstVertex = inVertices[inVertices.length - 1];\n      var lastVertex = inVertices[0];\n      n_dot_first = planeNormal.dot(firstVertex) + planeConstant;\n      for (var vi = 0; vi < numVerts; vi++) {\n        lastVertex = inVertices[vi];\n        n_dot_last = planeNormal.dot(lastVertex) + planeConstant;\n        if (n_dot_first < 0) {\n          if (n_dot_last < 0) {\n            // Start < 0, end < 0, so output lastVertex\n            var newv = new Vec3();\n            newv.copy(lastVertex);\n            outVertices.push(newv);\n          } else {\n            // Start < 0, end >= 0, so output intersection\n            var _newv = new Vec3();\n            firstVertex.lerp(lastVertex, n_dot_first / (n_dot_first - n_dot_last), _newv);\n            outVertices.push(_newv);\n          }\n        } else {\n          if (n_dot_last < 0) {\n            // Start >= 0, end < 0 so output intersection and end\n            var _newv2 = new Vec3();\n            firstVertex.lerp(lastVertex, n_dot_first / (n_dot_first - n_dot_last), _newv2);\n            outVertices.push(_newv2);\n            outVertices.push(lastVertex);\n          }\n        }\n        firstVertex = lastVertex;\n        n_dot_first = n_dot_last;\n      }\n      return outVertices;\n    }\n    /**\n     * Updates `.worldVertices` and sets `.worldVerticesNeedsUpdate` to false.\n     */\n  }, {\n    key: \"computeWorldVertices\",\n    value: function computeWorldVertices(position, quat) {\n      while (this.worldVertices.length < this.vertices.length) {\n        this.worldVertices.push(new Vec3());\n      }\n      var verts = this.vertices;\n      var worldVerts = this.worldVertices;\n      for (var i = 0; i !== this.vertices.length; i++) {\n        quat.vmult(verts[i], worldVerts[i]);\n        position.vadd(worldVerts[i], worldVerts[i]);\n      }\n      this.worldVerticesNeedsUpdate = false;\n    }\n  }, {\n    key: \"computeLocalAABB\",\n    value: function computeLocalAABB(aabbmin, aabbmax) {\n      var vertices = this.vertices;\n      aabbmin.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n      aabbmax.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n      for (var i = 0; i < this.vertices.length; i++) {\n        var v = vertices[i];\n        if (v.x < aabbmin.x) {\n          aabbmin.x = v.x;\n        } else if (v.x > aabbmax.x) {\n          aabbmax.x = v.x;\n        }\n        if (v.y < aabbmin.y) {\n          aabbmin.y = v.y;\n        } else if (v.y > aabbmax.y) {\n          aabbmax.y = v.y;\n        }\n        if (v.z < aabbmin.z) {\n          aabbmin.z = v.z;\n        } else if (v.z > aabbmax.z) {\n          aabbmax.z = v.z;\n        }\n      }\n    }\n    /**\n     * Updates `worldVertices` and sets `worldVerticesNeedsUpdate` to false.\n     */\n  }, {\n    key: \"computeWorldFaceNormals\",\n    value: function computeWorldFaceNormals(quat) {\n      var N = this.faceNormals.length;\n      while (this.worldFaceNormals.length < N) {\n        this.worldFaceNormals.push(new Vec3());\n      }\n      var normals = this.faceNormals;\n      var worldNormals = this.worldFaceNormals;\n      for (var i = 0; i !== N; i++) {\n        quat.vmult(normals[i], worldNormals[i]);\n      }\n      this.worldFaceNormalsNeedsUpdate = false;\n    }\n    /**\n     * updateBoundingSphereRadius\n     */\n  }, {\n    key: \"updateBoundingSphereRadius\",\n    value: function updateBoundingSphereRadius() {\n      // Assume points are distributed with local (0,0,0) as center\n      var max2 = 0;\n      var verts = this.vertices;\n      for (var i = 0; i !== verts.length; i++) {\n        var norm2 = verts[i].lengthSquared();\n        if (norm2 > max2) {\n          max2 = norm2;\n        }\n      }\n      this.boundingSphereRadius = Math.sqrt(max2);\n    }\n    /**\n     * calculateWorldAABB\n     */\n  }, {\n    key: \"calculateWorldAABB\",\n    value: function calculateWorldAABB(pos, quat, min, max) {\n      var verts = this.vertices;\n      var minx;\n      var miny;\n      var minz;\n      var maxx;\n      var maxy;\n      var maxz;\n      var tempWorldVertex = new Vec3();\n      for (var i = 0; i < verts.length; i++) {\n        tempWorldVertex.copy(verts[i]);\n        quat.vmult(tempWorldVertex, tempWorldVertex);\n        pos.vadd(tempWorldVertex, tempWorldVertex);\n        var v = tempWorldVertex;\n        if (minx === undefined || v.x < minx) {\n          minx = v.x;\n        }\n        if (maxx === undefined || v.x > maxx) {\n          maxx = v.x;\n        }\n        if (miny === undefined || v.y < miny) {\n          miny = v.y;\n        }\n        if (maxy === undefined || v.y > maxy) {\n          maxy = v.y;\n        }\n        if (minz === undefined || v.z < minz) {\n          minz = v.z;\n        }\n        if (maxz === undefined || v.z > maxz) {\n          maxz = v.z;\n        }\n      }\n      min.set(minx, miny, minz);\n      max.set(maxx, maxy, maxz);\n    }\n    /**\n     * Get approximate convex volume\n     */\n  }, {\n    key: \"volume\",\n    value: function volume() {\n      return 4.0 * Math.PI * this.boundingSphereRadius / 3.0;\n    }\n    /**\n     * Get an average of all the vertices positions\n     */\n  }, {\n    key: \"getAveragePointLocal\",\n    value: function getAveragePointLocal(target) {\n      if (target === void 0) {\n        target = new Vec3();\n      }\n      var verts = this.vertices;\n      for (var i = 0; i < verts.length; i++) {\n        target.vadd(verts[i], target);\n      }\n      target.scale(1 / verts.length, target);\n      return target;\n    }\n    /**\n     * Transform all local points. Will change the .vertices\n     */\n  }, {\n    key: \"transformAllPoints\",\n    value: function transformAllPoints(offset, quat) {\n      var n = this.vertices.length;\n      var verts = this.vertices; // Apply rotation\n\n      if (quat) {\n        // Rotate vertices\n        for (var i = 0; i < n; i++) {\n          var v = verts[i];\n          quat.vmult(v, v);\n        } // Rotate face normals\n\n        for (var _i6 = 0; _i6 < this.faceNormals.length; _i6++) {\n          var _v = this.faceNormals[_i6];\n          quat.vmult(_v, _v);\n        }\n        /*\n              // Rotate edges\n              for(let i=0; i<this.uniqueEdges.length; i++){\n                  const v = this.uniqueEdges[i];\n                  quat.vmult(v,v);\n              }*/\n      } // Apply offset\n\n      if (offset) {\n        for (var _i7 = 0; _i7 < n; _i7++) {\n          var _v2 = verts[_i7];\n          _v2.vadd(offset, _v2);\n        }\n      }\n    }\n    /**\n     * Checks whether p is inside the polyhedra. Must be in local coords.\n     * The point lies outside of the convex hull of the other points if and only if the direction\n     * of all the vectors from it to those other points are on less than one half of a sphere around it.\n     * @param p A point given in local coordinates\n     */\n  }, {\n    key: \"pointIsInside\",\n    value: function pointIsInside(p) {\n      var verts = this.vertices;\n      var faces = this.faces;\n      var normals = this.faceNormals;\n      var positiveResult = null;\n      var pointInside = new Vec3();\n      this.getAveragePointLocal(pointInside);\n      for (var i = 0; i < this.faces.length; i++) {\n        var n = normals[i];\n        var v = verts[faces[i][0]]; // We only need one point in the face\n        // This dot product determines which side of the edge the point is\n\n        var vToP = new Vec3();\n        p.vsub(v, vToP);\n        var r1 = n.dot(vToP);\n        var vToPointInside = new Vec3();\n        pointInside.vsub(v, vToPointInside);\n        var r2 = n.dot(vToPointInside);\n        if (r1 < 0 && r2 > 0 || r1 > 0 && r2 < 0) {\n          return false; // Encountered some other sign. Exit.\n        }\n      } // If we got here, all dot products were of the same sign.\n\n      return positiveResult ? 1 : -1;\n    }\n    /**\n     * Get max and min dot product of a convex hull at position (pos,quat) projected onto an axis.\n     * Results are saved in the array maxmin.\n     * @param result result[0] and result[1] will be set to maximum and minimum, respectively.\n     */\n  }], [{\n    key: \"computeNormal\",\n    value: function computeNormal(va, vb, vc, target) {\n      var cb = new Vec3();\n      var ab = new Vec3();\n      vb.vsub(va, ab);\n      vc.vsub(vb, cb);\n      cb.cross(ab, target);\n      if (!target.isZero()) {\n        target.normalize();\n      }\n    }\n  }, {\n    key: \"project\",\n    value: function project(shape, axis, pos, quat, result) {\n      var n = shape.vertices.length;\n      project_worldVertex;\n      var localAxis = project_localAxis;\n      var max = 0;\n      var min = 0;\n      var localOrigin = project_localOrigin;\n      var vs = shape.vertices;\n      localOrigin.setZero(); // Transform the axis to local\n\n      Transform.vectorToLocalFrame(pos, quat, axis, localAxis);\n      Transform.pointToLocalFrame(pos, quat, localOrigin, localOrigin);\n      var add = localOrigin.dot(localAxis);\n      min = max = vs[0].dot(localAxis);\n      for (var i = 1; i < n; i++) {\n        var val = vs[i].dot(localAxis);\n        if (val > max) {\n          max = val;\n        }\n        if (val < min) {\n          min = val;\n        }\n      }\n      min -= add;\n      max -= add;\n      if (min > max) {\n        // Inconsistent - swap\n        var temp = min;\n        min = max;\n        max = temp;\n      } // Output\n\n      result[0] = max;\n      result[1] = min;\n    }\n  }]);\n  return ConvexPolyhedron;\n}(Shape);\nvar maxminA = [];\nvar maxminB = [];\nvar project_worldVertex = new Vec3();\nvar project_localAxis = new Vec3();\nvar project_localOrigin = new Vec3();\n\n/**\n * A 3d box shape.\n * @example\n *     const size = 1\n *     const halfExtents = new CANNON.Vec3(size, size, size)\n *     const boxShape = new CANNON.Box(halfExtents)\n *     const boxBody = new CANNON.Body({ mass: 1, shape: boxShape })\n *     world.addBody(boxBody)\n */\nvar Box = /*#__PURE__*/function (_Shape2) {\n  _inherits(Box, _Shape2);\n  var _super2 = _createSuper(Box);\n  /**\n   * The half extents of the box.\n   */\n\n  /**\n   * Used by the contact generator to make contacts with other convex polyhedra for example.\n   */\n  function Box(halfExtents) {\n    var _this2;\n    _classCallCheck(this, Box);\n    _this2 = _super2.call(this, {\n      type: Shape.types.BOX\n    });\n    _this2.halfExtents = halfExtents;\n    _this2.convexPolyhedronRepresentation = null;\n    _this2.updateConvexPolyhedronRepresentation();\n    _this2.updateBoundingSphereRadius();\n    return _this2;\n  }\n  /**\n   * Updates the local convex polyhedron representation used for some collisions.\n   */\n  _createClass(Box, [{\n    key: \"updateConvexPolyhedronRepresentation\",\n    value: function updateConvexPolyhedronRepresentation() {\n      var sx = this.halfExtents.x;\n      var sy = this.halfExtents.y;\n      var sz = this.halfExtents.z;\n      var V = Vec3;\n      var vertices = [new V(-sx, -sy, -sz), new V(sx, -sy, -sz), new V(sx, sy, -sz), new V(-sx, sy, -sz), new V(-sx, -sy, sz), new V(sx, -sy, sz), new V(sx, sy, sz), new V(-sx, sy, sz)];\n      var faces = [[3, 2, 1, 0],\n      // -z\n      [4, 5, 6, 7],\n      // +z\n      [5, 4, 0, 1],\n      // -y\n      [2, 3, 7, 6],\n      // +y\n      [0, 4, 7, 3],\n      // -x\n      [1, 2, 6, 5] // +x\n      ];\n\n      var axes = [new V(0, 0, 1), new V(0, 1, 0), new V(1, 0, 0)];\n      var h = new ConvexPolyhedron({\n        vertices: vertices,\n        faces: faces,\n        axes: axes\n      });\n      this.convexPolyhedronRepresentation = h;\n      h.material = this.material;\n    }\n    /**\n     * Calculate the inertia of the box.\n     */\n  }, {\n    key: \"calculateLocalInertia\",\n    value: function calculateLocalInertia(mass, target) {\n      if (target === void 0) {\n        target = new Vec3();\n      }\n      Box.calculateInertia(this.halfExtents, mass, target);\n      return target;\n    }\n  }, {\n    key: \"getSideNormals\",\n    value:\n    /**\n     * Get the box 6 side normals\n     * @param sixTargetVectors An array of 6 vectors, to store the resulting side normals in.\n     * @param quat Orientation to apply to the normal vectors. If not provided, the vectors will be in respect to the local frame.\n     */\n\n    function getSideNormals(sixTargetVectors, quat) {\n      var sides = sixTargetVectors;\n      var ex = this.halfExtents;\n      sides[0].set(ex.x, 0, 0);\n      sides[1].set(0, ex.y, 0);\n      sides[2].set(0, 0, ex.z);\n      sides[3].set(-ex.x, 0, 0);\n      sides[4].set(0, -ex.y, 0);\n      sides[5].set(0, 0, -ex.z);\n      if (quat !== undefined) {\n        for (var i = 0; i !== sides.length; i++) {\n          quat.vmult(sides[i], sides[i]);\n        }\n      }\n      return sides;\n    }\n    /**\n     * Returns the volume of the box.\n     */\n  }, {\n    key: \"volume\",\n    value: function volume() {\n      return 8.0 * this.halfExtents.x * this.halfExtents.y * this.halfExtents.z;\n    }\n    /**\n     * updateBoundingSphereRadius\n     */\n  }, {\n    key: \"updateBoundingSphereRadius\",\n    value: function updateBoundingSphereRadius() {\n      this.boundingSphereRadius = this.halfExtents.length();\n    }\n    /**\n     * forEachWorldCorner\n     */\n  }, {\n    key: \"forEachWorldCorner\",\n    value: function forEachWorldCorner(pos, quat, callback) {\n      var e = this.halfExtents;\n      var corners = [[e.x, e.y, e.z], [-e.x, e.y, e.z], [-e.x, -e.y, e.z], [-e.x, -e.y, -e.z], [e.x, -e.y, -e.z], [e.x, e.y, -e.z], [-e.x, e.y, -e.z], [e.x, -e.y, e.z]];\n      for (var i = 0; i < corners.length; i++) {\n        worldCornerTempPos.set(corners[i][0], corners[i][1], corners[i][2]);\n        quat.vmult(worldCornerTempPos, worldCornerTempPos);\n        pos.vadd(worldCornerTempPos, worldCornerTempPos);\n        callback(worldCornerTempPos.x, worldCornerTempPos.y, worldCornerTempPos.z);\n      }\n    }\n    /**\n     * calculateWorldAABB\n     */\n  }, {\n    key: \"calculateWorldAABB\",\n    value: function calculateWorldAABB(pos, quat, min, max) {\n      var e = this.halfExtents;\n      worldCornersTemp[0].set(e.x, e.y, e.z);\n      worldCornersTemp[1].set(-e.x, e.y, e.z);\n      worldCornersTemp[2].set(-e.x, -e.y, e.z);\n      worldCornersTemp[3].set(-e.x, -e.y, -e.z);\n      worldCornersTemp[4].set(e.x, -e.y, -e.z);\n      worldCornersTemp[5].set(e.x, e.y, -e.z);\n      worldCornersTemp[6].set(-e.x, e.y, -e.z);\n      worldCornersTemp[7].set(e.x, -e.y, e.z);\n      var wc = worldCornersTemp[0];\n      quat.vmult(wc, wc);\n      pos.vadd(wc, wc);\n      max.copy(wc);\n      min.copy(wc);\n      for (var i = 1; i < 8; i++) {\n        var _wc = worldCornersTemp[i];\n        quat.vmult(_wc, _wc);\n        pos.vadd(_wc, _wc);\n        var x = _wc.x;\n        var y = _wc.y;\n        var z = _wc.z;\n        if (x > max.x) {\n          max.x = x;\n        }\n        if (y > max.y) {\n          max.y = y;\n        }\n        if (z > max.z) {\n          max.z = z;\n        }\n        if (x < min.x) {\n          min.x = x;\n        }\n        if (y < min.y) {\n          min.y = y;\n        }\n        if (z < min.z) {\n          min.z = z;\n        }\n      } // Get each axis max\n      // min.set(Infinity,Infinity,Infinity);\n      // max.set(-Infinity,-Infinity,-Infinity);\n      // this.forEachWorldCorner(pos,quat,function(x,y,z){\n      //     if(x > max.x){\n      //         max.x = x;\n      //     }\n      //     if(y > max.y){\n      //         max.y = y;\n      //     }\n      //     if(z > max.z){\n      //         max.z = z;\n      //     }\n      //     if(x < min.x){\n      //         min.x = x;\n      //     }\n      //     if(y < min.y){\n      //         min.y = y;\n      //     }\n      //     if(z < min.z){\n      //         min.z = z;\n      //     }\n      // });\n    }\n  }], [{\n    key: \"calculateInertia\",\n    value: function calculateInertia(halfExtents, mass, target) {\n      var e = halfExtents;\n      target.x = 1.0 / 12.0 * mass * (2 * e.y * 2 * e.y + 2 * e.z * 2 * e.z);\n      target.y = 1.0 / 12.0 * mass * (2 * e.x * 2 * e.x + 2 * e.z * 2 * e.z);\n      target.z = 1.0 / 12.0 * mass * (2 * e.y * 2 * e.y + 2 * e.x * 2 * e.x);\n    }\n  }]);\n  return Box;\n}(Shape);\nvar worldCornerTempPos = new Vec3();\nvar worldCornersTemp = [new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3()];\n\n/**\n * BODY_TYPES\n */\nvar BODY_TYPES = {\n  /** DYNAMIC */\n  DYNAMIC: 1,\n  /** STATIC */\n  STATIC: 2,\n  /** KINEMATIC */\n  KINEMATIC: 4\n};\n/**\n * BodyType\n */\n\n/**\n * BODY_SLEEP_STATES\n */\nvar BODY_SLEEP_STATES = {\n  /** AWAKE */\n  AWAKE: 0,\n  /** SLEEPY */\n  SLEEPY: 1,\n  /** SLEEPING */\n  SLEEPING: 2\n};\n/**\n * BodySleepState\n */\n\n/**\n * Base class for all body types.\n * @example\n *     const shape = new CANNON.Sphere(1)\n *     const body = new CANNON.Body({\n *       mass: 1,\n *       shape,\n *     })\n *     world.addBody(body)\n */\nvar Body = /*#__PURE__*/function (_EventTarget) {\n  _inherits(Body, _EventTarget);\n  var _super3 = _createSuper(Body);\n  /**\n   * Dispatched after two bodies collide. This event is dispatched on each\n   * of the two bodies involved in the collision.\n   * @event collide\n   * @param body The body that was involved in the collision.\n   * @param contact The details of the collision.\n   */\n\n  /**\n   * A dynamic body is fully simulated. Can be moved manually by the user, but normally they move according to forces. A dynamic body can collide with all body types. A dynamic body always has finite, non-zero mass.\n   */\n\n  /**\n   * A static body does not move during simulation and behaves as if it has infinite mass. Static bodies can be moved manually by setting the position of the body. The velocity of a static body is always zero. Static bodies do not collide with other static or kinematic bodies.\n   */\n\n  /**\n   * A kinematic body moves under simulation according to its velocity. They do not respond to forces. They can be moved manually, but normally a kinematic body is moved by setting its velocity. A kinematic body behaves as if it has infinite mass. Kinematic bodies do not collide with other static or kinematic bodies.\n   */\n\n  /**\n   * AWAKE\n   */\n\n  /**\n   * SLEEPY\n   */\n\n  /**\n   * SLEEPING\n   */\n\n  /**\n   * Dispatched after a sleeping body has woken up.\n   * @event wakeup\n   */\n\n  /**\n   * Dispatched after a body has gone in to the sleepy state.\n   * @event sleepy\n   */\n\n  /**\n   * Dispatched after a body has fallen asleep.\n   * @event sleep\n   */\n  function Body(options) {\n    var _this3;\n    _classCallCheck(this, Body);\n    if (options === void 0) {\n      options = {};\n    }\n    _this3 = _super3.call(this);\n    _this3.id = Body.idCounter++;\n    _this3.index = -1;\n    _this3.world = null;\n    _this3.vlambda = new Vec3();\n    _this3.collisionFilterGroup = typeof options.collisionFilterGroup === 'number' ? options.collisionFilterGroup : 1;\n    _this3.collisionFilterMask = typeof options.collisionFilterMask === 'number' ? options.collisionFilterMask : -1;\n    _this3.collisionResponse = typeof options.collisionResponse === 'boolean' ? options.collisionResponse : true;\n    _this3.position = new Vec3();\n    _this3.previousPosition = new Vec3();\n    _this3.interpolatedPosition = new Vec3();\n    _this3.initPosition = new Vec3();\n    if (options.position) {\n      _this3.position.copy(options.position);\n      _this3.previousPosition.copy(options.position);\n      _this3.interpolatedPosition.copy(options.position);\n      _this3.initPosition.copy(options.position);\n    }\n    _this3.velocity = new Vec3();\n    if (options.velocity) {\n      _this3.velocity.copy(options.velocity);\n    }\n    _this3.initVelocity = new Vec3();\n    _this3.force = new Vec3();\n    var mass = typeof options.mass === 'number' ? options.mass : 0;\n    _this3.mass = mass;\n    _this3.invMass = mass > 0 ? 1.0 / mass : 0;\n    _this3.material = options.material || null;\n    _this3.linearDamping = typeof options.linearDamping === 'number' ? options.linearDamping : 0.01;\n    _this3.type = mass <= 0.0 ? Body.STATIC : Body.DYNAMIC;\n    if (typeof options.type === typeof Body.STATIC) {\n      _this3.type = options.type;\n    }\n    _this3.allowSleep = typeof options.allowSleep !== 'undefined' ? options.allowSleep : true;\n    _this3.sleepState = Body.AWAKE;\n    _this3.sleepSpeedLimit = typeof options.sleepSpeedLimit !== 'undefined' ? options.sleepSpeedLimit : 0.1;\n    _this3.sleepTimeLimit = typeof options.sleepTimeLimit !== 'undefined' ? options.sleepTimeLimit : 1;\n    _this3.timeLastSleepy = 0;\n    _this3.wakeUpAfterNarrowphase = false;\n    _this3.torque = new Vec3();\n    _this3.quaternion = new Quaternion();\n    _this3.initQuaternion = new Quaternion();\n    _this3.previousQuaternion = new Quaternion();\n    _this3.interpolatedQuaternion = new Quaternion();\n    if (options.quaternion) {\n      _this3.quaternion.copy(options.quaternion);\n      _this3.initQuaternion.copy(options.quaternion);\n      _this3.previousQuaternion.copy(options.quaternion);\n      _this3.interpolatedQuaternion.copy(options.quaternion);\n    }\n    _this3.angularVelocity = new Vec3();\n    if (options.angularVelocity) {\n      _this3.angularVelocity.copy(options.angularVelocity);\n    }\n    _this3.initAngularVelocity = new Vec3();\n    _this3.shapes = [];\n    _this3.shapeOffsets = [];\n    _this3.shapeOrientations = [];\n    _this3.inertia = new Vec3();\n    _this3.invInertia = new Vec3();\n    _this3.invInertiaWorld = new Mat3();\n    _this3.invMassSolve = 0;\n    _this3.invInertiaSolve = new Vec3();\n    _this3.invInertiaWorldSolve = new Mat3();\n    _this3.fixedRotation = typeof options.fixedRotation !== 'undefined' ? options.fixedRotation : false;\n    _this3.angularDamping = typeof options.angularDamping !== 'undefined' ? options.angularDamping : 0.01;\n    _this3.linearFactor = new Vec3(1, 1, 1);\n    if (options.linearFactor) {\n      _this3.linearFactor.copy(options.linearFactor);\n    }\n    _this3.angularFactor = new Vec3(1, 1, 1);\n    if (options.angularFactor) {\n      _this3.angularFactor.copy(options.angularFactor);\n    }\n    _this3.aabb = new AABB();\n    _this3.aabbNeedsUpdate = true;\n    _this3.boundingRadius = 0;\n    _this3.wlambda = new Vec3();\n    _this3.isTrigger = Boolean(options.isTrigger);\n    if (options.shape) {\n      _this3.addShape(options.shape);\n    }\n    _this3.updateMassProperties();\n    return _this3;\n  }\n  /**\n   * Wake the body up.\n   */\n  _createClass(Body, [{\n    key: \"wakeUp\",\n    value: function wakeUp() {\n      var prevState = this.sleepState;\n      this.sleepState = Body.AWAKE;\n      this.wakeUpAfterNarrowphase = false;\n      if (prevState === Body.SLEEPING) {\n        this.dispatchEvent(Body.wakeupEvent);\n      }\n    }\n    /**\n     * Force body sleep\n     */\n  }, {\n    key: \"sleep\",\n    value: function sleep() {\n      this.sleepState = Body.SLEEPING;\n      this.velocity.set(0, 0, 0);\n      this.angularVelocity.set(0, 0, 0);\n      this.wakeUpAfterNarrowphase = false;\n    }\n    /**\n     * Called every timestep to update internal sleep timer and change sleep state if needed.\n     * @param time The world time in seconds\n     */\n  }, {\n    key: \"sleepTick\",\n    value: function sleepTick(time) {\n      if (this.allowSleep) {\n        var sleepState = this.sleepState;\n        var speedSquared = this.velocity.lengthSquared() + this.angularVelocity.lengthSquared();\n        var speedLimitSquared = Math.pow(this.sleepSpeedLimit, 2);\n        if (sleepState === Body.AWAKE && speedSquared < speedLimitSquared) {\n          this.sleepState = Body.SLEEPY; // Sleepy\n\n          this.timeLastSleepy = time;\n          this.dispatchEvent(Body.sleepyEvent);\n        } else if (sleepState === Body.SLEEPY && speedSquared > speedLimitSquared) {\n          this.wakeUp(); // Wake up\n        } else if (sleepState === Body.SLEEPY && time - this.timeLastSleepy > this.sleepTimeLimit) {\n          this.sleep(); // Sleeping\n\n          this.dispatchEvent(Body.sleepEvent);\n        }\n      }\n    }\n    /**\n     * If the body is sleeping, it should be immovable / have infinite mass during solve. We solve it by having a separate \"solve mass\".\n     */\n  }, {\n    key: \"updateSolveMassProperties\",\n    value: function updateSolveMassProperties() {\n      if (this.sleepState === Body.SLEEPING || this.type === Body.KINEMATIC) {\n        this.invMassSolve = 0;\n        this.invInertiaSolve.setZero();\n        this.invInertiaWorldSolve.setZero();\n      } else {\n        this.invMassSolve = this.invMass;\n        this.invInertiaSolve.copy(this.invInertia);\n        this.invInertiaWorldSolve.copy(this.invInertiaWorld);\n      }\n    }\n    /**\n     * Convert a world point to local body frame.\n     */\n  }, {\n    key: \"pointToLocalFrame\",\n    value: function pointToLocalFrame(worldPoint, result) {\n      if (result === void 0) {\n        result = new Vec3();\n      }\n      worldPoint.vsub(this.position, result);\n      this.quaternion.conjugate().vmult(result, result);\n      return result;\n    }\n    /**\n     * Convert a world vector to local body frame.\n     */\n  }, {\n    key: \"vectorToLocalFrame\",\n    value: function vectorToLocalFrame(worldVector, result) {\n      if (result === void 0) {\n        result = new Vec3();\n      }\n      this.quaternion.conjugate().vmult(worldVector, result);\n      return result;\n    }\n    /**\n     * Convert a local body point to world frame.\n     */\n  }, {\n    key: \"pointToWorldFrame\",\n    value: function pointToWorldFrame(localPoint, result) {\n      if (result === void 0) {\n        result = new Vec3();\n      }\n      this.quaternion.vmult(localPoint, result);\n      result.vadd(this.position, result);\n      return result;\n    }\n    /**\n     * Convert a local body point to world frame.\n     */\n  }, {\n    key: \"vectorToWorldFrame\",\n    value: function vectorToWorldFrame(localVector, result) {\n      if (result === void 0) {\n        result = new Vec3();\n      }\n      this.quaternion.vmult(localVector, result);\n      return result;\n    }\n    /**\n     * Add a shape to the body with a local offset and orientation.\n     * @return The body object, for chainability.\n     */\n  }, {\n    key: \"addShape\",\n    value: function addShape(shape, _offset, _orientation) {\n      var offset = new Vec3();\n      var orientation = new Quaternion();\n      if (_offset) {\n        offset.copy(_offset);\n      }\n      if (_orientation) {\n        orientation.copy(_orientation);\n      }\n      this.shapes.push(shape);\n      this.shapeOffsets.push(offset);\n      this.shapeOrientations.push(orientation);\n      this.updateMassProperties();\n      this.updateBoundingRadius();\n      this.aabbNeedsUpdate = true;\n      shape.body = this;\n      return this;\n    }\n    /**\n     * Remove a shape from the body.\n     * @return The body object, for chainability.\n     */\n  }, {\n    key: \"removeShape\",\n    value: function removeShape(shape) {\n      var index = this.shapes.indexOf(shape);\n      if (index === -1) {\n        console.warn('Shape does not belong to the body');\n        return this;\n      }\n      this.shapes.splice(index, 1);\n      this.shapeOffsets.splice(index, 1);\n      this.shapeOrientations.splice(index, 1);\n      this.updateMassProperties();\n      this.updateBoundingRadius();\n      this.aabbNeedsUpdate = true;\n      shape.body = null;\n      return this;\n    }\n    /**\n     * Update the bounding radius of the body. Should be done if any of the shapes are changed.\n     */\n  }, {\n    key: \"updateBoundingRadius\",\n    value: function updateBoundingRadius() {\n      var shapes = this.shapes;\n      var shapeOffsets = this.shapeOffsets;\n      var N = shapes.length;\n      var radius = 0;\n      for (var i = 0; i !== N; i++) {\n        var shape = shapes[i];\n        shape.updateBoundingSphereRadius();\n        var offset = shapeOffsets[i].length();\n        var r = shape.boundingSphereRadius;\n        if (offset + r > radius) {\n          radius = offset + r;\n        }\n      }\n      this.boundingRadius = radius;\n    }\n    /**\n     * Updates the .aabb\n     */\n  }, {\n    key: \"updateAABB\",\n    value: function updateAABB() {\n      var shapes = this.shapes;\n      var shapeOffsets = this.shapeOffsets;\n      var shapeOrientations = this.shapeOrientations;\n      var N = shapes.length;\n      var offset = tmpVec;\n      var orientation = tmpQuat;\n      var bodyQuat = this.quaternion;\n      var aabb = this.aabb;\n      var shapeAABB = updateAABB_shapeAABB;\n      for (var i = 0; i !== N; i++) {\n        var shape = shapes[i]; // Get shape world position\n\n        bodyQuat.vmult(shapeOffsets[i], offset);\n        offset.vadd(this.position, offset); // Get shape world quaternion\n\n        bodyQuat.mult(shapeOrientations[i], orientation); // Get shape AABB\n\n        shape.calculateWorldAABB(offset, orientation, shapeAABB.lowerBound, shapeAABB.upperBound);\n        if (i === 0) {\n          aabb.copy(shapeAABB);\n        } else {\n          aabb.extend(shapeAABB);\n        }\n      }\n      this.aabbNeedsUpdate = false;\n    }\n    /**\n     * Update `.inertiaWorld` and `.invInertiaWorld`\n     */\n  }, {\n    key: \"updateInertiaWorld\",\n    value: function updateInertiaWorld(force) {\n      var I = this.invInertia;\n      if (I.x === I.y && I.y === I.z && !force) ;else {\n        var m1 = uiw_m1;\n        var m2 = uiw_m2;\n        uiw_m3;\n        m1.setRotationFromQuaternion(this.quaternion);\n        m1.transpose(m2);\n        m1.scale(I, m1);\n        m1.mmult(m2, this.invInertiaWorld);\n      }\n    }\n    /**\n     * Apply force to a point of the body. This could for example be a point on the Body surface.\n     * Applying force this way will add to Body.force and Body.torque.\n     * @param force The amount of force to add.\n     * @param relativePoint A point relative to the center of mass to apply the force on.\n     */\n  }, {\n    key: \"applyForce\",\n    value: function applyForce(force, relativePoint) {\n      if (relativePoint === void 0) {\n        relativePoint = new Vec3();\n      }\n\n      // Needed?\n      if (this.type !== Body.DYNAMIC) {\n        return;\n      }\n      if (this.sleepState === Body.SLEEPING) {\n        this.wakeUp();\n      } // Compute produced rotational force\n\n      var rotForce = Body_applyForce_rotForce;\n      relativePoint.cross(force, rotForce); // Add linear force\n\n      this.force.vadd(force, this.force); // Add rotational force\n\n      this.torque.vadd(rotForce, this.torque);\n    }\n    /**\n     * Apply force to a local point in the body.\n     * @param force The force vector to apply, defined locally in the body frame.\n     * @param localPoint A local point in the body to apply the force on.\n     */\n  }, {\n    key: \"applyLocalForce\",\n    value: function applyLocalForce(localForce, localPoint) {\n      if (localPoint === void 0) {\n        localPoint = new Vec3();\n      }\n      if (this.type !== Body.DYNAMIC) {\n        return;\n      }\n      var worldForce = Body_applyLocalForce_worldForce;\n      var relativePointWorld = Body_applyLocalForce_relativePointWorld; // Transform the force vector to world space\n\n      this.vectorToWorldFrame(localForce, worldForce);\n      this.vectorToWorldFrame(localPoint, relativePointWorld);\n      this.applyForce(worldForce, relativePointWorld);\n    }\n    /**\n     * Apply torque to the body.\n     * @param torque The amount of torque to add.\n     */\n  }, {\n    key: \"applyTorque\",\n    value: function applyTorque(torque) {\n      if (this.type !== Body.DYNAMIC) {\n        return;\n      }\n      if (this.sleepState === Body.SLEEPING) {\n        this.wakeUp();\n      } // Add rotational force\n\n      this.torque.vadd(torque, this.torque);\n    }\n    /**\n     * Apply impulse to a point of the body. This could for example be a point on the Body surface.\n     * An impulse is a force added to a body during a short period of time (impulse = force * time).\n     * Impulses will be added to Body.velocity and Body.angularVelocity.\n     * @param impulse The amount of impulse to add.\n     * @param relativePoint A point relative to the center of mass to apply the force on.\n     */\n  }, {\n    key: \"applyImpulse\",\n    value: function applyImpulse(impulse, relativePoint) {\n      if (relativePoint === void 0) {\n        relativePoint = new Vec3();\n      }\n      if (this.type !== Body.DYNAMIC) {\n        return;\n      }\n      if (this.sleepState === Body.SLEEPING) {\n        this.wakeUp();\n      } // Compute point position relative to the body center\n\n      var r = relativePoint; // Compute produced central impulse velocity\n\n      var velo = Body_applyImpulse_velo;\n      velo.copy(impulse);\n      velo.scale(this.invMass, velo); // Add linear impulse\n\n      this.velocity.vadd(velo, this.velocity); // Compute produced rotational impulse velocity\n\n      var rotVelo = Body_applyImpulse_rotVelo;\n      r.cross(impulse, rotVelo);\n      /*\n       rotVelo.x *= this.invInertia.x;\n       rotVelo.y *= this.invInertia.y;\n       rotVelo.z *= this.invInertia.z;\n       */\n\n      this.invInertiaWorld.vmult(rotVelo, rotVelo); // Add rotational Impulse\n\n      this.angularVelocity.vadd(rotVelo, this.angularVelocity);\n    }\n    /**\n     * Apply locally-defined impulse to a local point in the body.\n     * @param force The force vector to apply, defined locally in the body frame.\n     * @param localPoint A local point in the body to apply the force on.\n     */\n  }, {\n    key: \"applyLocalImpulse\",\n    value: function applyLocalImpulse(localImpulse, localPoint) {\n      if (localPoint === void 0) {\n        localPoint = new Vec3();\n      }\n      if (this.type !== Body.DYNAMIC) {\n        return;\n      }\n      var worldImpulse = Body_applyLocalImpulse_worldImpulse;\n      var relativePointWorld = Body_applyLocalImpulse_relativePoint; // Transform the force vector to world space\n\n      this.vectorToWorldFrame(localImpulse, worldImpulse);\n      this.vectorToWorldFrame(localPoint, relativePointWorld);\n      this.applyImpulse(worldImpulse, relativePointWorld);\n    }\n    /**\n     * Should be called whenever you change the body shape or mass.\n     */\n  }, {\n    key: \"updateMassProperties\",\n    value: function updateMassProperties() {\n      var halfExtents = Body_updateMassProperties_halfExtents;\n      this.invMass = this.mass > 0 ? 1.0 / this.mass : 0;\n      var I = this.inertia;\n      var fixed = this.fixedRotation; // Approximate with AABB box\n\n      this.updateAABB();\n      halfExtents.set((this.aabb.upperBound.x - this.aabb.lowerBound.x) / 2, (this.aabb.upperBound.y - this.aabb.lowerBound.y) / 2, (this.aabb.upperBound.z - this.aabb.lowerBound.z) / 2);\n      Box.calculateInertia(halfExtents, this.mass, I);\n      this.invInertia.set(I.x > 0 && !fixed ? 1.0 / I.x : 0, I.y > 0 && !fixed ? 1.0 / I.y : 0, I.z > 0 && !fixed ? 1.0 / I.z : 0);\n      this.updateInertiaWorld(true);\n    }\n    /**\n     * Get world velocity of a point in the body.\n     * @param worldPoint\n     * @param result\n     * @return The result vector.\n     */\n  }, {\n    key: \"getVelocityAtWorldPoint\",\n    value: function getVelocityAtWorldPoint(worldPoint, result) {\n      var r = new Vec3();\n      worldPoint.vsub(this.position, r);\n      this.angularVelocity.cross(r, result);\n      this.velocity.vadd(result, result);\n      return result;\n    }\n    /**\n     * Move the body forward in time.\n     * @param dt Time step\n     * @param quatNormalize Set to true to normalize the body quaternion\n     * @param quatNormalizeFast If the quaternion should be normalized using \"fast\" quaternion normalization\n     */\n  }, {\n    key: \"integrate\",\n    value: function integrate(dt, quatNormalize, quatNormalizeFast) {\n      // Save previous position\n      this.previousPosition.copy(this.position);\n      this.previousQuaternion.copy(this.quaternion);\n      if (!(this.type === Body.DYNAMIC || this.type === Body.KINEMATIC) || this.sleepState === Body.SLEEPING) {\n        // Only for dynamic\n        return;\n      }\n      var velo = this.velocity;\n      var angularVelo = this.angularVelocity;\n      var pos = this.position;\n      var force = this.force;\n      var torque = this.torque;\n      var quat = this.quaternion;\n      var invMass = this.invMass;\n      var invInertia = this.invInertiaWorld;\n      var linearFactor = this.linearFactor;\n      var iMdt = invMass * dt;\n      velo.x += force.x * iMdt * linearFactor.x;\n      velo.y += force.y * iMdt * linearFactor.y;\n      velo.z += force.z * iMdt * linearFactor.z;\n      var e = invInertia.elements;\n      var angularFactor = this.angularFactor;\n      var tx = torque.x * angularFactor.x;\n      var ty = torque.y * angularFactor.y;\n      var tz = torque.z * angularFactor.z;\n      angularVelo.x += dt * (e[0] * tx + e[1] * ty + e[2] * tz);\n      angularVelo.y += dt * (e[3] * tx + e[4] * ty + e[5] * tz);\n      angularVelo.z += dt * (e[6] * tx + e[7] * ty + e[8] * tz); // Use new velocity  - leap frog\n\n      pos.x += velo.x * dt;\n      pos.y += velo.y * dt;\n      pos.z += velo.z * dt;\n      quat.integrate(this.angularVelocity, dt, this.angularFactor, quat);\n      if (quatNormalize) {\n        if (quatNormalizeFast) {\n          quat.normalizeFast();\n        } else {\n          quat.normalize();\n        }\n      }\n      this.aabbNeedsUpdate = true; // Update world inertia\n\n      this.updateInertiaWorld();\n    }\n  }]);\n  return Body;\n}(EventTarget);\nBody.idCounter = 0;\nBody.COLLIDE_EVENT_NAME = 'collide';\nBody.DYNAMIC = BODY_TYPES.DYNAMIC;\nBody.STATIC = BODY_TYPES.STATIC;\nBody.KINEMATIC = BODY_TYPES.KINEMATIC;\nBody.AWAKE = BODY_SLEEP_STATES.AWAKE;\nBody.SLEEPY = BODY_SLEEP_STATES.SLEEPY;\nBody.SLEEPING = BODY_SLEEP_STATES.SLEEPING;\nBody.wakeupEvent = {\n  type: 'wakeup'\n};\nBody.sleepyEvent = {\n  type: 'sleepy'\n};\nBody.sleepEvent = {\n  type: 'sleep'\n};\nvar tmpVec = new Vec3();\nvar tmpQuat = new Quaternion();\nvar updateAABB_shapeAABB = new AABB();\nvar uiw_m1 = new Mat3();\nvar uiw_m2 = new Mat3();\nvar uiw_m3 = new Mat3();\nvar Body_applyForce_rotForce = new Vec3();\nvar Body_applyLocalForce_worldForce = new Vec3();\nvar Body_applyLocalForce_relativePointWorld = new Vec3();\nvar Body_applyImpulse_velo = new Vec3();\nvar Body_applyImpulse_rotVelo = new Vec3();\nvar Body_applyLocalImpulse_worldImpulse = new Vec3();\nvar Body_applyLocalImpulse_relativePoint = new Vec3();\nvar Body_updateMassProperties_halfExtents = new Vec3();\n\n/**\n * Base class for broadphase implementations\n * @author schteppe\n */\nvar Broadphase = /*#__PURE__*/function () {\n  /**\n   * The world to search for collisions in.\n   */\n\n  /**\n   * If set to true, the broadphase uses bounding boxes for intersection tests, else it uses bounding spheres.\n   */\n\n  /**\n   * Set to true if the objects in the world moved.\n   */\n  function Broadphase() {\n    _classCallCheck(this, Broadphase);\n    this.world = null;\n    this.useBoundingBoxes = false;\n    this.dirty = true;\n  }\n  /**\n   * Get the collision pairs from the world\n   * @param world The world to search in\n   * @param p1 Empty array to be filled with body objects\n   * @param p2 Empty array to be filled with body objects\n   */\n  _createClass(Broadphase, [{\n    key: \"collisionPairs\",\n    value: function collisionPairs(world, p1, p2) {\n      throw new Error('collisionPairs not implemented for this BroadPhase class!');\n    }\n    /**\n     * Check if a body pair needs to be intersection tested at all.\n     */\n  }, {\n    key: \"needBroadphaseCollision\",\n    value: function needBroadphaseCollision(bodyA, bodyB) {\n      // Check collision filter masks\n      if ((bodyA.collisionFilterGroup & bodyB.collisionFilterMask) === 0 || (bodyB.collisionFilterGroup & bodyA.collisionFilterMask) === 0) {\n        return false;\n      } // Check types\n\n      if (((bodyA.type & Body.STATIC) !== 0 || bodyA.sleepState === Body.SLEEPING) && ((bodyB.type & Body.STATIC) !== 0 || bodyB.sleepState === Body.SLEEPING)) {\n        // Both bodies are static or sleeping. Skip.\n        return false;\n      }\n      return true;\n    }\n    /**\n     * Check if the bounding volumes of two bodies intersect.\n     */\n  }, {\n    key: \"intersectionTest\",\n    value: function intersectionTest(bodyA, bodyB, pairs1, pairs2) {\n      if (this.useBoundingBoxes) {\n        this.doBoundingBoxBroadphase(bodyA, bodyB, pairs1, pairs2);\n      } else {\n        this.doBoundingSphereBroadphase(bodyA, bodyB, pairs1, pairs2);\n      }\n    }\n    /**\n     * Check if the bounding spheres of two bodies are intersecting.\n     * @param pairs1 bodyA is appended to this array if intersection\n     * @param pairs2 bodyB is appended to this array if intersection\n     */\n  }, {\n    key: \"doBoundingSphereBroadphase\",\n    value: function doBoundingSphereBroadphase(bodyA, bodyB, pairs1, pairs2) {\n      var r = Broadphase_collisionPairs_r;\n      bodyB.position.vsub(bodyA.position, r);\n      var boundingRadiusSum2 = Math.pow(bodyA.boundingRadius + bodyB.boundingRadius, 2);\n      var norm2 = r.lengthSquared();\n      if (norm2 < boundingRadiusSum2) {\n        pairs1.push(bodyA);\n        pairs2.push(bodyB);\n      }\n    }\n    /**\n     * Check if the bounding boxes of two bodies are intersecting.\n     */\n  }, {\n    key: \"doBoundingBoxBroadphase\",\n    value: function doBoundingBoxBroadphase(bodyA, bodyB, pairs1, pairs2) {\n      if (bodyA.aabbNeedsUpdate) {\n        bodyA.updateAABB();\n      }\n      if (bodyB.aabbNeedsUpdate) {\n        bodyB.updateAABB();\n      } // Check AABB / AABB\n\n      if (bodyA.aabb.overlaps(bodyB.aabb)) {\n        pairs1.push(bodyA);\n        pairs2.push(bodyB);\n      }\n    }\n    /**\n     * Removes duplicate pairs from the pair arrays.\n     */\n  }, {\n    key: \"makePairsUnique\",\n    value: function makePairsUnique(pairs1, pairs2) {\n      var t = Broadphase_makePairsUnique_temp;\n      var p1 = Broadphase_makePairsUnique_p1;\n      var p2 = Broadphase_makePairsUnique_p2;\n      var N = pairs1.length;\n      for (var i = 0; i !== N; i++) {\n        p1[i] = pairs1[i];\n        p2[i] = pairs2[i];\n      }\n      pairs1.length = 0;\n      pairs2.length = 0;\n      for (var _i8 = 0; _i8 !== N; _i8++) {\n        var id1 = p1[_i8].id;\n        var id2 = p2[_i8].id;\n        var key = id1 < id2 ? \"\".concat(id1, \",\").concat(id2) : \"\".concat(id2, \",\").concat(id1);\n        t[key] = _i8;\n        t.keys.push(key);\n      }\n      for (var _i9 = 0; _i9 !== t.keys.length; _i9++) {\n        var _key = t.keys.pop();\n        var pairIndex = t[_key];\n        pairs1.push(p1[pairIndex]);\n        pairs2.push(p2[pairIndex]);\n        delete t[_key];\n      }\n    }\n    /**\n     * To be implemented by subcasses\n     */\n  }, {\n    key: \"setWorld\",\n    value: function setWorld(world) {}\n    /**\n     * Check if the bounding spheres of two bodies overlap.\n     */\n  }, {\n    key: \"aabbQuery\",\n    value:\n    /**\n     * Returns all the bodies within the AABB.\n     */\n\n    function aabbQuery(world, aabb, result) {\n      console.warn('.aabbQuery is not implemented in this Broadphase subclass.');\n      return [];\n    }\n  }], [{\n    key: \"boundingSphereCheck\",\n    value: function boundingSphereCheck(bodyA, bodyB) {\n      var dist = new Vec3(); // bsc_dist;\n\n      bodyA.position.vsub(bodyB.position, dist);\n      var sa = bodyA.shapes[0];\n      var sb = bodyB.shapes[0];\n      return Math.pow(sa.boundingSphereRadius + sb.boundingSphereRadius, 2) > dist.lengthSquared();\n    }\n  }]);\n  return Broadphase;\n}(); // Temp objects\nvar Broadphase_collisionPairs_r = new Vec3();\nnew Vec3();\nnew Quaternion();\nnew Vec3();\nvar Broadphase_makePairsUnique_temp = {\n  keys: []\n};\nvar Broadphase_makePairsUnique_p1 = [];\nvar Broadphase_makePairsUnique_p2 = [];\nnew Vec3();\n\n/**\n * Axis aligned uniform grid broadphase.\n * @todo Needs support for more than just planes and spheres.\n */\nvar GridBroadphase = /*#__PURE__*/function (_Broadphase) {\n  _inherits(GridBroadphase, _Broadphase);\n  var _super4 = _createSuper(GridBroadphase);\n  /**\n   * Number of boxes along x\n   */\n\n  /**\n   * Number of boxes along y\n   */\n\n  /**\n   * Number of boxes along z\n   */\n\n  /**\n   * aabbMin\n   */\n\n  /**\n   * aabbMax\n   */\n\n  /**\n   * bins\n   */\n\n  /**\n   * binLengths\n   */\n\n  /**\n   * @param nx Number of boxes along x.\n   * @param ny Number of boxes along y.\n   * @param nz Number of boxes along z.\n   */\n  function GridBroadphase(aabbMin, aabbMax, nx, ny, nz) {\n    var _this4;\n    _classCallCheck(this, GridBroadphase);\n    if (aabbMin === void 0) {\n      aabbMin = new Vec3(100, 100, 100);\n    }\n    if (aabbMax === void 0) {\n      aabbMax = new Vec3(-100, -100, -100);\n    }\n    if (nx === void 0) {\n      nx = 10;\n    }\n    if (ny === void 0) {\n      ny = 10;\n    }\n    if (nz === void 0) {\n      nz = 10;\n    }\n    _this4 = _super4.call(this);\n    _this4.nx = nx;\n    _this4.ny = ny;\n    _this4.nz = nz;\n    _this4.aabbMin = aabbMin;\n    _this4.aabbMax = aabbMax;\n    var nbins = _this4.nx * _this4.ny * _this4.nz;\n    if (nbins <= 0) {\n      throw \"GridBroadphase: Each dimension's n must be >0\";\n    }\n    _this4.bins = [];\n    _this4.binLengths = []; // Rather than continually resizing arrays (thrashing the memory), just record length and allow them to grow\n\n    _this4.bins.length = nbins;\n    _this4.binLengths.length = nbins;\n    for (var i = 0; i < nbins; i++) {\n      _this4.bins[i] = [];\n      _this4.binLengths[i] = 0;\n    }\n    return _this4;\n  }\n  /**\n   * Get all the collision pairs in the physics world\n   */\n  _createClass(GridBroadphase, [{\n    key: \"collisionPairs\",\n    value: function collisionPairs(world, pairs1, pairs2) {\n      var N = world.bodies.length;\n      var bodies = world.bodies;\n      var max = this.aabbMax;\n      var min = this.aabbMin;\n      var nx = this.nx;\n      var ny = this.ny;\n      var nz = this.nz;\n      var xstep = ny * nz;\n      var ystep = nz;\n      var zstep = 1;\n      var xmax = max.x;\n      var ymax = max.y;\n      var zmax = max.z;\n      var xmin = min.x;\n      var ymin = min.y;\n      var zmin = min.z;\n      var xmult = nx / (xmax - xmin);\n      var ymult = ny / (ymax - ymin);\n      var zmult = nz / (zmax - zmin);\n      var binsizeX = (xmax - xmin) / nx;\n      var binsizeY = (ymax - ymin) / ny;\n      var binsizeZ = (zmax - zmin) / nz;\n      var binRadius = Math.sqrt(binsizeX * binsizeX + binsizeY * binsizeY + binsizeZ * binsizeZ) * 0.5;\n      var types = Shape.types;\n      var SPHERE = types.SPHERE;\n      var PLANE = types.PLANE;\n      types.BOX;\n      types.COMPOUND;\n      types.CONVEXPOLYHEDRON;\n      var bins = this.bins;\n      var binLengths = this.binLengths;\n      var Nbins = this.bins.length; // Reset bins\n\n      for (var i = 0; i !== Nbins; i++) {\n        binLengths[i] = 0;\n      }\n      var ceil = Math.ceil;\n      function addBoxToBins(x0, y0, z0, x1, y1, z1, bi) {\n        var xoff0 = (x0 - xmin) * xmult | 0;\n        var yoff0 = (y0 - ymin) * ymult | 0;\n        var zoff0 = (z0 - zmin) * zmult | 0;\n        var xoff1 = ceil((x1 - xmin) * xmult);\n        var yoff1 = ceil((y1 - ymin) * ymult);\n        var zoff1 = ceil((z1 - zmin) * zmult);\n        if (xoff0 < 0) {\n          xoff0 = 0;\n        } else if (xoff0 >= nx) {\n          xoff0 = nx - 1;\n        }\n        if (yoff0 < 0) {\n          yoff0 = 0;\n        } else if (yoff0 >= ny) {\n          yoff0 = ny - 1;\n        }\n        if (zoff0 < 0) {\n          zoff0 = 0;\n        } else if (zoff0 >= nz) {\n          zoff0 = nz - 1;\n        }\n        if (xoff1 < 0) {\n          xoff1 = 0;\n        } else if (xoff1 >= nx) {\n          xoff1 = nx - 1;\n        }\n        if (yoff1 < 0) {\n          yoff1 = 0;\n        } else if (yoff1 >= ny) {\n          yoff1 = ny - 1;\n        }\n        if (zoff1 < 0) {\n          zoff1 = 0;\n        } else if (zoff1 >= nz) {\n          zoff1 = nz - 1;\n        }\n        xoff0 *= xstep;\n        yoff0 *= ystep;\n        zoff0 *= zstep;\n        xoff1 *= xstep;\n        yoff1 *= ystep;\n        zoff1 *= zstep;\n        for (var xoff = xoff0; xoff <= xoff1; xoff += xstep) {\n          for (var yoff = yoff0; yoff <= yoff1; yoff += ystep) {\n            for (var zoff = zoff0; zoff <= zoff1; zoff += zstep) {\n              var idx = xoff + yoff + zoff;\n              bins[idx][binLengths[idx]++] = bi;\n            }\n          }\n        }\n      } // Put all bodies into the bins\n\n      for (var _i10 = 0; _i10 !== N; _i10++) {\n        var bi = bodies[_i10];\n        var si = bi.shapes[0];\n        switch (si.type) {\n          case SPHERE:\n            {\n              var shape = si; // Put in bin\n              // check if overlap with other bins\n\n              var x = bi.position.x;\n              var y = bi.position.y;\n              var z = bi.position.z;\n              var r = shape.radius;\n              addBoxToBins(x - r, y - r, z - r, x + r, y + r, z + r, bi);\n              break;\n            }\n          case PLANE:\n            {\n              var _shape = si;\n              if (_shape.worldNormalNeedsUpdate) {\n                _shape.computeWorldNormal(bi.quaternion);\n              }\n              var planeNormal = _shape.worldNormal; //Relative position from origin of plane object to the first bin\n              //Incremented as we iterate through the bins\n\n              var xreset = xmin + binsizeX * 0.5 - bi.position.x;\n              var yreset = ymin + binsizeY * 0.5 - bi.position.y;\n              var zreset = zmin + binsizeZ * 0.5 - bi.position.z;\n              var d = GridBroadphase_collisionPairs_d;\n              d.set(xreset, yreset, zreset);\n              for (var xi = 0, xoff = 0; xi !== nx; xi++, xoff += xstep, d.y = yreset, d.x += binsizeX) {\n                for (var yi = 0, yoff = 0; yi !== ny; yi++, yoff += ystep, d.z = zreset, d.y += binsizeY) {\n                  for (var zi = 0, zoff = 0; zi !== nz; zi++, zoff += zstep, d.z += binsizeZ) {\n                    if (d.dot(planeNormal) < binRadius) {\n                      var idx = xoff + yoff + zoff;\n                      bins[idx][binLengths[idx]++] = bi;\n                    }\n                  }\n                }\n              }\n              break;\n            }\n          default:\n            {\n              if (bi.aabbNeedsUpdate) {\n                bi.updateAABB();\n              }\n              addBoxToBins(bi.aabb.lowerBound.x, bi.aabb.lowerBound.y, bi.aabb.lowerBound.z, bi.aabb.upperBound.x, bi.aabb.upperBound.y, bi.aabb.upperBound.z, bi);\n              break;\n            }\n        }\n      } // Check each bin\n\n      for (var _i11 = 0; _i11 !== Nbins; _i11++) {\n        var binLength = binLengths[_i11]; //Skip bins with no potential collisions\n\n        if (binLength > 1) {\n          var bin = bins[_i11]; // Do N^2 broadphase inside\n\n          for (var _xi = 0; _xi !== binLength; _xi++) {\n            var _bi = bin[_xi];\n            for (var _yi = 0; _yi !== _xi; _yi++) {\n              var bj = bin[_yi];\n              if (this.needBroadphaseCollision(_bi, bj)) {\n                this.intersectionTest(_bi, bj, pairs1, pairs2);\n              }\n            }\n          }\n        }\n      } //\tfor (let zi = 0, zoff=0; zi < nz; zi++, zoff+= zstep) {\n      //\t\tconsole.log(\"layer \"+zi);\n      //\t\tfor (let yi = 0, yoff=0; yi < ny; yi++, yoff += ystep) {\n      //\t\t\tconst row = '';\n      //\t\t\tfor (let xi = 0, xoff=0; xi < nx; xi++, xoff += xstep) {\n      //\t\t\t\tconst idx = xoff + yoff + zoff;\n      //\t\t\t\trow += ' ' + binLengths[idx];\n      //\t\t\t}\n      //\t\t\tconsole.log(row);\n      //\t\t}\n      //\t}\n\n      this.makePairsUnique(pairs1, pairs2);\n    }\n  }]);\n  return GridBroadphase;\n}(Broadphase);\nvar GridBroadphase_collisionPairs_d = new Vec3();\nnew Vec3();\n\n/**\n * Naive broadphase implementation, used in lack of better ones.\n *\n * The naive broadphase looks at all possible pairs without restriction, therefore it has complexity N^2 _(which is bad)_\n */\nvar NaiveBroadphase = /*#__PURE__*/function (_Broadphase2) {\n  _inherits(NaiveBroadphase, _Broadphase2);\n  var _super5 = _createSuper(NaiveBroadphase);\n  /**\n   * @todo Remove useless constructor\n   */\n  function NaiveBroadphase() {\n    _classCallCheck(this, NaiveBroadphase);\n    return _super5.call(this);\n  }\n  /**\n   * Get all the collision pairs in the physics world\n   */\n  _createClass(NaiveBroadphase, [{\n    key: \"collisionPairs\",\n    value: function collisionPairs(world, pairs1, pairs2) {\n      var bodies = world.bodies;\n      var n = bodies.length;\n      var bi;\n      var bj; // Naive N^2 ftw!\n\n      for (var i = 0; i !== n; i++) {\n        for (var j = 0; j !== i; j++) {\n          bi = bodies[i];\n          bj = bodies[j];\n          if (!this.needBroadphaseCollision(bi, bj)) {\n            continue;\n          }\n          this.intersectionTest(bi, bj, pairs1, pairs2);\n        }\n      }\n    }\n    /**\n     * Returns all the bodies within an AABB.\n     * @param result An array to store resulting bodies in.\n     */\n  }, {\n    key: \"aabbQuery\",\n    value: function aabbQuery(world, aabb, result) {\n      if (result === void 0) {\n        result = [];\n      }\n      for (var i = 0; i < world.bodies.length; i++) {\n        var _b3 = world.bodies[i];\n        if (_b3.aabbNeedsUpdate) {\n          _b3.updateAABB();\n        } // Ugly hack until Body gets aabb\n\n        if (_b3.aabb.overlaps(aabb)) {\n          result.push(_b3);\n        }\n      }\n      return result;\n    }\n  }]);\n  return NaiveBroadphase;\n}(Broadphase);\n/**\n * Storage for Ray casting data\n */\nvar RaycastResult = /*#__PURE__*/function () {\n  /**\n   * rayFromWorld\n   */\n\n  /**\n   * rayToWorld\n   */\n\n  /**\n   * hitNormalWorld\n   */\n\n  /**\n   * hitPointWorld\n   */\n\n  /**\n   * hasHit\n   */\n\n  /**\n   * shape\n   */\n\n  /**\n   * body\n   */\n\n  /**\n   * The index of the hit triangle, if the hit shape was a trimesh\n   */\n\n  /**\n   * Distance to the hit. Will be set to -1 if there was no hit\n   */\n\n  /**\n   * If the ray should stop traversing the bodies\n   */\n  function RaycastResult() {\n    _classCallCheck(this, RaycastResult);\n    this.rayFromWorld = new Vec3();\n    this.rayToWorld = new Vec3();\n    this.hitNormalWorld = new Vec3();\n    this.hitPointWorld = new Vec3();\n    this.hasHit = false;\n    this.shape = null;\n    this.body = null;\n    this.hitFaceIndex = -1;\n    this.distance = -1;\n    this.shouldStop = false;\n  }\n  /**\n   * Reset all result data.\n   */\n  _createClass(RaycastResult, [{\n    key: \"reset\",\n    value: function reset() {\n      this.rayFromWorld.setZero();\n      this.rayToWorld.setZero();\n      this.hitNormalWorld.setZero();\n      this.hitPointWorld.setZero();\n      this.hasHit = false;\n      this.shape = null;\n      this.body = null;\n      this.hitFaceIndex = -1;\n      this.distance = -1;\n      this.shouldStop = false;\n    }\n    /**\n     * abort\n     */\n  }, {\n    key: \"abort\",\n    value: function abort() {\n      this.shouldStop = true;\n    }\n    /**\n     * Set result data.\n     */\n  }, {\n    key: \"set\",\n    value: function set(rayFromWorld, rayToWorld, hitNormalWorld, hitPointWorld, shape, body, distance) {\n      this.rayFromWorld.copy(rayFromWorld);\n      this.rayToWorld.copy(rayToWorld);\n      this.hitNormalWorld.copy(hitNormalWorld);\n      this.hitPointWorld.copy(hitPointWorld);\n      this.shape = shape;\n      this.body = body;\n      this.distance = distance;\n    }\n  }]);\n  return RaycastResult;\n}();\nvar _Shape$types$SPHERE, _Shape$types$PLANE, _Shape$types$BOX, _Shape$types$CYLINDER, _Shape$types$CONVEXPO, _Shape$types$HEIGHTFI, _Shape$types$TRIMESH;\n\n/**\n * RAY_MODES\n */\nvar RAY_MODES = {\n  /** CLOSEST */\n  CLOSEST: 1,\n  /** ANY */\n  ANY: 2,\n  /** ALL */\n  ALL: 4\n};\n/**\n * RayMode\n */\n\n_Shape$types$SPHERE = Shape.types.SPHERE;\n_Shape$types$PLANE = Shape.types.PLANE;\n_Shape$types$BOX = Shape.types.BOX;\n_Shape$types$CYLINDER = Shape.types.CYLINDER;\n_Shape$types$CONVEXPO = Shape.types.CONVEXPOLYHEDRON;\n_Shape$types$HEIGHTFI = Shape.types.HEIGHTFIELD;\n_Shape$types$TRIMESH = Shape.types.TRIMESH;\n\n/**\n * A line in 3D space that intersects bodies and return points.\n */\nvar Ray = /*#__PURE__*/function (_Shape$types$SPHERE2, _Shape$types$PLANE2, _Shape$types$BOX2, _Shape$types$CYLINDER2, _Shape$types$CONVEXPO2, _Shape$types$HEIGHTFI2, _Shape$types$TRIMESH2) {\n  function Ray(from, to) {\n    _classCallCheck(this, Ray);\n    if (from === void 0) {\n      from = new Vec3();\n    }\n    if (to === void 0) {\n      to = new Vec3();\n    }\n    this.from = from.clone();\n    this.to = to.clone();\n    this.direction = new Vec3();\n    this.precision = 0.0001;\n    this.checkCollisionResponse = true;\n    this.skipBackfaces = false;\n    this.collisionFilterMask = -1;\n    this.collisionFilterGroup = -1;\n    this.mode = Ray.ANY;\n    this.result = new RaycastResult();\n    this.hasHit = false;\n    this.callback = function (result) {};\n  }\n  /**\n   * Do itersection against all bodies in the given World.\n   * @return True if the ray hit anything, otherwise false.\n   */\n  _createClass(Ray, [{\n    key: _Shape$types$SPHERE2,\n    get:\n    /**\n     * from\n     */\n\n    /**\n     * to\n     */\n\n    /**\n     * direction\n     */\n\n    /**\n     * The precision of the ray. Used when checking parallelity etc.\n     * @default 0.0001\n     */\n\n    /**\n     * Set to `false` if you don't want the Ray to take `collisionResponse` flags into account on bodies and shapes.\n     * @default true\n     */\n\n    /**\n     * If set to `true`, the ray skips any hits with normal.dot(rayDirection) < 0.\n     * @default false\n     */\n\n    /**\n     * collisionFilterMask\n     * @default -1\n     */\n\n    /**\n     * collisionFilterGroup\n     * @default -1\n     */\n\n    /**\n     * The intersection mode. Should be Ray.ANY, Ray.ALL or Ray.CLOSEST.\n     * @default RAY.ANY\n     */\n\n    /**\n     * Current result object.\n     */\n\n    /**\n     * Will be set to `true` during intersectWorld() if the ray hit anything.\n     */\n\n    /**\n     * User-provided result callback. Will be used if mode is Ray.ALL.\n     */\n\n    /**\n     * CLOSEST\n     */\n\n    /**\n     * ANY\n     */\n\n    /**\n     * ALL\n     */\n    function get() {\n      return this._intersectSphere;\n    }\n  }, {\n    key: _Shape$types$PLANE2,\n    get: function get() {\n      return this._intersectPlane;\n    }\n  }, {\n    key: _Shape$types$BOX2,\n    get: function get() {\n      return this._intersectBox;\n    }\n  }, {\n    key: _Shape$types$CYLINDER2,\n    get: function get() {\n      return this._intersectConvex;\n    }\n  }, {\n    key: _Shape$types$CONVEXPO2,\n    get: function get() {\n      return this._intersectConvex;\n    }\n  }, {\n    key: _Shape$types$HEIGHTFI2,\n    get: function get() {\n      return this._intersectHeightfield;\n    }\n  }, {\n    key: _Shape$types$TRIMESH2,\n    get: function get() {\n      return this._intersectTrimesh;\n    }\n  }, {\n    key: \"intersectWorld\",\n    value: function intersectWorld(world, options) {\n      this.mode = options.mode || Ray.ANY;\n      this.result = options.result || new RaycastResult();\n      this.skipBackfaces = !!options.skipBackfaces;\n      this.collisionFilterMask = typeof options.collisionFilterMask !== 'undefined' ? options.collisionFilterMask : -1;\n      this.collisionFilterGroup = typeof options.collisionFilterGroup !== 'undefined' ? options.collisionFilterGroup : -1;\n      this.checkCollisionResponse = typeof options.checkCollisionResponse !== 'undefined' ? options.checkCollisionResponse : true;\n      if (options.from) {\n        this.from.copy(options.from);\n      }\n      if (options.to) {\n        this.to.copy(options.to);\n      }\n      this.callback = options.callback || function () {};\n      this.hasHit = false;\n      this.result.reset();\n      this.updateDirection();\n      this.getAABB(tmpAABB$1);\n      tmpArray.length = 0;\n      world.broadphase.aabbQuery(world, tmpAABB$1, tmpArray);\n      this.intersectBodies(tmpArray);\n      return this.hasHit;\n    }\n    /**\n     * Shoot a ray at a body, get back information about the hit.\n     * @deprecated @param result set the result property of the Ray instead.\n     */\n  }, {\n    key: \"intersectBody\",\n    value: function intersectBody(body, result) {\n      if (result) {\n        this.result = result;\n        this.updateDirection();\n      }\n      var checkCollisionResponse = this.checkCollisionResponse;\n      if (checkCollisionResponse && !body.collisionResponse) {\n        return;\n      }\n      if ((this.collisionFilterGroup & body.collisionFilterMask) === 0 || (body.collisionFilterGroup & this.collisionFilterMask) === 0) {\n        return;\n      }\n      var xi = intersectBody_xi;\n      var qi = intersectBody_qi;\n      for (var i = 0, N = body.shapes.length; i < N; i++) {\n        var shape = body.shapes[i];\n        if (checkCollisionResponse && !shape.collisionResponse) {\n          continue; // Skip\n        }\n\n        body.quaternion.mult(body.shapeOrientations[i], qi);\n        body.quaternion.vmult(body.shapeOffsets[i], xi);\n        xi.vadd(body.position, xi);\n        this.intersectShape(shape, qi, xi, body);\n        if (this.result.shouldStop) {\n          break;\n        }\n      }\n    }\n    /**\n     * Shoot a ray at an array bodies, get back information about the hit.\n     * @param bodies An array of Body objects.\n     * @deprecated @param result set the result property of the Ray instead.\n     *\n     */\n  }, {\n    key: \"intersectBodies\",\n    value: function intersectBodies(bodies, result) {\n      if (result) {\n        this.result = result;\n        this.updateDirection();\n      }\n      for (var i = 0, l = bodies.length; !this.result.shouldStop && i < l; i++) {\n        this.intersectBody(bodies[i]);\n      }\n    }\n    /**\n     * Updates the direction vector.\n     */\n  }, {\n    key: \"updateDirection\",\n    value: function updateDirection() {\n      this.to.vsub(this.from, this.direction);\n      this.direction.normalize();\n    }\n  }, {\n    key: \"intersectShape\",\n    value: function intersectShape(shape, quat, position, body) {\n      var from = this.from; // Checking boundingSphere\n\n      var distance = distanceFromIntersection(from, this.direction, position);\n      if (distance > shape.boundingSphereRadius) {\n        return;\n      }\n      var intersectMethod = this[shape.type];\n      if (intersectMethod) {\n        intersectMethod.call(this, shape, quat, position, body, shape);\n      }\n    }\n  }, {\n    key: \"_intersectBox\",\n    value: function _intersectBox(box, quat, position, body, reportedShape) {\n      return this._intersectConvex(box.convexPolyhedronRepresentation, quat, position, body, reportedShape);\n    }\n  }, {\n    key: \"_intersectPlane\",\n    value: function _intersectPlane(shape, quat, position, body, reportedShape) {\n      var from = this.from;\n      var to = this.to;\n      var direction = this.direction; // Get plane normal\n\n      var worldNormal = new Vec3(0, 0, 1);\n      quat.vmult(worldNormal, worldNormal);\n      var len = new Vec3();\n      from.vsub(position, len);\n      var planeToFrom = len.dot(worldNormal);\n      to.vsub(position, len);\n      var planeToTo = len.dot(worldNormal);\n      if (planeToFrom * planeToTo > 0) {\n        // \"from\" and \"to\" are on the same side of the plane... bail out\n        return;\n      }\n      if (from.distanceTo(to) < planeToFrom) {\n        return;\n      }\n      var n_dot_dir = worldNormal.dot(direction);\n      if (Math.abs(n_dot_dir) < this.precision) {\n        // No intersection\n        return;\n      }\n      var planePointToFrom = new Vec3();\n      var dir_scaled_with_t = new Vec3();\n      var hitPointWorld = new Vec3();\n      from.vsub(position, planePointToFrom);\n      var t = -worldNormal.dot(planePointToFrom) / n_dot_dir;\n      direction.scale(t, dir_scaled_with_t);\n      from.vadd(dir_scaled_with_t, hitPointWorld);\n      this.reportIntersection(worldNormal, hitPointWorld, reportedShape, body, -1);\n    }\n    /**\n     * Get the world AABB of the ray.\n     */\n  }, {\n    key: \"getAABB\",\n    value: function getAABB(aabb) {\n      var lowerBound = aabb.lowerBound,\n        upperBound = aabb.upperBound;\n      var to = this.to;\n      var from = this.from;\n      lowerBound.x = Math.min(to.x, from.x);\n      lowerBound.y = Math.min(to.y, from.y);\n      lowerBound.z = Math.min(to.z, from.z);\n      upperBound.x = Math.max(to.x, from.x);\n      upperBound.y = Math.max(to.y, from.y);\n      upperBound.z = Math.max(to.z, from.z);\n    }\n  }, {\n    key: \"_intersectHeightfield\",\n    value: function _intersectHeightfield(shape, quat, position, body, reportedShape) {\n      shape.data;\n      shape.elementSize; // Convert the ray to local heightfield coordinates\n\n      var localRay = intersectHeightfield_localRay; //new Ray(this.from, this.to);\n\n      localRay.from.copy(this.from);\n      localRay.to.copy(this.to);\n      Transform.pointToLocalFrame(position, quat, localRay.from, localRay.from);\n      Transform.pointToLocalFrame(position, quat, localRay.to, localRay.to);\n      localRay.updateDirection(); // Get the index of the data points to test against\n\n      var index = intersectHeightfield_index;\n      var iMinX;\n      var iMinY;\n      var iMaxX;\n      var iMaxY; // Set to max\n\n      iMinX = iMinY = 0;\n      iMaxX = iMaxY = shape.data.length - 1;\n      var aabb = new AABB();\n      localRay.getAABB(aabb);\n      shape.getIndexOfPosition(aabb.lowerBound.x, aabb.lowerBound.y, index, true);\n      iMinX = Math.max(iMinX, index[0]);\n      iMinY = Math.max(iMinY, index[1]);\n      shape.getIndexOfPosition(aabb.upperBound.x, aabb.upperBound.y, index, true);\n      iMaxX = Math.min(iMaxX, index[0] + 1);\n      iMaxY = Math.min(iMaxY, index[1] + 1);\n      for (var i = iMinX; i < iMaxX; i++) {\n        for (var j = iMinY; j < iMaxY; j++) {\n          if (this.result.shouldStop) {\n            return;\n          }\n          shape.getAabbAtIndex(i, j, aabb);\n          if (!aabb.overlapsRay(localRay)) {\n            continue;\n          } // Lower triangle\n\n          shape.getConvexTrianglePillar(i, j, false);\n          Transform.pointToWorldFrame(position, quat, shape.pillarOffset, worldPillarOffset);\n          this._intersectConvex(shape.pillarConvex, quat, worldPillarOffset, body, reportedShape, intersectConvexOptions);\n          if (this.result.shouldStop) {\n            return;\n          } // Upper triangle\n\n          shape.getConvexTrianglePillar(i, j, true);\n          Transform.pointToWorldFrame(position, quat, shape.pillarOffset, worldPillarOffset);\n          this._intersectConvex(shape.pillarConvex, quat, worldPillarOffset, body, reportedShape, intersectConvexOptions);\n        }\n      }\n    }\n  }, {\n    key: \"_intersectSphere\",\n    value: function _intersectSphere(sphere, quat, position, body, reportedShape) {\n      var from = this.from;\n      var to = this.to;\n      var r = sphere.radius;\n      var a = Math.pow(to.x - from.x, 2) + Math.pow(to.y - from.y, 2) + Math.pow(to.z - from.z, 2);\n      var b = 2 * ((to.x - from.x) * (from.x - position.x) + (to.y - from.y) * (from.y - position.y) + (to.z - from.z) * (from.z - position.z));\n      var c = Math.pow(from.x - position.x, 2) + Math.pow(from.y - position.y, 2) + Math.pow(from.z - position.z, 2) - Math.pow(r, 2);\n      var delta = Math.pow(b, 2) - 4 * a * c;\n      var intersectionPoint = Ray_intersectSphere_intersectionPoint;\n      var normal = Ray_intersectSphere_normal;\n      if (delta < 0) {\n        // No intersection\n        return;\n      } else if (delta === 0) {\n        // single intersection point\n        from.lerp(to, delta, intersectionPoint);\n        intersectionPoint.vsub(position, normal);\n        normal.normalize();\n        this.reportIntersection(normal, intersectionPoint, reportedShape, body, -1);\n      } else {\n        var d1 = (-b - Math.sqrt(delta)) / (2 * a);\n        var d2 = (-b + Math.sqrt(delta)) / (2 * a);\n        if (d1 >= 0 && d1 <= 1) {\n          from.lerp(to, d1, intersectionPoint);\n          intersectionPoint.vsub(position, normal);\n          normal.normalize();\n          this.reportIntersection(normal, intersectionPoint, reportedShape, body, -1);\n        }\n        if (this.result.shouldStop) {\n          return;\n        }\n        if (d2 >= 0 && d2 <= 1) {\n          from.lerp(to, d2, intersectionPoint);\n          intersectionPoint.vsub(position, normal);\n          normal.normalize();\n          this.reportIntersection(normal, intersectionPoint, reportedShape, body, -1);\n        }\n      }\n    }\n  }, {\n    key: \"_intersectConvex\",\n    value: function _intersectConvex(shape, quat, position, body, reportedShape, options) {\n      intersectConvex_minDistNormal;\n      var normal = intersectConvex_normal;\n      var vector = intersectConvex_vector;\n      intersectConvex_minDistIntersect;\n      var faceList = options && options.faceList || null; // Checking faces\n\n      var faces = shape.faces;\n      var vertices = shape.vertices;\n      var normals = shape.faceNormals;\n      var direction = this.direction;\n      var from = this.from;\n      var to = this.to;\n      var fromToDistance = from.distanceTo(to);\n      var Nfaces = faceList ? faceList.length : faces.length;\n      var result = this.result;\n      for (var j = 0; !result.shouldStop && j < Nfaces; j++) {\n        var fi = faceList ? faceList[j] : j;\n        var face = faces[fi];\n        var faceNormal = normals[fi];\n        var q = quat;\n        var x = position; // determine if ray intersects the plane of the face\n        // note: this works regardless of the direction of the face normal\n        // Get plane point in world coordinates...\n\n        vector.copy(vertices[face[0]]);\n        q.vmult(vector, vector);\n        vector.vadd(x, vector); // ...but make it relative to the ray from. We'll fix this later.\n\n        vector.vsub(from, vector); // Get plane normal\n\n        q.vmult(faceNormal, normal); // If this dot product is negative, we have something interesting\n\n        var dot = direction.dot(normal); // Bail out if ray and plane are parallel\n\n        if (Math.abs(dot) < this.precision) {\n          continue;\n        } // calc distance to plane\n\n        var scalar = normal.dot(vector) / dot; // if negative distance, then plane is behind ray\n\n        if (scalar < 0) {\n          continue;\n        } // if (dot < 0) {\n        // Intersection point is from + direction * scalar\n\n        direction.scale(scalar, intersectPoint);\n        intersectPoint.vadd(from, intersectPoint); // a is the point we compare points b and c with.\n\n        a.copy(vertices[face[0]]);\n        q.vmult(a, a);\n        x.vadd(a, a);\n        for (var i = 1; !result.shouldStop && i < face.length - 1; i++) {\n          // Transform 3 vertices to world coords\n          b.copy(vertices[face[i]]);\n          c.copy(vertices[face[i + 1]]);\n          q.vmult(b, b);\n          q.vmult(c, c);\n          x.vadd(b, b);\n          x.vadd(c, c);\n          var distance = intersectPoint.distanceTo(from);\n          if (!(Ray.pointInTriangle(intersectPoint, a, b, c) || Ray.pointInTriangle(intersectPoint, b, a, c)) || distance > fromToDistance) {\n            continue;\n          }\n          this.reportIntersection(normal, intersectPoint, reportedShape, body, fi);\n        } // }\n      }\n    }\n    /**\n     * @todo Optimize by transforming the world to local space first.\n     * @todo Use Octree lookup\n     */\n  }, {\n    key: \"_intersectTrimesh\",\n    value: function _intersectTrimesh(mesh, quat, position, body, reportedShape, options) {\n      var normal = intersectTrimesh_normal;\n      var triangles = intersectTrimesh_triangles;\n      var treeTransform = intersectTrimesh_treeTransform;\n      var vector = intersectConvex_vector;\n      var localDirection = intersectTrimesh_localDirection;\n      var localFrom = intersectTrimesh_localFrom;\n      var localTo = intersectTrimesh_localTo;\n      var worldIntersectPoint = intersectTrimesh_worldIntersectPoint;\n      var worldNormal = intersectTrimesh_worldNormal; // Checking faces\n\n      var indices = mesh.indices;\n      mesh.vertices; // const normals = mesh.faceNormals\n\n      var from = this.from;\n      var to = this.to;\n      var direction = this.direction;\n      treeTransform.position.copy(position);\n      treeTransform.quaternion.copy(quat); // Transform ray to local space!\n\n      Transform.vectorToLocalFrame(position, quat, direction, localDirection);\n      Transform.pointToLocalFrame(position, quat, from, localFrom);\n      Transform.pointToLocalFrame(position, quat, to, localTo);\n      localTo.x *= mesh.scale.x;\n      localTo.y *= mesh.scale.y;\n      localTo.z *= mesh.scale.z;\n      localFrom.x *= mesh.scale.x;\n      localFrom.y *= mesh.scale.y;\n      localFrom.z *= mesh.scale.z;\n      localTo.vsub(localFrom, localDirection);\n      localDirection.normalize();\n      var fromToDistanceSquared = localFrom.distanceSquared(localTo);\n      mesh.tree.rayQuery(this, treeTransform, triangles);\n      for (var i = 0, N = triangles.length; !this.result.shouldStop && i !== N; i++) {\n        var trianglesIndex = triangles[i];\n        mesh.getNormal(trianglesIndex, normal); // determine if ray intersects the plane of the face\n        // note: this works regardless of the direction of the face normal\n        // Get plane point in world coordinates...\n\n        mesh.getVertex(indices[trianglesIndex * 3], a); // ...but make it relative to the ray from. We'll fix this later.\n\n        a.vsub(localFrom, vector); // If this dot product is negative, we have something interesting\n\n        var dot = localDirection.dot(normal); // Bail out if ray and plane are parallel\n        // if (Math.abs( dot ) < this.precision){\n        //     continue;\n        // }\n        // calc distance to plane\n\n        var scalar = normal.dot(vector) / dot; // if negative distance, then plane is behind ray\n\n        if (scalar < 0) {\n          continue;\n        } // Intersection point is from + direction * scalar\n\n        localDirection.scale(scalar, intersectPoint);\n        intersectPoint.vadd(localFrom, intersectPoint); // Get triangle vertices\n\n        mesh.getVertex(indices[trianglesIndex * 3 + 1], b);\n        mesh.getVertex(indices[trianglesIndex * 3 + 2], c);\n        var squaredDistance = intersectPoint.distanceSquared(localFrom);\n        if (!(Ray.pointInTriangle(intersectPoint, b, a, c) || Ray.pointInTriangle(intersectPoint, a, b, c)) || squaredDistance > fromToDistanceSquared) {\n          continue;\n        } // transform intersectpoint and normal to world\n\n        Transform.vectorToWorldFrame(quat, normal, worldNormal);\n        Transform.pointToWorldFrame(position, quat, intersectPoint, worldIntersectPoint);\n        this.reportIntersection(worldNormal, worldIntersectPoint, reportedShape, body, trianglesIndex);\n      }\n      triangles.length = 0;\n    }\n    /**\n     * @return True if the intersections should continue\n     */\n  }, {\n    key: \"reportIntersection\",\n    value: function reportIntersection(normal, hitPointWorld, shape, body, hitFaceIndex) {\n      var from = this.from;\n      var to = this.to;\n      var distance = from.distanceTo(hitPointWorld);\n      var result = this.result; // Skip back faces?\n\n      if (this.skipBackfaces && normal.dot(this.direction) > 0) {\n        return;\n      }\n      result.hitFaceIndex = typeof hitFaceIndex !== 'undefined' ? hitFaceIndex : -1;\n      switch (this.mode) {\n        case Ray.ALL:\n          this.hasHit = true;\n          result.set(from, to, normal, hitPointWorld, shape, body, distance);\n          result.hasHit = true;\n          this.callback(result);\n          break;\n        case Ray.CLOSEST:\n          // Store if closer than current closest\n          if (distance < result.distance || !result.hasHit) {\n            this.hasHit = true;\n            result.hasHit = true;\n            result.set(from, to, normal, hitPointWorld, shape, body, distance);\n          }\n          break;\n        case Ray.ANY:\n          // Report and stop.\n          this.hasHit = true;\n          result.hasHit = true;\n          result.set(from, to, normal, hitPointWorld, shape, body, distance);\n          result.shouldStop = true;\n          break;\n      }\n    }\n    /**\n     * As per \"Barycentric Technique\" as named\n     * {@link https://www.blackpawn.com/texts/pointinpoly/default.html here} but without the division\n     */\n  }], [{\n    key: \"pointInTriangle\",\n    value: function pointInTriangle(p, a, b, c) {\n      c.vsub(a, v0);\n      b.vsub(a, v1);\n      p.vsub(a, v2);\n      var dot00 = v0.dot(v0);\n      var dot01 = v0.dot(v1);\n      var dot02 = v0.dot(v2);\n      var dot11 = v1.dot(v1);\n      var dot12 = v1.dot(v2);\n      var u;\n      var v;\n      return (u = dot11 * dot02 - dot01 * dot12) >= 0 && (v = dot00 * dot12 - dot01 * dot02) >= 0 && u + v < dot00 * dot11 - dot01 * dot01;\n    }\n  }]);\n  return Ray;\n}(_Shape$types$SPHERE, _Shape$types$PLANE, _Shape$types$BOX, _Shape$types$CYLINDER, _Shape$types$CONVEXPO, _Shape$types$HEIGHTFI, _Shape$types$TRIMESH);\nRay.CLOSEST = RAY_MODES.CLOSEST;\nRay.ANY = RAY_MODES.ANY;\nRay.ALL = RAY_MODES.ALL;\nvar tmpAABB$1 = new AABB();\nvar tmpArray = [];\nvar v1 = new Vec3();\nvar v2 = new Vec3();\nvar intersectBody_xi = new Vec3();\nvar intersectBody_qi = new Quaternion();\nvar intersectPoint = new Vec3();\nvar a = new Vec3();\nvar b = new Vec3();\nvar c = new Vec3();\nnew Vec3();\nnew RaycastResult();\nvar intersectConvexOptions = {\n  faceList: [0]\n};\nvar worldPillarOffset = new Vec3();\nvar intersectHeightfield_localRay = new Ray();\nvar intersectHeightfield_index = [];\nvar Ray_intersectSphere_intersectionPoint = new Vec3();\nvar Ray_intersectSphere_normal = new Vec3();\nvar intersectConvex_normal = new Vec3();\nvar intersectConvex_minDistNormal = new Vec3();\nvar intersectConvex_minDistIntersect = new Vec3();\nvar intersectConvex_vector = new Vec3();\nvar intersectTrimesh_normal = new Vec3();\nvar intersectTrimesh_localDirection = new Vec3();\nvar intersectTrimesh_localFrom = new Vec3();\nvar intersectTrimesh_localTo = new Vec3();\nvar intersectTrimesh_worldNormal = new Vec3();\nvar intersectTrimesh_worldIntersectPoint = new Vec3();\nnew AABB();\nvar intersectTrimesh_triangles = [];\nvar intersectTrimesh_treeTransform = new Transform();\nvar v0 = new Vec3();\nvar intersect = new Vec3();\nfunction distanceFromIntersection(from, direction, position) {\n  // v0 is vector from from to position\n  position.vsub(from, v0);\n  var dot = v0.dot(direction); // intersect = direction*dot + from\n\n  direction.scale(dot, intersect);\n  intersect.vadd(from, intersect);\n  var distance = position.distanceTo(intersect);\n  return distance;\n}\n\n/**\n * Sweep and prune broadphase along one axis.\n */\nvar SAPBroadphase = /*#__PURE__*/function (_Broadphase3) {\n  _inherits(SAPBroadphase, _Broadphase3);\n  var _super6 = _createSuper(SAPBroadphase);\n  function SAPBroadphase(world) {\n    var _this5;\n    _classCallCheck(this, SAPBroadphase);\n    _this5 = _super6.call(this);\n    _this5.axisList = [];\n    _this5.world = null;\n    _this5.axisIndex = 0;\n    var axisList = _this5.axisList;\n    _this5._addBodyHandler = function (event) {\n      axisList.push(event.body);\n    };\n    _this5._removeBodyHandler = function (event) {\n      var idx = axisList.indexOf(event.body);\n      if (idx !== -1) {\n        axisList.splice(idx, 1);\n      }\n    };\n    if (world) {\n      _this5.setWorld(world);\n    }\n    return _this5;\n  }\n  /**\n   * Change the world\n   */\n  _createClass(SAPBroadphase, [{\n    key: \"setWorld\",\n    value: function setWorld(world) {\n      // Clear the old axis array\n      this.axisList.length = 0; // Add all bodies from the new world\n\n      for (var i = 0; i < world.bodies.length; i++) {\n        this.axisList.push(world.bodies[i]);\n      } // Remove old handlers, if any\n\n      world.removeEventListener('addBody', this._addBodyHandler);\n      world.removeEventListener('removeBody', this._removeBodyHandler); // Add handlers to update the list of bodies.\n\n      world.addEventListener('addBody', this._addBodyHandler);\n      world.addEventListener('removeBody', this._removeBodyHandler);\n      this.world = world;\n      this.dirty = true;\n    }\n    /**\n     * Collect all collision pairs\n     */\n  }, {\n    key: \"collisionPairs\",\n    value: function collisionPairs(world, p1, p2) {\n      var bodies = this.axisList;\n      var N = bodies.length;\n      var axisIndex = this.axisIndex;\n      var i;\n      var j;\n      if (this.dirty) {\n        this.sortList();\n        this.dirty = false;\n      } // Look through the list\n\n      for (i = 0; i !== N; i++) {\n        var bi = bodies[i];\n        for (j = i + 1; j < N; j++) {\n          var bj = bodies[j];\n          if (!this.needBroadphaseCollision(bi, bj)) {\n            continue;\n          }\n          if (!SAPBroadphase.checkBounds(bi, bj, axisIndex)) {\n            break;\n          }\n          this.intersectionTest(bi, bj, p1, p2);\n        }\n      }\n    }\n  }, {\n    key: \"sortList\",\n    value: function sortList() {\n      var axisList = this.axisList;\n      var axisIndex = this.axisIndex;\n      var N = axisList.length; // Update AABBs\n\n      for (var i = 0; i !== N; i++) {\n        var bi = axisList[i];\n        if (bi.aabbNeedsUpdate) {\n          bi.updateAABB();\n        }\n      } // Sort the list\n\n      if (axisIndex === 0) {\n        SAPBroadphase.insertionSortX(axisList);\n      } else if (axisIndex === 1) {\n        SAPBroadphase.insertionSortY(axisList);\n      } else if (axisIndex === 2) {\n        SAPBroadphase.insertionSortZ(axisList);\n      }\n    }\n    /**\n     * Computes the variance of the body positions and estimates the best axis to use.\n     * Will automatically set property `axisIndex`.\n     */\n  }, {\n    key: \"autoDetectAxis\",\n    value: function autoDetectAxis() {\n      var sumX = 0;\n      var sumX2 = 0;\n      var sumY = 0;\n      var sumY2 = 0;\n      var sumZ = 0;\n      var sumZ2 = 0;\n      var bodies = this.axisList;\n      var N = bodies.length;\n      var invN = 1 / N;\n      for (var i = 0; i !== N; i++) {\n        var _b4 = bodies[i];\n        var centerX = _b4.position.x;\n        sumX += centerX;\n        sumX2 += centerX * centerX;\n        var centerY = _b4.position.y;\n        sumY += centerY;\n        sumY2 += centerY * centerY;\n        var centerZ = _b4.position.z;\n        sumZ += centerZ;\n        sumZ2 += centerZ * centerZ;\n      }\n      var varianceX = sumX2 - sumX * sumX * invN;\n      var varianceY = sumY2 - sumY * sumY * invN;\n      var varianceZ = sumZ2 - sumZ * sumZ * invN;\n      if (varianceX > varianceY) {\n        if (varianceX > varianceZ) {\n          this.axisIndex = 0;\n        } else {\n          this.axisIndex = 2;\n        }\n      } else if (varianceY > varianceZ) {\n        this.axisIndex = 1;\n      } else {\n        this.axisIndex = 2;\n      }\n    }\n    /**\n     * Returns all the bodies within an AABB.\n     * @param result An array to store resulting bodies in.\n     */\n  }, {\n    key: \"aabbQuery\",\n    value: function aabbQuery(world, aabb, result) {\n      if (result === void 0) {\n        result = [];\n      }\n      if (this.dirty) {\n        this.sortList();\n        this.dirty = false;\n      }\n      var axisIndex = this.axisIndex;\n      var axis = 'x';\n      if (axisIndex === 1) {\n        axis = 'y';\n      }\n      if (axisIndex === 2) {\n        axis = 'z';\n      }\n      var axisList = this.axisList;\n      aabb.lowerBound[axis];\n      aabb.upperBound[axis];\n      for (var i = 0; i < axisList.length; i++) {\n        var _b5 = axisList[i];\n        if (_b5.aabbNeedsUpdate) {\n          _b5.updateAABB();\n        }\n        if (_b5.aabb.overlaps(aabb)) {\n          result.push(_b5);\n        }\n      }\n      return result;\n    }\n  }], [{\n    key: \"checkBounds\",\n    value:\n    /**\n     * List of bodies currently in the broadphase.\n     */\n\n    /**\n     * The world to search in.\n     */\n\n    /**\n     * Axis to sort the bodies along.\n     * Set to 0 for x axis, and 1 for y axis.\n     * For best performance, pick the axis where bodies are most distributed.\n     */\n\n    /**\n     * Check if the bounds of two bodies overlap, along the given SAP axis.\n     */\n    function checkBounds(bi, bj, axisIndex) {\n      var biPos;\n      var bjPos;\n      if (axisIndex === 0) {\n        biPos = bi.position.x;\n        bjPos = bj.position.x;\n      } else if (axisIndex === 1) {\n        biPos = bi.position.y;\n        bjPos = bj.position.y;\n      } else if (axisIndex === 2) {\n        biPos = bi.position.z;\n        bjPos = bj.position.z;\n      }\n      var ri = bi.boundingRadius,\n        rj = bj.boundingRadius,\n        boundA2 = biPos + ri,\n        boundB1 = bjPos - rj;\n      return boundB1 < boundA2;\n    } // Note: these are identical, save for x/y/z lowerbound\n\n    /**\n     * insertionSortX\n     */\n  }, {\n    key: \"insertionSortX\",\n    value: function insertionSortX(a) {\n      for (var i = 1, l = a.length; i < l; i++) {\n        var v = a[i];\n        var j = void 0;\n        for (j = i - 1; j >= 0; j--) {\n          if (a[j].aabb.lowerBound.x <= v.aabb.lowerBound.x) {\n            break;\n          }\n          a[j + 1] = a[j];\n        }\n        a[j + 1] = v;\n      }\n      return a;\n    }\n    /**\n     * insertionSortY\n     */\n  }, {\n    key: \"insertionSortY\",\n    value: function insertionSortY(a) {\n      for (var i = 1, l = a.length; i < l; i++) {\n        var v = a[i];\n        var j = void 0;\n        for (j = i - 1; j >= 0; j--) {\n          if (a[j].aabb.lowerBound.y <= v.aabb.lowerBound.y) {\n            break;\n          }\n          a[j + 1] = a[j];\n        }\n        a[j + 1] = v;\n      }\n      return a;\n    }\n    /**\n     * insertionSortZ\n     */\n  }, {\n    key: \"insertionSortZ\",\n    value: function insertionSortZ(a) {\n      for (var i = 1, l = a.length; i < l; i++) {\n        var v = a[i];\n        var j = void 0;\n        for (j = i - 1; j >= 0; j--) {\n          if (a[j].aabb.lowerBound.z <= v.aabb.lowerBound.z) {\n            break;\n          }\n          a[j + 1] = a[j];\n        }\n        a[j + 1] = v;\n      }\n      return a;\n    }\n  }]);\n  return SAPBroadphase;\n}(Broadphase);\nvar Utils = /*#__PURE__*/function () {\n  function Utils() {\n    _classCallCheck(this, Utils);\n  }\n  _createClass(Utils, null, [{\n    key: \"defaults\",\n    value:\n    /**\n     * Extend an options object with default values.\n     * @param options The options object. May be falsy: in this case, a new object is created and returned.\n     * @param defaults An object containing default values.\n     * @return The modified options object.\n     */\n    function defaults(options, _defaults) {\n      if (options === void 0) {\n        options = {};\n      }\n      for (var key in _defaults) {\n        if (!(key in options)) {\n          options[key] = _defaults[key];\n        }\n      }\n      return options;\n    }\n  }]);\n  return Utils;\n}();\n/**\n * Constraint base class\n */\nvar Constraint = /*#__PURE__*/function () {\n  /**\n   * Equations to be solved in this constraint.\n   */\n\n  /**\n   * Body A.\n   */\n\n  /**\n   * Body B.\n   */\n\n  /**\n   * Set to false if you don't want the bodies to collide when they are connected.\n   */\n  function Constraint(bodyA, bodyB, options) {\n    _classCallCheck(this, Constraint);\n    if (options === void 0) {\n      options = {};\n    }\n    options = Utils.defaults(options, {\n      collideConnected: true,\n      wakeUpBodies: true\n    });\n    this.equations = [];\n    this.bodyA = bodyA;\n    this.bodyB = bodyB;\n    this.id = Constraint.idCounter++;\n    this.collideConnected = options.collideConnected;\n    if (options.wakeUpBodies) {\n      if (bodyA) {\n        bodyA.wakeUp();\n      }\n      if (bodyB) {\n        bodyB.wakeUp();\n      }\n    }\n  }\n  /**\n   * Update all the equations with data.\n   */\n  _createClass(Constraint, [{\n    key: \"update\",\n    value: function update() {\n      throw new Error('method update() not implmemented in this Constraint subclass!');\n    }\n    /**\n     * Enables all equations in the constraint.\n     */\n  }, {\n    key: \"enable\",\n    value: function enable() {\n      var eqs = this.equations;\n      for (var i = 0; i < eqs.length; i++) {\n        eqs[i].enabled = true;\n      }\n    }\n    /**\n     * Disables all equations in the constraint.\n     */\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      var eqs = this.equations;\n      for (var i = 0; i < eqs.length; i++) {\n        eqs[i].enabled = false;\n      }\n    }\n  }]);\n  return Constraint;\n}();\nConstraint.idCounter = 0;\n\n/**\n * An element containing 6 entries, 3 spatial and 3 rotational degrees of freedom.\n */\nvar JacobianElement = /*#__PURE__*/function () {\n  /**\n   * spatial\n   */\n\n  /**\n   * rotational\n   */\n  function JacobianElement() {\n    _classCallCheck(this, JacobianElement);\n    this.spatial = new Vec3();\n    this.rotational = new Vec3();\n  }\n  /**\n   * Multiply with other JacobianElement\n   */\n  _createClass(JacobianElement, [{\n    key: \"multiplyElement\",\n    value: function multiplyElement(element) {\n      return element.spatial.dot(this.spatial) + element.rotational.dot(this.rotational);\n    }\n    /**\n     * Multiply with two vectors\n     */\n  }, {\n    key: \"multiplyVectors\",\n    value: function multiplyVectors(spatial, rotational) {\n      return spatial.dot(this.spatial) + rotational.dot(this.rotational);\n    }\n  }]);\n  return JacobianElement;\n}();\n/**\n * Equation base class.\n *\n * `a`, `b` and `eps` are {@link https://www8.cs.umu.se/kurser/5DV058/VT15/lectures/SPOOKlabnotes.pdf SPOOK} parameters that default to `0.0`. See {@link https://github.com/schteppe/cannon.js/issues/238#issuecomment-147172327 this exchange} for more details on Cannon's physics implementation.\n */\nvar Equation = /*#__PURE__*/function () {\n  /**\n   * Minimum (read: negative max) force to be applied by the constraint.\n   */\n\n  /**\n   * Maximum (read: positive max) force to be applied by the constraint.\n   */\n\n  /**\n   * SPOOK parameter\n   */\n\n  /**\n   * SPOOK parameter\n   */\n\n  /**\n   * SPOOK parameter\n   */\n\n  /**\n   * A number, proportional to the force added to the bodies.\n   */\n  function Equation(bi, bj, minForce, maxForce) {\n    _classCallCheck(this, Equation);\n    if (minForce === void 0) {\n      minForce = -1e6;\n    }\n    if (maxForce === void 0) {\n      maxForce = 1e6;\n    }\n    this.id = Equation.idCounter++;\n    this.minForce = minForce;\n    this.maxForce = maxForce;\n    this.bi = bi;\n    this.bj = bj;\n    this.a = 0.0; // SPOOK parameter\n\n    this.b = 0.0; // SPOOK parameter\n\n    this.eps = 0.0; // SPOOK parameter\n\n    this.jacobianElementA = new JacobianElement();\n    this.jacobianElementB = new JacobianElement();\n    this.enabled = true;\n    this.multiplier = 0;\n    this.setSpookParams(1e7, 4, 1 / 60); // Set typical spook params\n  }\n  /**\n   * Recalculates a, b, and eps.\n   *\n   * The Equation constructor sets typical SPOOK parameters as such:\n   * * `stiffness` = 1e7\n   * * `relaxation` = 4\n   * * `timeStep`= 1 / 60, _note the hardcoded refresh rate._\n   */\n  _createClass(Equation, [{\n    key: \"setSpookParams\",\n    value: function setSpookParams(stiffness, relaxation, timeStep) {\n      var d = relaxation;\n      var k = stiffness;\n      var h = timeStep;\n      this.a = 4.0 / (h * (1 + 4 * d));\n      this.b = 4.0 * d / (1 + 4 * d);\n      this.eps = 4.0 / (h * h * k * (1 + 4 * d));\n    }\n    /**\n     * Computes the right hand side of the SPOOK equation\n     */\n  }, {\n    key: \"computeB\",\n    value: function computeB(a, b, h) {\n      var GW = this.computeGW();\n      var Gq = this.computeGq();\n      var GiMf = this.computeGiMf();\n      return -Gq * a - GW * b - GiMf * h;\n    }\n    /**\n     * Computes G*q, where q are the generalized body coordinates\n     */\n  }, {\n    key: \"computeGq\",\n    value: function computeGq() {\n      var GA = this.jacobianElementA;\n      var GB = this.jacobianElementB;\n      var bi = this.bi;\n      var bj = this.bj;\n      var xi = bi.position;\n      var xj = bj.position;\n      return GA.spatial.dot(xi) + GB.spatial.dot(xj);\n    }\n    /**\n     * Computes G*W, where W are the body velocities\n     */\n  }, {\n    key: \"computeGW\",\n    value: function computeGW() {\n      var GA = this.jacobianElementA;\n      var GB = this.jacobianElementB;\n      var bi = this.bi;\n      var bj = this.bj;\n      var vi = bi.velocity;\n      var vj = bj.velocity;\n      var wi = bi.angularVelocity;\n      var wj = bj.angularVelocity;\n      return GA.multiplyVectors(vi, wi) + GB.multiplyVectors(vj, wj);\n    }\n    /**\n     * Computes G*Wlambda, where W are the body velocities\n     */\n  }, {\n    key: \"computeGWlambda\",\n    value: function computeGWlambda() {\n      var GA = this.jacobianElementA;\n      var GB = this.jacobianElementB;\n      var bi = this.bi;\n      var bj = this.bj;\n      var vi = bi.vlambda;\n      var vj = bj.vlambda;\n      var wi = bi.wlambda;\n      var wj = bj.wlambda;\n      return GA.multiplyVectors(vi, wi) + GB.multiplyVectors(vj, wj);\n    }\n    /**\n     * Computes G*inv(M)*f, where M is the mass matrix with diagonal blocks for each body, and f are the forces on the bodies.\n     */\n  }, {\n    key: \"computeGiMf\",\n    value: function computeGiMf() {\n      var GA = this.jacobianElementA;\n      var GB = this.jacobianElementB;\n      var bi = this.bi;\n      var bj = this.bj;\n      var fi = bi.force;\n      var ti = bi.torque;\n      var fj = bj.force;\n      var tj = bj.torque;\n      var invMassi = bi.invMassSolve;\n      var invMassj = bj.invMassSolve;\n      fi.scale(invMassi, iMfi);\n      fj.scale(invMassj, iMfj);\n      bi.invInertiaWorldSolve.vmult(ti, invIi_vmult_taui);\n      bj.invInertiaWorldSolve.vmult(tj, invIj_vmult_tauj);\n      return GA.multiplyVectors(iMfi, invIi_vmult_taui) + GB.multiplyVectors(iMfj, invIj_vmult_tauj);\n    }\n    /**\n     * Computes G*inv(M)*G'\n     */\n  }, {\n    key: \"computeGiMGt\",\n    value: function computeGiMGt() {\n      var GA = this.jacobianElementA;\n      var GB = this.jacobianElementB;\n      var bi = this.bi;\n      var bj = this.bj;\n      var invMassi = bi.invMassSolve;\n      var invMassj = bj.invMassSolve;\n      var invIi = bi.invInertiaWorldSolve;\n      var invIj = bj.invInertiaWorldSolve;\n      var result = invMassi + invMassj;\n      invIi.vmult(GA.rotational, tmp);\n      result += tmp.dot(GA.rotational);\n      invIj.vmult(GB.rotational, tmp);\n      result += tmp.dot(GB.rotational);\n      return result;\n    }\n    /**\n     * Add constraint velocity to the bodies.\n     */\n  }, {\n    key: \"addToWlambda\",\n    value: function addToWlambda(deltalambda) {\n      var GA = this.jacobianElementA;\n      var GB = this.jacobianElementB;\n      var bi = this.bi;\n      var bj = this.bj;\n      var temp = addToWlambda_temp; // Add to linear velocity\n      // v_lambda += inv(M) * delta_lamba * G\n\n      bi.vlambda.addScaledVector(bi.invMassSolve * deltalambda, GA.spatial, bi.vlambda);\n      bj.vlambda.addScaledVector(bj.invMassSolve * deltalambda, GB.spatial, bj.vlambda); // Add to angular velocity\n\n      bi.invInertiaWorldSolve.vmult(GA.rotational, temp);\n      bi.wlambda.addScaledVector(deltalambda, temp, bi.wlambda);\n      bj.invInertiaWorldSolve.vmult(GB.rotational, temp);\n      bj.wlambda.addScaledVector(deltalambda, temp, bj.wlambda);\n    }\n    /**\n     * Compute the denominator part of the SPOOK equation: C = G*inv(M)*G' + eps\n     */\n  }, {\n    key: \"computeC\",\n    value: function computeC() {\n      return this.computeGiMGt() + this.eps;\n    }\n  }]);\n  return Equation;\n}();\nEquation.idCounter = 0;\nvar iMfi = new Vec3();\nvar iMfj = new Vec3();\nvar invIi_vmult_taui = new Vec3();\nvar invIj_vmult_tauj = new Vec3();\nvar tmp = new Vec3();\nvar addToWlambda_temp = new Vec3();\n\n/**\n * Contact/non-penetration constraint equation\n */\nvar ContactEquation = /*#__PURE__*/function (_Equation) {\n  _inherits(ContactEquation, _Equation);\n  var _super7 = _createSuper(ContactEquation);\n  /**\n   * \"bounciness\": u1 = -e*u0\n   */\n\n  /**\n   * World-oriented vector that goes from the center of bi to the contact point.\n   */\n\n  /**\n   * World-oriented vector that starts in body j position and goes to the contact point.\n   */\n\n  /**\n   * Contact normal, pointing out of body i.\n   */\n  function ContactEquation(bodyA, bodyB, maxForce) {\n    var _this6;\n    _classCallCheck(this, ContactEquation);\n    if (maxForce === void 0) {\n      maxForce = 1e6;\n    }\n    _this6 = _super7.call(this, bodyA, bodyB, 0, maxForce);\n    _this6.restitution = 0.0;\n    _this6.ri = new Vec3();\n    _this6.rj = new Vec3();\n    _this6.ni = new Vec3();\n    return _this6;\n  }\n  _createClass(ContactEquation, [{\n    key: \"computeB\",\n    value: function computeB(h) {\n      var a = this.a;\n      var b = this.b;\n      var bi = this.bi;\n      var bj = this.bj;\n      var ri = this.ri;\n      var rj = this.rj;\n      var rixn = ContactEquation_computeB_temp1;\n      var rjxn = ContactEquation_computeB_temp2;\n      var vi = bi.velocity;\n      var wi = bi.angularVelocity;\n      bi.force;\n      bi.torque;\n      var vj = bj.velocity;\n      var wj = bj.angularVelocity;\n      bj.force;\n      bj.torque;\n      var penetrationVec = ContactEquation_computeB_temp3;\n      var GA = this.jacobianElementA;\n      var GB = this.jacobianElementB;\n      var n = this.ni; // Caluclate cross products\n\n      ri.cross(n, rixn);\n      rj.cross(n, rjxn); // g = xj+rj -(xi+ri)\n      // G = [ -ni  -rixn  ni  rjxn ]\n\n      n.negate(GA.spatial);\n      rixn.negate(GA.rotational);\n      GB.spatial.copy(n);\n      GB.rotational.copy(rjxn); // Calculate the penetration vector\n\n      penetrationVec.copy(bj.position);\n      penetrationVec.vadd(rj, penetrationVec);\n      penetrationVec.vsub(bi.position, penetrationVec);\n      penetrationVec.vsub(ri, penetrationVec);\n      var g = n.dot(penetrationVec); // Compute iteration\n\n      var ePlusOne = this.restitution + 1;\n      var GW = ePlusOne * vj.dot(n) - ePlusOne * vi.dot(n) + wj.dot(rjxn) - wi.dot(rixn);\n      var GiMf = this.computeGiMf();\n      var B = -g * a - GW * b - h * GiMf;\n      return B;\n    }\n    /**\n     * Get the current relative velocity in the contact point.\n     */\n  }, {\n    key: \"getImpactVelocityAlongNormal\",\n    value: function getImpactVelocityAlongNormal() {\n      var vi = ContactEquation_getImpactVelocityAlongNormal_vi;\n      var vj = ContactEquation_getImpactVelocityAlongNormal_vj;\n      var xi = ContactEquation_getImpactVelocityAlongNormal_xi;\n      var xj = ContactEquation_getImpactVelocityAlongNormal_xj;\n      var relVel = ContactEquation_getImpactVelocityAlongNormal_relVel;\n      this.bi.position.vadd(this.ri, xi);\n      this.bj.position.vadd(this.rj, xj);\n      this.bi.getVelocityAtWorldPoint(xi, vi);\n      this.bj.getVelocityAtWorldPoint(xj, vj);\n      vi.vsub(vj, relVel);\n      return this.ni.dot(relVel);\n    }\n  }]);\n  return ContactEquation;\n}(Equation);\nvar ContactEquation_computeB_temp1 = new Vec3(); // Temp vectors\n\nvar ContactEquation_computeB_temp2 = new Vec3();\nvar ContactEquation_computeB_temp3 = new Vec3();\nvar ContactEquation_getImpactVelocityAlongNormal_vi = new Vec3();\nvar ContactEquation_getImpactVelocityAlongNormal_vj = new Vec3();\nvar ContactEquation_getImpactVelocityAlongNormal_xi = new Vec3();\nvar ContactEquation_getImpactVelocityAlongNormal_xj = new Vec3();\nvar ContactEquation_getImpactVelocityAlongNormal_relVel = new Vec3();\n\n/**\n * Connects two bodies at given offset points.\n * @example\n *     const bodyA = new Body({ mass: 1 })\n *     const bodyB = new Body({ mass: 1 })\n *     bodyA.position.set(-1, 0, 0)\n *     bodyB.position.set(1, 0, 0)\n *     bodyA.addShape(shapeA)\n *     bodyB.addShape(shapeB)\n *     world.addBody(bodyA)\n *     world.addBody(bodyB)\n *     const localPivotA = new Vec3(1, 0, 0)\n *     const localPivotB = new Vec3(-1, 0, 0)\n *     const constraint = new PointToPointConstraint(bodyA, localPivotA, bodyB, localPivotB)\n *     world.addConstraint(constraint)\n */\nvar PointToPointConstraint = /*#__PURE__*/function (_Constraint) {\n  _inherits(PointToPointConstraint, _Constraint);\n  var _super8 = _createSuper(PointToPointConstraint);\n  /**\n   * Pivot, defined locally in bodyA.\n   */\n\n  /**\n   * Pivot, defined locally in bodyB.\n   */\n\n  /**\n   * @param pivotA The point relative to the center of mass of bodyA which bodyA is constrained to.\n   * @param bodyB Body that will be constrained in a similar way to the same point as bodyA. We will therefore get a link between bodyA and bodyB. If not specified, bodyA will be constrained to a static point.\n   * @param pivotB The point relative to the center of mass of bodyB which bodyB is constrained to.\n   * @param maxForce The maximum force that should be applied to constrain the bodies.\n   */\n  function PointToPointConstraint(bodyA, pivotA, bodyB, pivotB, maxForce) {\n    var _this7;\n    _classCallCheck(this, PointToPointConstraint);\n    if (pivotA === void 0) {\n      pivotA = new Vec3();\n    }\n    if (pivotB === void 0) {\n      pivotB = new Vec3();\n    }\n    if (maxForce === void 0) {\n      maxForce = 1e6;\n    }\n    _this7 = _super8.call(this, bodyA, bodyB);\n    _this7.pivotA = pivotA.clone();\n    _this7.pivotB = pivotB.clone();\n    var x = _this7.equationX = new ContactEquation(bodyA, bodyB);\n    var y = _this7.equationY = new ContactEquation(bodyA, bodyB);\n    var z = _this7.equationZ = new ContactEquation(bodyA, bodyB); // Equations to be fed to the solver\n\n    _this7.equations.push(x, y, z); // Make the equations bidirectional\n\n    x.minForce = y.minForce = z.minForce = -maxForce;\n    x.maxForce = y.maxForce = z.maxForce = maxForce;\n    x.ni.set(1, 0, 0);\n    y.ni.set(0, 1, 0);\n    z.ni.set(0, 0, 1);\n    return _this7;\n  }\n  _createClass(PointToPointConstraint, [{\n    key: \"update\",\n    value: function update() {\n      var bodyA = this.bodyA;\n      var bodyB = this.bodyB;\n      var x = this.equationX;\n      var y = this.equationY;\n      var z = this.equationZ; // Rotate the pivots to world space\n\n      bodyA.quaternion.vmult(this.pivotA, x.ri);\n      bodyB.quaternion.vmult(this.pivotB, x.rj);\n      y.ri.copy(x.ri);\n      y.rj.copy(x.rj);\n      z.ri.copy(x.ri);\n      z.rj.copy(x.rj);\n    }\n  }]);\n  return PointToPointConstraint;\n}(Constraint);\n/**\n * Cone equation. Works to keep the given body world vectors aligned, or tilted within a given angle from each other.\n */\nvar ConeEquation = /*#__PURE__*/function (_Equation2) {\n  _inherits(ConeEquation, _Equation2);\n  var _super9 = _createSuper(ConeEquation);\n  /**\n   * Local axis in A\n   */\n\n  /**\n   * Local axis in B\n   */\n\n  /**\n   * The \"cone angle\" to keep\n   */\n  function ConeEquation(bodyA, bodyB, options) {\n    var _this8;\n    _classCallCheck(this, ConeEquation);\n    if (options === void 0) {\n      options = {};\n    }\n    var maxForce = typeof options.maxForce !== 'undefined' ? options.maxForce : 1e6;\n    _this8 = _super9.call(this, bodyA, bodyB, -maxForce, maxForce);\n    _this8.axisA = options.axisA ? options.axisA.clone() : new Vec3(1, 0, 0);\n    _this8.axisB = options.axisB ? options.axisB.clone() : new Vec3(0, 1, 0);\n    _this8.angle = typeof options.angle !== 'undefined' ? options.angle : 0;\n    return _this8;\n  }\n  _createClass(ConeEquation, [{\n    key: \"computeB\",\n    value: function computeB(h) {\n      var a = this.a;\n      var b = this.b;\n      var ni = this.axisA;\n      var nj = this.axisB;\n      var nixnj = tmpVec1$2;\n      var njxni = tmpVec2$2;\n      var GA = this.jacobianElementA;\n      var GB = this.jacobianElementB; // Caluclate cross products\n\n      ni.cross(nj, nixnj);\n      nj.cross(ni, njxni); // The angle between two vector is:\n      // cos(theta) = a * b / (length(a) * length(b) = { len(a) = len(b) = 1 } = a * b\n      // g = a * b\n      // gdot = (b x a) * wi + (a x b) * wj\n      // G = [0 bxa 0 axb]\n      // W = [vi wi vj wj]\n\n      GA.rotational.copy(njxni);\n      GB.rotational.copy(nixnj);\n      var g = Math.cos(this.angle) - ni.dot(nj);\n      var GW = this.computeGW();\n      var GiMf = this.computeGiMf();\n      var B = -g * a - GW * b - h * GiMf;\n      return B;\n    }\n  }]);\n  return ConeEquation;\n}(Equation);\nvar tmpVec1$2 = new Vec3();\nvar tmpVec2$2 = new Vec3();\n\n/**\n * Rotational constraint. Works to keep the local vectors orthogonal to each other in world space.\n */\nvar RotationalEquation = /*#__PURE__*/function (_Equation3) {\n  _inherits(RotationalEquation, _Equation3);\n  var _super10 = _createSuper(RotationalEquation);\n  /**\n   * World oriented rotational axis.\n   */\n\n  /**\n   * World oriented rotational axis.\n   */\n\n  /**\n   * maxAngle\n   */\n  function RotationalEquation(bodyA, bodyB, options) {\n    var _this9;\n    _classCallCheck(this, RotationalEquation);\n    if (options === void 0) {\n      options = {};\n    }\n    var maxForce = typeof options.maxForce !== 'undefined' ? options.maxForce : 1e6;\n    _this9 = _super10.call(this, bodyA, bodyB, -maxForce, maxForce);\n    _this9.axisA = options.axisA ? options.axisA.clone() : new Vec3(1, 0, 0);\n    _this9.axisB = options.axisB ? options.axisB.clone() : new Vec3(0, 1, 0);\n    _this9.maxAngle = Math.PI / 2;\n    return _this9;\n  }\n  _createClass(RotationalEquation, [{\n    key: \"computeB\",\n    value: function computeB(h) {\n      var a = this.a;\n      var b = this.b;\n      var ni = this.axisA;\n      var nj = this.axisB;\n      var nixnj = tmpVec1$1;\n      var njxni = tmpVec2$1;\n      var GA = this.jacobianElementA;\n      var GB = this.jacobianElementB; // Caluclate cross products\n\n      ni.cross(nj, nixnj);\n      nj.cross(ni, njxni); // g = ni * nj\n      // gdot = (nj x ni) * wi + (ni x nj) * wj\n      // G = [0 njxni 0 nixnj]\n      // W = [vi wi vj wj]\n\n      GA.rotational.copy(njxni);\n      GB.rotational.copy(nixnj);\n      var g = Math.cos(this.maxAngle) - ni.dot(nj);\n      var GW = this.computeGW();\n      var GiMf = this.computeGiMf();\n      var B = -g * a - GW * b - h * GiMf;\n      return B;\n    }\n  }]);\n  return RotationalEquation;\n}(Equation);\nvar tmpVec1$1 = new Vec3();\nvar tmpVec2$1 = new Vec3();\n\n/**\n * A Cone Twist constraint, useful for ragdolls.\n */\nvar ConeTwistConstraint = /*#__PURE__*/function (_PointToPointConstrai) {\n  _inherits(ConeTwistConstraint, _PointToPointConstrai);\n  var _super11 = _createSuper(ConeTwistConstraint);\n  /**\n   * The axis direction for the constraint of the body A.\n   */\n\n  /**\n   * The axis direction for the constraint of the body B.\n   */\n\n  /**\n   * The aperture angle of the cone.\n   */\n\n  /**\n   * The twist angle of the joint.\n   */\n  function ConeTwistConstraint(bodyA, bodyB, options) {\n    var _this10;\n    _classCallCheck(this, ConeTwistConstraint);\n    if (options === void 0) {\n      options = {};\n    }\n    var maxForce = typeof options.maxForce !== 'undefined' ? options.maxForce : 1e6; // Set pivot point in between\n\n    var pivotA = options.pivotA ? options.pivotA.clone() : new Vec3();\n    var pivotB = options.pivotB ? options.pivotB.clone() : new Vec3();\n    _this10 = _super11.call(this, bodyA, pivotA, bodyB, pivotB, maxForce);\n    _this10.axisA = options.axisA ? options.axisA.clone() : new Vec3();\n    _this10.axisB = options.axisB ? options.axisB.clone() : new Vec3();\n    _this10.collideConnected = !!options.collideConnected;\n    _this10.angle = typeof options.angle !== 'undefined' ? options.angle : 0;\n    var c = _this10.coneEquation = new ConeEquation(bodyA, bodyB, options);\n    var t = _this10.twistEquation = new RotationalEquation(bodyA, bodyB, options);\n    _this10.twistAngle = typeof options.twistAngle !== 'undefined' ? options.twistAngle : 0; // Make the cone equation push the bodies toward the cone axis, not outward\n\n    c.maxForce = 0;\n    c.minForce = -maxForce; // Make the twist equation add torque toward the initial position\n\n    t.maxForce = 0;\n    t.minForce = -maxForce;\n    _this10.equations.push(c, t);\n    return _this10;\n  }\n  _createClass(ConeTwistConstraint, [{\n    key: \"update\",\n    value: function update() {\n      var bodyA = this.bodyA;\n      var bodyB = this.bodyB;\n      var cone = this.coneEquation;\n      var twist = this.twistEquation;\n      _get(_getPrototypeOf(ConeTwistConstraint.prototype), \"update\", this).call(this); // Update the axes to the cone constraint\n\n      bodyA.vectorToWorldFrame(this.axisA, cone.axisA);\n      bodyB.vectorToWorldFrame(this.axisB, cone.axisB); // Update the world axes in the twist constraint\n\n      this.axisA.tangents(twist.axisA, twist.axisA);\n      bodyA.vectorToWorldFrame(twist.axisA, twist.axisA);\n      this.axisB.tangents(twist.axisB, twist.axisB);\n      bodyB.vectorToWorldFrame(twist.axisB, twist.axisB);\n      cone.angle = this.angle;\n      twist.maxAngle = this.twistAngle;\n    }\n  }]);\n  return ConeTwistConstraint;\n}(PointToPointConstraint);\nnew Vec3();\nnew Vec3();\n\n/**\n * Constrains two bodies to be at a constant distance from each others center of mass.\n */\nvar DistanceConstraint = /*#__PURE__*/function (_Constraint2) {\n  _inherits(DistanceConstraint, _Constraint2);\n  var _super12 = _createSuper(DistanceConstraint);\n  /**\n   * The distance to keep. If undefined, it will be set to the current distance between bodyA and bodyB\n   */\n\n  /**\n   * @param distance The distance to keep. If undefined, it will be set to the current distance between bodyA and bodyB.\n   * @param maxForce The maximum force that should be applied to constrain the bodies.\n   */\n  function DistanceConstraint(bodyA, bodyB, distance, maxForce) {\n    var _this11;\n    _classCallCheck(this, DistanceConstraint);\n    if (maxForce === void 0) {\n      maxForce = 1e6;\n    }\n    _this11 = _super12.call(this, bodyA, bodyB);\n    if (typeof distance === 'undefined') {\n      distance = bodyA.position.distanceTo(bodyB.position);\n    }\n    _this11.distance = distance;\n    var eq = _this11.distanceEquation = new ContactEquation(bodyA, bodyB);\n    _this11.equations.push(eq); // Make it bidirectional\n\n    eq.minForce = -maxForce;\n    eq.maxForce = maxForce;\n    return _this11;\n  }\n  /**\n   * update\n   */\n  _createClass(DistanceConstraint, [{\n    key: \"update\",\n    value: function update() {\n      var bodyA = this.bodyA;\n      var bodyB = this.bodyB;\n      var eq = this.distanceEquation;\n      var halfDist = this.distance * 0.5;\n      var normal = eq.ni;\n      bodyB.position.vsub(bodyA.position, normal);\n      normal.normalize();\n      normal.scale(halfDist, eq.ri);\n      normal.scale(-halfDist, eq.rj);\n    }\n  }]);\n  return DistanceConstraint;\n}(Constraint);\n/**\n * Lock constraint. Will remove all degrees of freedom between the bodies.\n */\nvar LockConstraint = /*#__PURE__*/function (_PointToPointConstrai2) {\n  _inherits(LockConstraint, _PointToPointConstrai2);\n  var _super13 = _createSuper(LockConstraint);\n  function LockConstraint(bodyA, bodyB, options) {\n    var _this12;\n    _classCallCheck(this, LockConstraint);\n    if (options === void 0) {\n      options = {};\n    }\n    var maxForce = typeof options.maxForce !== 'undefined' ? options.maxForce : 1e6; // Set pivot point in between\n\n    var pivotA = new Vec3();\n    var pivotB = new Vec3();\n    var halfWay = new Vec3();\n    bodyA.position.vadd(bodyB.position, halfWay);\n    halfWay.scale(0.5, halfWay);\n    bodyB.pointToLocalFrame(halfWay, pivotB);\n    bodyA.pointToLocalFrame(halfWay, pivotA); // The point-to-point constraint will keep a point shared between the bodies\n\n    _this12 = _super13.call(this, bodyA, pivotA, bodyB, pivotB, maxForce); // Store initial rotation of the bodies as unit vectors in the local body spaces\n\n    _this12.xA = bodyA.vectorToLocalFrame(Vec3.UNIT_X);\n    _this12.xB = bodyB.vectorToLocalFrame(Vec3.UNIT_X);\n    _this12.yA = bodyA.vectorToLocalFrame(Vec3.UNIT_Y);\n    _this12.yB = bodyB.vectorToLocalFrame(Vec3.UNIT_Y);\n    _this12.zA = bodyA.vectorToLocalFrame(Vec3.UNIT_Z);\n    _this12.zB = bodyB.vectorToLocalFrame(Vec3.UNIT_Z); // ...and the following rotational equations will keep all rotational DOF's in place\n\n    var r1 = _this12.rotationalEquation1 = new RotationalEquation(bodyA, bodyB, options);\n    var r2 = _this12.rotationalEquation2 = new RotationalEquation(bodyA, bodyB, options);\n    var r3 = _this12.rotationalEquation3 = new RotationalEquation(bodyA, bodyB, options);\n    _this12.equations.push(r1, r2, r3);\n    return _this12;\n  }\n  /**\n   * update\n   */\n  _createClass(LockConstraint, [{\n    key: \"update\",\n    value: function update() {\n      var bodyA = this.bodyA;\n      var bodyB = this.bodyB;\n      this.motorEquation;\n      var r1 = this.rotationalEquation1;\n      var r2 = this.rotationalEquation2;\n      var r3 = this.rotationalEquation3;\n      LockConstraint_update_tmpVec1;\n      LockConstraint_update_tmpVec2;\n      _get(_getPrototypeOf(LockConstraint.prototype), \"update\", this).call(this); // These vector pairs must be orthogonal\n\n      bodyA.vectorToWorldFrame(this.xA, r1.axisA);\n      bodyB.vectorToWorldFrame(this.yB, r1.axisB);\n      bodyA.vectorToWorldFrame(this.yA, r2.axisA);\n      bodyB.vectorToWorldFrame(this.zB, r2.axisB);\n      bodyA.vectorToWorldFrame(this.zA, r3.axisA);\n      bodyB.vectorToWorldFrame(this.xB, r3.axisB);\n    }\n  }]);\n  return LockConstraint;\n}(PointToPointConstraint);\nvar LockConstraint_update_tmpVec1 = new Vec3();\nvar LockConstraint_update_tmpVec2 = new Vec3();\n\n/**\n * Rotational motor constraint. Tries to keep the relative angular velocity of the bodies to a given value.\n */\nvar RotationalMotorEquation = /*#__PURE__*/function (_Equation4) {\n  _inherits(RotationalMotorEquation, _Equation4);\n  var _super14 = _createSuper(RotationalMotorEquation);\n  /**\n   * World oriented rotational axis.\n   */\n\n  /**\n   * World oriented rotational axis.\n   */\n\n  /**\n   * Motor velocity.\n   */\n  function RotationalMotorEquation(bodyA, bodyB, maxForce) {\n    var _this13;\n    _classCallCheck(this, RotationalMotorEquation);\n    if (maxForce === void 0) {\n      maxForce = 1e6;\n    }\n    _this13 = _super14.call(this, bodyA, bodyB, -maxForce, maxForce);\n    _this13.axisA = new Vec3();\n    _this13.axisB = new Vec3();\n    _this13.targetVelocity = 0;\n    return _this13;\n  }\n  _createClass(RotationalMotorEquation, [{\n    key: \"computeB\",\n    value: function computeB(h) {\n      this.a;\n      var b = this.b;\n      this.bi;\n      this.bj;\n      var axisA = this.axisA;\n      var axisB = this.axisB;\n      var GA = this.jacobianElementA;\n      var GB = this.jacobianElementB; // g = 0\n      // gdot = axisA * wi - axisB * wj\n      // gdot = G * W = G * [vi wi vj wj]\n      // =>\n      // G = [0 axisA 0 -axisB]\n\n      GA.rotational.copy(axisA);\n      axisB.negate(GB.rotational);\n      var GW = this.computeGW() - this.targetVelocity;\n      var GiMf = this.computeGiMf();\n      var B = -GW * b - h * GiMf;\n      return B;\n    }\n  }]);\n  return RotationalMotorEquation;\n}(Equation);\n/**\n * Hinge constraint. Think of it as a door hinge. It tries to keep the door in the correct place and with the correct orientation.\n */\nvar HingeConstraint = /*#__PURE__*/function (_PointToPointConstrai3) {\n  _inherits(HingeConstraint, _PointToPointConstrai3);\n  var _super15 = _createSuper(HingeConstraint);\n  /**\n   * Rotation axis, defined locally in bodyA.\n   */\n\n  /**\n   * Rotation axis, defined locally in bodyB.\n   */\n  function HingeConstraint(bodyA, bodyB, options) {\n    var _this14;\n    _classCallCheck(this, HingeConstraint);\n    if (options === void 0) {\n      options = {};\n    }\n    var maxForce = typeof options.maxForce !== 'undefined' ? options.maxForce : 1e6;\n    var pivotA = options.pivotA ? options.pivotA.clone() : new Vec3();\n    var pivotB = options.pivotB ? options.pivotB.clone() : new Vec3();\n    _this14 = _super15.call(this, bodyA, pivotA, bodyB, pivotB, maxForce);\n    var axisA = _this14.axisA = options.axisA ? options.axisA.clone() : new Vec3(1, 0, 0);\n    axisA.normalize();\n    var axisB = _this14.axisB = options.axisB ? options.axisB.clone() : new Vec3(1, 0, 0);\n    axisB.normalize();\n    _this14.collideConnected = !!options.collideConnected;\n    var rotational1 = _this14.rotationalEquation1 = new RotationalEquation(bodyA, bodyB, options);\n    var rotational2 = _this14.rotationalEquation2 = new RotationalEquation(bodyA, bodyB, options);\n    var motor = _this14.motorEquation = new RotationalMotorEquation(bodyA, bodyB, maxForce);\n    motor.enabled = false; // Not enabled by default\n    // Equations to be fed to the solver\n\n    _this14.equations.push(rotational1, rotational2, motor);\n    return _this14;\n  }\n  /**\n   * enableMotor\n   */\n  _createClass(HingeConstraint, [{\n    key: \"enableMotor\",\n    value: function enableMotor() {\n      this.motorEquation.enabled = true;\n    }\n    /**\n     * disableMotor\n     */\n  }, {\n    key: \"disableMotor\",\n    value: function disableMotor() {\n      this.motorEquation.enabled = false;\n    }\n    /**\n     * setMotorSpeed\n     */\n  }, {\n    key: \"setMotorSpeed\",\n    value: function setMotorSpeed(speed) {\n      this.motorEquation.targetVelocity = speed;\n    }\n    /**\n     * setMotorMaxForce\n     */\n  }, {\n    key: \"setMotorMaxForce\",\n    value: function setMotorMaxForce(maxForce) {\n      this.motorEquation.maxForce = maxForce;\n      this.motorEquation.minForce = -maxForce;\n    }\n    /**\n     * update\n     */\n  }, {\n    key: \"update\",\n    value: function update() {\n      var bodyA = this.bodyA;\n      var bodyB = this.bodyB;\n      var motor = this.motorEquation;\n      var r1 = this.rotationalEquation1;\n      var r2 = this.rotationalEquation2;\n      var worldAxisA = HingeConstraint_update_tmpVec1;\n      var worldAxisB = HingeConstraint_update_tmpVec2;\n      var axisA = this.axisA;\n      var axisB = this.axisB;\n      _get(_getPrototypeOf(HingeConstraint.prototype), \"update\", this).call(this); // Get world axes\n\n      bodyA.quaternion.vmult(axisA, worldAxisA);\n      bodyB.quaternion.vmult(axisB, worldAxisB);\n      worldAxisA.tangents(r1.axisA, r2.axisA);\n      r1.axisB.copy(worldAxisB);\n      r2.axisB.copy(worldAxisB);\n      if (this.motorEquation.enabled) {\n        bodyA.quaternion.vmult(this.axisA, motor.axisA);\n        bodyB.quaternion.vmult(this.axisB, motor.axisB);\n      }\n    }\n  }]);\n  return HingeConstraint;\n}(PointToPointConstraint);\nvar HingeConstraint_update_tmpVec1 = new Vec3();\nvar HingeConstraint_update_tmpVec2 = new Vec3();\n\n/**\n * Constrains the slipping in a contact along a tangent\n */\nvar FrictionEquation = /*#__PURE__*/function (_Equation5) {\n  _inherits(FrictionEquation, _Equation5);\n  var _super16 = _createSuper(FrictionEquation);\n  // Tangent\n\n  /**\n   * @param slipForce should be +-F_friction = +-mu * F_normal = +-mu * m * g\n   */\n  function FrictionEquation(bodyA, bodyB, slipForce) {\n    var _this15;\n    _classCallCheck(this, FrictionEquation);\n    _this15 = _super16.call(this, bodyA, bodyB, -slipForce, slipForce);\n    _this15.ri = new Vec3();\n    _this15.rj = new Vec3();\n    _this15.t = new Vec3();\n    return _this15;\n  }\n  _createClass(FrictionEquation, [{\n    key: \"computeB\",\n    value: function computeB(h) {\n      this.a;\n      var b = this.b;\n      this.bi;\n      this.bj;\n      var ri = this.ri;\n      var rj = this.rj;\n      var rixt = FrictionEquation_computeB_temp1;\n      var rjxt = FrictionEquation_computeB_temp2;\n      var t = this.t; // Caluclate cross products\n\n      ri.cross(t, rixt);\n      rj.cross(t, rjxt); // G = [-t -rixt t rjxt]\n      // And remember, this is a pure velocity constraint, g is always zero!\n\n      var GA = this.jacobianElementA;\n      var GB = this.jacobianElementB;\n      t.negate(GA.spatial);\n      rixt.negate(GA.rotational);\n      GB.spatial.copy(t);\n      GB.rotational.copy(rjxt);\n      var GW = this.computeGW();\n      var GiMf = this.computeGiMf();\n      var B = -GW * b - h * GiMf;\n      return B;\n    }\n  }]);\n  return FrictionEquation;\n}(Equation);\nvar FrictionEquation_computeB_temp1 = new Vec3();\nvar FrictionEquation_computeB_temp2 = new Vec3();\n\n/**\n * Defines what happens when two materials meet.\n * @todo Refactor materials to materialA and materialB\n */\nvar ContactMaterial = /*#__PURE__*/_createClass(\n/**\n * Identifier of this material.\n */\n\n/**\n * Participating materials.\n */\n\n/**\n * Friction coefficient.\n * @default 0.3\n */\n\n/**\n * Restitution coefficient.\n * @default 0.3\n */\n\n/**\n * Stiffness of the produced contact equations.\n * @default 1e7\n */\n\n/**\n * Relaxation time of the produced contact equations.\n * @default 3\n */\n\n/**\n * Stiffness of the produced friction equations.\n * @default 1e7\n */\n\n/**\n * Relaxation time of the produced friction equations\n * @default 3\n */\nfunction ContactMaterial(m1, m2, options) {\n  _classCallCheck(this, ContactMaterial);\n  options = Utils.defaults(options, {\n    friction: 0.3,\n    restitution: 0.3,\n    contactEquationStiffness: 1e7,\n    contactEquationRelaxation: 3,\n    frictionEquationStiffness: 1e7,\n    frictionEquationRelaxation: 3\n  });\n  this.id = ContactMaterial.idCounter++;\n  this.materials = [m1, m2];\n  this.friction = options.friction;\n  this.restitution = options.restitution;\n  this.contactEquationStiffness = options.contactEquationStiffness;\n  this.contactEquationRelaxation = options.contactEquationRelaxation;\n  this.frictionEquationStiffness = options.frictionEquationStiffness;\n  this.frictionEquationRelaxation = options.frictionEquationRelaxation;\n});\nContactMaterial.idCounter = 0;\n\n/**\n * Defines a physics material.\n */\nvar Material = /*#__PURE__*/_createClass(\n/**\n * Material name.\n * If options is a string, name will be set to that string.\n * @todo Deprecate this\n */\n\n/** Material id. */\n\n/**\n * Friction for this material.\n * If non-negative, it will be used instead of the friction given by ContactMaterials. If there's no matching ContactMaterial, the value from `defaultContactMaterial` in the World will be used.\n */\n\n/**\n * Restitution for this material.\n * If non-negative, it will be used instead of the restitution given by ContactMaterials. If there's no matching ContactMaterial, the value from `defaultContactMaterial` in the World will be used.\n */\nfunction Material(options) {\n  _classCallCheck(this, Material);\n  if (options === void 0) {\n    options = {};\n  }\n  var name = ''; // Backwards compatibility fix\n\n  if (typeof options === 'string') {\n    //console.warn(`Passing a string to MaterialOptions is deprecated, and has no effect`)\n    name = options;\n    options = {};\n  }\n  this.name = name;\n  this.id = Material.idCounter++;\n  this.friction = typeof options.friction !== 'undefined' ? options.friction : -1;\n  this.restitution = typeof options.restitution !== 'undefined' ? options.restitution : -1;\n});\nMaterial.idCounter = 0;\n\n/**\n * A spring, connecting two bodies.\n * @example\n *     const spring = new Spring(boxBody, sphereBody, {\n *       restLength: 0,\n *       stiffness: 50,\n *       damping: 1,\n *     })\n *\n *     // Compute the force after each step\n *     world.addEventListener('postStep', (event) => {\n *       spring.applyForce()\n *     })\n */\nvar Spring = /*#__PURE__*/function () {\n  /**\n   * Rest length of the spring. A number > 0.\n   * @default 1\n   */\n\n  /**\n   * Stiffness of the spring. A number >= 0.\n   * @default 100\n   */\n\n  /**\n   * Damping of the spring. A number >= 0.\n   * @default 1\n   */\n\n  /**\n   * First connected body.\n   */\n\n  /**\n   * Second connected body.\n   */\n\n  /**\n   * Anchor for bodyA in local bodyA coordinates.\n   * Where to hook the spring to body A, in local body coordinates.\n   * @default new Vec3()\n   */\n\n  /**\n   * Anchor for bodyB in local bodyB coordinates.\n   * Where to hook the spring to body B, in local body coordinates.\n   * @default new Vec3()\n   */\n  function Spring(bodyA, bodyB, options) {\n    _classCallCheck(this, Spring);\n    if (options === void 0) {\n      options = {};\n    }\n    this.restLength = typeof options.restLength === 'number' ? options.restLength : 1;\n    this.stiffness = options.stiffness || 100;\n    this.damping = options.damping || 1;\n    this.bodyA = bodyA;\n    this.bodyB = bodyB;\n    this.localAnchorA = new Vec3();\n    this.localAnchorB = new Vec3();\n    if (options.localAnchorA) {\n      this.localAnchorA.copy(options.localAnchorA);\n    }\n    if (options.localAnchorB) {\n      this.localAnchorB.copy(options.localAnchorB);\n    }\n    if (options.worldAnchorA) {\n      this.setWorldAnchorA(options.worldAnchorA);\n    }\n    if (options.worldAnchorB) {\n      this.setWorldAnchorB(options.worldAnchorB);\n    }\n  }\n  /**\n   * Set the anchor point on body A, using world coordinates.\n   */\n  _createClass(Spring, [{\n    key: \"setWorldAnchorA\",\n    value: function setWorldAnchorA(worldAnchorA) {\n      this.bodyA.pointToLocalFrame(worldAnchorA, this.localAnchorA);\n    }\n    /**\n     * Set the anchor point on body B, using world coordinates.\n     */\n  }, {\n    key: \"setWorldAnchorB\",\n    value: function setWorldAnchorB(worldAnchorB) {\n      this.bodyB.pointToLocalFrame(worldAnchorB, this.localAnchorB);\n    }\n    /**\n     * Get the anchor point on body A, in world coordinates.\n     * @param result The vector to store the result in.\n     */\n  }, {\n    key: \"getWorldAnchorA\",\n    value: function getWorldAnchorA(result) {\n      this.bodyA.pointToWorldFrame(this.localAnchorA, result);\n    }\n    /**\n     * Get the anchor point on body B, in world coordinates.\n     * @param result The vector to store the result in.\n     */\n  }, {\n    key: \"getWorldAnchorB\",\n    value: function getWorldAnchorB(result) {\n      this.bodyB.pointToWorldFrame(this.localAnchorB, result);\n    }\n    /**\n     * Apply the spring force to the connected bodies.\n     */\n  }, {\n    key: \"applyForce\",\n    value: function applyForce() {\n      var k = this.stiffness;\n      var d = this.damping;\n      var l = this.restLength;\n      var bodyA = this.bodyA;\n      var bodyB = this.bodyB;\n      var r = applyForce_r;\n      var r_unit = applyForce_r_unit;\n      var u = applyForce_u;\n      var f = applyForce_f;\n      var tmp = applyForce_tmp;\n      var worldAnchorA = applyForce_worldAnchorA;\n      var worldAnchorB = applyForce_worldAnchorB;\n      var ri = applyForce_ri;\n      var rj = applyForce_rj;\n      var ri_x_f = applyForce_ri_x_f;\n      var rj_x_f = applyForce_rj_x_f; // Get world anchors\n\n      this.getWorldAnchorA(worldAnchorA);\n      this.getWorldAnchorB(worldAnchorB); // Get offset points\n\n      worldAnchorA.vsub(bodyA.position, ri);\n      worldAnchorB.vsub(bodyB.position, rj); // Compute distance vector between world anchor points\n\n      worldAnchorB.vsub(worldAnchorA, r);\n      var rlen = r.length();\n      r_unit.copy(r);\n      r_unit.normalize(); // Compute relative velocity of the anchor points, u\n\n      bodyB.velocity.vsub(bodyA.velocity, u); // Add rotational velocity\n\n      bodyB.angularVelocity.cross(rj, tmp);\n      u.vadd(tmp, u);\n      bodyA.angularVelocity.cross(ri, tmp);\n      u.vsub(tmp, u); // F = - k * ( x - L ) - D * ( u )\n\n      r_unit.scale(-k * (rlen - l) - d * u.dot(r_unit), f); // Add forces to bodies\n\n      bodyA.force.vsub(f, bodyA.force);\n      bodyB.force.vadd(f, bodyB.force); // Angular force\n\n      ri.cross(f, ri_x_f);\n      rj.cross(f, rj_x_f);\n      bodyA.torque.vsub(ri_x_f, bodyA.torque);\n      bodyB.torque.vadd(rj_x_f, bodyB.torque);\n    }\n  }]);\n  return Spring;\n}();\nvar applyForce_r = new Vec3();\nvar applyForce_r_unit = new Vec3();\nvar applyForce_u = new Vec3();\nvar applyForce_f = new Vec3();\nvar applyForce_worldAnchorA = new Vec3();\nvar applyForce_worldAnchorB = new Vec3();\nvar applyForce_ri = new Vec3();\nvar applyForce_rj = new Vec3();\nvar applyForce_ri_x_f = new Vec3();\nvar applyForce_rj_x_f = new Vec3();\nvar applyForce_tmp = new Vec3();\n\n/**\n * WheelInfo\n */\nvar WheelInfo = /*#__PURE__*/function () {\n  /**\n   * Max travel distance of the suspension, in meters.\n   * @default 1\n   */\n\n  /**\n   * Speed to apply to the wheel rotation when the wheel is sliding.\n   * @default -0.1\n   */\n\n  /**\n   * If the customSlidingRotationalSpeed should be used.\n   * @default false\n   */\n\n  /**\n   * sliding\n   */\n\n  /**\n   * Connection point, defined locally in the chassis body frame.\n   */\n\n  /**\n   * chassisConnectionPointWorld\n   */\n\n  /**\n   * directionLocal\n   */\n\n  /**\n   * directionWorld\n   */\n\n  /**\n   * axleLocal\n   */\n\n  /**\n   * axleWorld\n   */\n\n  /**\n   * suspensionRestLength\n   * @default 1\n   */\n\n  /**\n   * suspensionMaxLength\n   * @default 2\n   */\n\n  /**\n   * radius\n   * @default 1\n   */\n\n  /**\n   * suspensionStiffness\n   * @default 100\n   */\n\n  /**\n   * dampingCompression\n   * @default 10\n   */\n\n  /**\n   * dampingRelaxation\n   * @default 10\n   */\n\n  /**\n   * frictionSlip\n   * @default 10.5\n   */\n\n  /** forwardAcceleration */\n\n  /** sideAcceleration */\n\n  /**\n   * steering\n   * @default 0\n   */\n\n  /**\n   * Rotation value, in radians.\n   * @default 0\n   */\n\n  /**\n   * deltaRotation\n   * @default 0\n   */\n\n  /**\n   * rollInfluence\n   * @default 0.01\n   */\n\n  /**\n   * maxSuspensionForce\n   */\n\n  /**\n   * engineForce\n   */\n\n  /**\n   * brake\n   */\n\n  /**\n   * isFrontWheel\n   * @default true\n   */\n\n  /**\n   * clippedInvContactDotSuspension\n   * @default 1\n   */\n\n  /**\n   * suspensionRelativeVelocity\n   * @default 0\n   */\n\n  /**\n   * suspensionForce\n   * @default 0\n   */\n\n  /**\n   * slipInfo\n   */\n\n  /**\n   * skidInfo\n   * @default 0\n   */\n\n  /**\n   * suspensionLength\n   * @default 0\n   */\n\n  /**\n   * sideImpulse\n   */\n\n  /**\n   * forwardImpulse\n   */\n\n  /**\n   * The result from raycasting.\n   */\n\n  /**\n   * Wheel world transform.\n   */\n\n  /**\n   * isInContact\n   */\n  function WheelInfo(options) {\n    _classCallCheck(this, WheelInfo);\n    if (options === void 0) {\n      options = {};\n    }\n    options = Utils.defaults(options, {\n      chassisConnectionPointLocal: new Vec3(),\n      chassisConnectionPointWorld: new Vec3(),\n      directionLocal: new Vec3(),\n      directionWorld: new Vec3(),\n      axleLocal: new Vec3(),\n      axleWorld: new Vec3(),\n      suspensionRestLength: 1,\n      suspensionMaxLength: 2,\n      radius: 1,\n      suspensionStiffness: 100,\n      dampingCompression: 10,\n      dampingRelaxation: 10,\n      frictionSlip: 10.5,\n      forwardAcceleration: 1,\n      sideAcceleration: 1,\n      steering: 0,\n      rotation: 0,\n      deltaRotation: 0,\n      rollInfluence: 0.01,\n      maxSuspensionForce: Number.MAX_VALUE,\n      isFrontWheel: true,\n      clippedInvContactDotSuspension: 1,\n      suspensionRelativeVelocity: 0,\n      suspensionForce: 0,\n      slipInfo: 0,\n      skidInfo: 0,\n      suspensionLength: 0,\n      maxSuspensionTravel: 1,\n      useCustomSlidingRotationalSpeed: false,\n      customSlidingRotationalSpeed: -0.1\n    });\n    this.maxSuspensionTravel = options.maxSuspensionTravel;\n    this.customSlidingRotationalSpeed = options.customSlidingRotationalSpeed;\n    this.useCustomSlidingRotationalSpeed = options.useCustomSlidingRotationalSpeed;\n    this.sliding = false;\n    this.chassisConnectionPointLocal = options.chassisConnectionPointLocal.clone();\n    this.chassisConnectionPointWorld = options.chassisConnectionPointWorld.clone();\n    this.directionLocal = options.directionLocal.clone();\n    this.directionWorld = options.directionWorld.clone();\n    this.axleLocal = options.axleLocal.clone();\n    this.axleWorld = options.axleWorld.clone();\n    this.suspensionRestLength = options.suspensionRestLength;\n    this.suspensionMaxLength = options.suspensionMaxLength;\n    this.radius = options.radius;\n    this.suspensionStiffness = options.suspensionStiffness;\n    this.dampingCompression = options.dampingCompression;\n    this.dampingRelaxation = options.dampingRelaxation;\n    this.frictionSlip = options.frictionSlip;\n    this.forwardAcceleration = options.forwardAcceleration;\n    this.sideAcceleration = options.sideAcceleration;\n    this.steering = 0;\n    this.rotation = 0;\n    this.deltaRotation = 0;\n    this.rollInfluence = options.rollInfluence;\n    this.maxSuspensionForce = options.maxSuspensionForce;\n    this.engineForce = 0;\n    this.brake = 0;\n    this.isFrontWheel = options.isFrontWheel;\n    this.clippedInvContactDotSuspension = 1;\n    this.suspensionRelativeVelocity = 0;\n    this.suspensionForce = 0;\n    this.slipInfo = 0;\n    this.skidInfo = 0;\n    this.suspensionLength = 0;\n    this.sideImpulse = 0;\n    this.forwardImpulse = 0;\n    this.raycastResult = new RaycastResult();\n    this.worldTransform = new Transform();\n    this.isInContact = false;\n  }\n  _createClass(WheelInfo, [{\n    key: \"updateWheel\",\n    value: function updateWheel(chassis) {\n      var raycastResult = this.raycastResult;\n      if (this.isInContact) {\n        var project = raycastResult.hitNormalWorld.dot(raycastResult.directionWorld);\n        raycastResult.hitPointWorld.vsub(chassis.position, relpos);\n        chassis.getVelocityAtWorldPoint(relpos, chassis_velocity_at_contactPoint);\n        var projVel = raycastResult.hitNormalWorld.dot(chassis_velocity_at_contactPoint);\n        if (project >= -0.1) {\n          this.suspensionRelativeVelocity = 0.0;\n          this.clippedInvContactDotSuspension = 1.0 / 0.1;\n        } else {\n          var inv = -1 / project;\n          this.suspensionRelativeVelocity = projVel * inv;\n          this.clippedInvContactDotSuspension = inv;\n        }\n      } else {\n        // Not in contact : position wheel in a nice (rest length) position\n        raycastResult.suspensionLength = this.suspensionRestLength;\n        this.suspensionRelativeVelocity = 0.0;\n        raycastResult.directionWorld.scale(-1, raycastResult.hitNormalWorld);\n        this.clippedInvContactDotSuspension = 1.0;\n      }\n    }\n  }]);\n  return WheelInfo;\n}();\nvar chassis_velocity_at_contactPoint = new Vec3();\nvar relpos = new Vec3();\n\n/**\n * Vehicle helper class that casts rays from the wheel positions towards the ground and applies forces.\n */\nvar RaycastVehicle = /*#__PURE__*/function () {\n  /** The car chassis body. */\n\n  /** The wheels. */\n\n  /** Will be set to true if the car is sliding. */\n\n  /** Index of the right axis. x=0, y=1, z=2 */\n\n  /** Index of the forward axis. x=0, y=1, z=2 */\n\n  /** Index of the up axis. x=0, y=1, z=2 */\n\n  /** The constraints. */\n\n  /** Optional pre-step callback. */\n\n  /** Number of wheels on the ground. */\n  function RaycastVehicle(options) {\n    _classCallCheck(this, RaycastVehicle);\n    this.chassisBody = options.chassisBody;\n    this.wheelInfos = [];\n    this.sliding = false;\n    this.world = null;\n    this.indexRightAxis = typeof options.indexRightAxis !== 'undefined' ? options.indexRightAxis : 2;\n    this.indexForwardAxis = typeof options.indexForwardAxis !== 'undefined' ? options.indexForwardAxis : 0;\n    this.indexUpAxis = typeof options.indexUpAxis !== 'undefined' ? options.indexUpAxis : 1;\n    this.constraints = [];\n    this.preStepCallback = function () {};\n    this.currentVehicleSpeedKmHour = 0;\n    this.numWheelsOnGround = 0;\n  }\n  /**\n   * Add a wheel. For information about the options, see `WheelInfo`.\n   */\n  _createClass(RaycastVehicle, [{\n    key: \"addWheel\",\n    value: function addWheel(options) {\n      if (options === void 0) {\n        options = {};\n      }\n      var info = new WheelInfo(options);\n      var index = this.wheelInfos.length;\n      this.wheelInfos.push(info);\n      return index;\n    }\n    /**\n     * Set the steering value of a wheel.\n     */\n  }, {\n    key: \"setSteeringValue\",\n    value: function setSteeringValue(value, wheelIndex) {\n      var wheel = this.wheelInfos[wheelIndex];\n      wheel.steering = value;\n    }\n    /**\n     * Set the wheel force to apply on one of the wheels each time step\n     */\n  }, {\n    key: \"applyEngineForce\",\n    value: function applyEngineForce(value, wheelIndex) {\n      this.wheelInfos[wheelIndex].engineForce = value;\n    }\n    /**\n     * Set the braking force of a wheel\n     */\n  }, {\n    key: \"setBrake\",\n    value: function setBrake(brake, wheelIndex) {\n      this.wheelInfos[wheelIndex].brake = brake;\n    }\n    /**\n     * Add the vehicle including its constraints to the world.\n     */\n  }, {\n    key: \"addToWorld\",\n    value: function addToWorld(world) {\n      world.addBody(this.chassisBody);\n      var that = this;\n      this.preStepCallback = function () {\n        that.updateVehicle(world.dt);\n      };\n      world.addEventListener('preStep', this.preStepCallback);\n      this.world = world;\n    }\n    /**\n     * Get one of the wheel axles, world-oriented.\n     */\n  }, {\n    key: \"getVehicleAxisWorld\",\n    value: function getVehicleAxisWorld(axisIndex, result) {\n      result.set(axisIndex === 0 ? 1 : 0, axisIndex === 1 ? 1 : 0, axisIndex === 2 ? 1 : 0);\n      this.chassisBody.vectorToWorldFrame(result, result);\n    }\n  }, {\n    key: \"updateVehicle\",\n    value: function updateVehicle(timeStep) {\n      var wheelInfos = this.wheelInfos;\n      var numWheels = wheelInfos.length;\n      var chassisBody = this.chassisBody;\n      for (var i = 0; i < numWheels; i++) {\n        this.updateWheelTransform(i);\n      }\n      this.currentVehicleSpeedKmHour = 3.6 * chassisBody.velocity.length();\n      var forwardWorld = new Vec3();\n      this.getVehicleAxisWorld(this.indexForwardAxis, forwardWorld);\n      if (forwardWorld.dot(chassisBody.velocity) < 0) {\n        this.currentVehicleSpeedKmHour *= -1;\n      } // simulate suspension\n\n      for (var _i12 = 0; _i12 < numWheels; _i12++) {\n        this.castRay(wheelInfos[_i12]);\n      }\n      this.updateSuspension(timeStep);\n      var impulse = new Vec3();\n      var relpos = new Vec3();\n      for (var _i13 = 0; _i13 < numWheels; _i13++) {\n        //apply suspension force\n        var wheel = wheelInfos[_i13];\n        var suspensionForce = wheel.suspensionForce;\n        if (suspensionForce > wheel.maxSuspensionForce) {\n          suspensionForce = wheel.maxSuspensionForce;\n        }\n        wheel.raycastResult.hitNormalWorld.scale(suspensionForce * timeStep, impulse);\n        wheel.raycastResult.hitPointWorld.vsub(chassisBody.position, relpos);\n        chassisBody.applyImpulse(impulse, relpos);\n      }\n      this.updateFriction(timeStep);\n      var hitNormalWorldScaledWithProj = new Vec3();\n      var fwd = new Vec3();\n      var vel = new Vec3();\n      for (var _i14 = 0; _i14 < numWheels; _i14++) {\n        var _wheel = wheelInfos[_i14]; //const relpos = new Vec3();\n        //wheel.chassisConnectionPointWorld.vsub(chassisBody.position, relpos);\n\n        chassisBody.getVelocityAtWorldPoint(_wheel.chassisConnectionPointWorld, vel); // Hack to get the rotation in the correct direction\n\n        var m = 1;\n        switch (this.indexUpAxis) {\n          case 1:\n            m = -1;\n            break;\n        }\n        if (_wheel.isInContact) {\n          this.getVehicleAxisWorld(this.indexForwardAxis, fwd);\n          var proj = fwd.dot(_wheel.raycastResult.hitNormalWorld);\n          _wheel.raycastResult.hitNormalWorld.scale(proj, hitNormalWorldScaledWithProj);\n          fwd.vsub(hitNormalWorldScaledWithProj, fwd);\n          var proj2 = fwd.dot(vel);\n          _wheel.deltaRotation = m * proj2 * timeStep / _wheel.radius;\n        }\n        if ((_wheel.sliding || !_wheel.isInContact) && _wheel.engineForce !== 0 && _wheel.useCustomSlidingRotationalSpeed) {\n          // Apply custom rotation when accelerating and sliding\n          _wheel.deltaRotation = (_wheel.engineForce > 0 ? 1 : -1) * _wheel.customSlidingRotationalSpeed * timeStep;\n        } // Lock wheels\n\n        if (Math.abs(_wheel.brake) > Math.abs(_wheel.engineForce)) {\n          _wheel.deltaRotation = 0;\n        }\n        _wheel.rotation += _wheel.deltaRotation; // Use the old value\n\n        _wheel.deltaRotation *= 0.99; // damping of rotation when not in contact\n      }\n    }\n  }, {\n    key: \"updateSuspension\",\n    value: function updateSuspension(deltaTime) {\n      var chassisBody = this.chassisBody;\n      var chassisMass = chassisBody.mass;\n      var wheelInfos = this.wheelInfos;\n      var numWheels = wheelInfos.length;\n      for (var w_it = 0; w_it < numWheels; w_it++) {\n        var wheel = wheelInfos[w_it];\n        if (wheel.isInContact) {\n          var force = void 0; // Spring\n\n          var susp_length = wheel.suspensionRestLength;\n          var current_length = wheel.suspensionLength;\n          var length_diff = susp_length - current_length;\n          force = wheel.suspensionStiffness * length_diff * wheel.clippedInvContactDotSuspension; // Damper\n\n          var projected_rel_vel = wheel.suspensionRelativeVelocity;\n          var susp_damping = void 0;\n          if (projected_rel_vel < 0) {\n            susp_damping = wheel.dampingCompression;\n          } else {\n            susp_damping = wheel.dampingRelaxation;\n          }\n          force -= susp_damping * projected_rel_vel;\n          wheel.suspensionForce = force * chassisMass;\n          if (wheel.suspensionForce < 0) {\n            wheel.suspensionForce = 0;\n          }\n        } else {\n          wheel.suspensionForce = 0;\n        }\n      }\n    }\n    /**\n     * Remove the vehicle including its constraints from the world.\n     */\n  }, {\n    key: \"removeFromWorld\",\n    value: function removeFromWorld(world) {\n      this.constraints;\n      world.removeBody(this.chassisBody);\n      world.removeEventListener('preStep', this.preStepCallback);\n      this.world = null;\n    }\n  }, {\n    key: \"castRay\",\n    value: function castRay(wheel) {\n      var rayvector = castRay_rayvector;\n      var target = castRay_target;\n      this.updateWheelTransformWorld(wheel);\n      var chassisBody = this.chassisBody;\n      var depth = -1;\n      var raylen = wheel.suspensionRestLength + wheel.radius;\n      wheel.directionWorld.scale(raylen, rayvector);\n      var source = wheel.chassisConnectionPointWorld;\n      source.vadd(rayvector, target);\n      var raycastResult = wheel.raycastResult;\n      raycastResult.reset(); // Turn off ray collision with the chassis temporarily\n\n      var oldState = chassisBody.collisionResponse;\n      chassisBody.collisionResponse = false; // Cast ray against world\n\n      this.world.rayTest(source, target, raycastResult);\n      chassisBody.collisionResponse = oldState;\n      var object = raycastResult.body;\n      wheel.raycastResult.groundObject = 0;\n      if (object) {\n        depth = raycastResult.distance;\n        wheel.raycastResult.hitNormalWorld = raycastResult.hitNormalWorld;\n        wheel.isInContact = true;\n        var hitDistance = raycastResult.distance;\n        wheel.suspensionLength = hitDistance - wheel.radius; // clamp on max suspension travel\n\n        var minSuspensionLength = wheel.suspensionRestLength - wheel.maxSuspensionTravel;\n        var maxSuspensionLength = wheel.suspensionRestLength + wheel.maxSuspensionTravel;\n        if (wheel.suspensionLength < minSuspensionLength) {\n          wheel.suspensionLength = minSuspensionLength;\n        }\n        if (wheel.suspensionLength > maxSuspensionLength) {\n          wheel.suspensionLength = maxSuspensionLength;\n          wheel.raycastResult.reset();\n        }\n        var denominator = wheel.raycastResult.hitNormalWorld.dot(wheel.directionWorld);\n        var _chassis_velocity_at_contactPoint = new Vec3();\n        chassisBody.getVelocityAtWorldPoint(wheel.raycastResult.hitPointWorld, _chassis_velocity_at_contactPoint);\n        var projVel = wheel.raycastResult.hitNormalWorld.dot(_chassis_velocity_at_contactPoint);\n        if (denominator >= -0.1) {\n          wheel.suspensionRelativeVelocity = 0;\n          wheel.clippedInvContactDotSuspension = 1 / 0.1;\n        } else {\n          var inv = -1 / denominator;\n          wheel.suspensionRelativeVelocity = projVel * inv;\n          wheel.clippedInvContactDotSuspension = inv;\n        }\n      } else {\n        //put wheel info as in rest position\n        wheel.suspensionLength = wheel.suspensionRestLength + 0 * wheel.maxSuspensionTravel;\n        wheel.suspensionRelativeVelocity = 0.0;\n        wheel.directionWorld.scale(-1, wheel.raycastResult.hitNormalWorld);\n        wheel.clippedInvContactDotSuspension = 1.0;\n      }\n      return depth;\n    }\n  }, {\n    key: \"updateWheelTransformWorld\",\n    value: function updateWheelTransformWorld(wheel) {\n      wheel.isInContact = false;\n      var chassisBody = this.chassisBody;\n      chassisBody.pointToWorldFrame(wheel.chassisConnectionPointLocal, wheel.chassisConnectionPointWorld);\n      chassisBody.vectorToWorldFrame(wheel.directionLocal, wheel.directionWorld);\n      chassisBody.vectorToWorldFrame(wheel.axleLocal, wheel.axleWorld);\n    }\n    /**\n     * Update one of the wheel transform.\n     * Note when rendering wheels: during each step, wheel transforms are updated BEFORE the chassis; ie. their position becomes invalid after the step. Thus when you render wheels, you must update wheel transforms before rendering them. See raycastVehicle demo for an example.\n     * @param wheelIndex The wheel index to update.\n     */\n  }, {\n    key: \"updateWheelTransform\",\n    value: function updateWheelTransform(wheelIndex) {\n      var up = tmpVec4;\n      var right = tmpVec5;\n      var fwd = tmpVec6;\n      var wheel = this.wheelInfos[wheelIndex];\n      this.updateWheelTransformWorld(wheel);\n      wheel.directionLocal.scale(-1, up);\n      right.copy(wheel.axleLocal);\n      up.cross(right, fwd);\n      fwd.normalize();\n      right.normalize(); // Rotate around steering over the wheelAxle\n\n      var steering = wheel.steering;\n      var steeringOrn = new Quaternion();\n      steeringOrn.setFromAxisAngle(up, steering);\n      var rotatingOrn = new Quaternion();\n      rotatingOrn.setFromAxisAngle(right, wheel.rotation); // World rotation of the wheel\n\n      var q = wheel.worldTransform.quaternion;\n      this.chassisBody.quaternion.mult(steeringOrn, q);\n      q.mult(rotatingOrn, q);\n      q.normalize(); // world position of the wheel\n\n      var p = wheel.worldTransform.position;\n      p.copy(wheel.directionWorld);\n      p.scale(wheel.suspensionLength, p);\n      p.vadd(wheel.chassisConnectionPointWorld, p);\n    }\n    /**\n     * Get the world transform of one of the wheels\n     */\n  }, {\n    key: \"getWheelTransformWorld\",\n    value: function getWheelTransformWorld(wheelIndex) {\n      return this.wheelInfos[wheelIndex].worldTransform;\n    }\n  }, {\n    key: \"updateFriction\",\n    value: function updateFriction(timeStep) {\n      var surfNormalWS_scaled_proj = updateFriction_surfNormalWS_scaled_proj; //calculate the impulse, so that the wheels don't move sidewards\n\n      var wheelInfos = this.wheelInfos;\n      var numWheels = wheelInfos.length;\n      var chassisBody = this.chassisBody;\n      var forwardWS = updateFriction_forwardWS;\n      var axle = updateFriction_axle;\n      this.numWheelsOnGround = 0;\n      for (var i = 0; i < numWheels; i++) {\n        var wheel = wheelInfos[i];\n        var groundObject = wheel.raycastResult.body;\n        if (groundObject) {\n          this.numWheelsOnGround++;\n        }\n        wheel.sideImpulse = 0;\n        wheel.forwardImpulse = 0;\n        if (!forwardWS[i]) {\n          forwardWS[i] = new Vec3();\n        }\n        if (!axle[i]) {\n          axle[i] = new Vec3();\n        }\n      }\n      for (var _i15 = 0; _i15 < numWheels; _i15++) {\n        var _wheel2 = wheelInfos[_i15];\n        var _groundObject = _wheel2.raycastResult.body;\n        if (_groundObject) {\n          var axlei = axle[_i15];\n          var wheelTrans = this.getWheelTransformWorld(_i15); // Get world axle\n\n          wheelTrans.vectorToWorldFrame(directions[this.indexRightAxis], axlei);\n          var surfNormalWS = _wheel2.raycastResult.hitNormalWorld;\n          var proj = axlei.dot(surfNormalWS);\n          surfNormalWS.scale(proj, surfNormalWS_scaled_proj);\n          axlei.vsub(surfNormalWS_scaled_proj, axlei);\n          axlei.normalize();\n          surfNormalWS.cross(axlei, forwardWS[_i15]);\n          forwardWS[_i15].normalize();\n          _wheel2.sideImpulse = resolveSingleBilateral(chassisBody, _wheel2.raycastResult.hitPointWorld, _groundObject, _wheel2.raycastResult.hitPointWorld, axlei);\n          _wheel2.sideImpulse *= sideFrictionStiffness2;\n        }\n      }\n      var sideFactor = 1;\n      var fwdFactor = 0.5;\n      this.sliding = false;\n      for (var _i16 = 0; _i16 < numWheels; _i16++) {\n        var _wheel3 = wheelInfos[_i16];\n        var _groundObject2 = _wheel3.raycastResult.body;\n        var rollingFriction = 0;\n        _wheel3.slipInfo = 1;\n        if (_groundObject2) {\n          var defaultRollingFrictionImpulse = 0;\n          var maxImpulse = _wheel3.brake ? _wheel3.brake : defaultRollingFrictionImpulse; // btWheelContactPoint contactPt(chassisBody,groundObject,wheelInfraycastInfo.hitPointWorld,forwardWS[wheel],maxImpulse);\n          // rollingFriction = calcRollingFriction(contactPt);\n\n          rollingFriction = calcRollingFriction(chassisBody, _groundObject2, _wheel3.raycastResult.hitPointWorld, forwardWS[_i16], maxImpulse);\n          rollingFriction += _wheel3.engineForce * timeStep; // rollingFriction = 0;\n\n          var factor = maxImpulse / rollingFriction;\n          _wheel3.slipInfo *= factor;\n        } //switch between active rolling (throttle), braking and non-active rolling friction (nthrottle/break)\n\n        _wheel3.forwardImpulse = 0;\n        _wheel3.skidInfo = 1;\n        if (_groundObject2) {\n          _wheel3.skidInfo = 1;\n          var maximp = _wheel3.suspensionForce * timeStep * _wheel3.frictionSlip;\n          var maximpSide = maximp;\n          var maximpSquared = maximp * maximpSide;\n          _wheel3.forwardImpulse = rollingFriction; //wheelInfo.engineForce* timeStep;\n\n          var x = _wheel3.forwardImpulse * fwdFactor / _wheel3.forwardAcceleration;\n          var y = _wheel3.sideImpulse * sideFactor / _wheel3.sideAcceleration;\n          var impulseSquared = x * x + y * y;\n          _wheel3.sliding = false;\n          if (impulseSquared > maximpSquared) {\n            this.sliding = true;\n            _wheel3.sliding = true;\n            var _factor = maximp / Math.sqrt(impulseSquared);\n            _wheel3.skidInfo *= _factor;\n          }\n        }\n      }\n      if (this.sliding) {\n        for (var _i17 = 0; _i17 < numWheels; _i17++) {\n          var _wheel4 = wheelInfos[_i17];\n          if (_wheel4.sideImpulse !== 0) {\n            if (_wheel4.skidInfo < 1) {\n              _wheel4.forwardImpulse *= _wheel4.skidInfo;\n              _wheel4.sideImpulse *= _wheel4.skidInfo;\n            }\n          }\n        }\n      } // apply the impulses\n\n      for (var _i18 = 0; _i18 < numWheels; _i18++) {\n        var _wheel5 = wheelInfos[_i18];\n        var rel_pos = new Vec3();\n        _wheel5.raycastResult.hitPointWorld.vsub(chassisBody.position, rel_pos); // cannons applyimpulse is using world coord for the position\n        //rel_pos.copy(wheel.raycastResult.hitPointWorld);\n\n        if (_wheel5.forwardImpulse !== 0) {\n          var impulse = new Vec3();\n          forwardWS[_i18].scale(_wheel5.forwardImpulse, impulse);\n          chassisBody.applyImpulse(impulse, rel_pos);\n        }\n        if (_wheel5.sideImpulse !== 0) {\n          var _groundObject3 = _wheel5.raycastResult.body;\n          var rel_pos2 = new Vec3();\n          _wheel5.raycastResult.hitPointWorld.vsub(_groundObject3.position, rel_pos2); //rel_pos2.copy(wheel.raycastResult.hitPointWorld);\n\n          var sideImp = new Vec3();\n          axle[_i18].scale(_wheel5.sideImpulse, sideImp); // Scale the relative position in the up direction with rollInfluence.\n          // If rollInfluence is 1, the impulse will be applied on the hitPoint (easy to roll over), if it is zero it will be applied in the same plane as the center of mass (not easy to roll over).\n\n          chassisBody.vectorToLocalFrame(rel_pos, rel_pos);\n          rel_pos['xyz'[this.indexUpAxis]] *= _wheel5.rollInfluence;\n          chassisBody.vectorToWorldFrame(rel_pos, rel_pos);\n          chassisBody.applyImpulse(sideImp, rel_pos); //apply friction impulse on the ground\n\n          sideImp.scale(-1, sideImp);\n          _groundObject3.applyImpulse(sideImp, rel_pos2);\n        }\n      }\n    }\n  }]);\n  return RaycastVehicle;\n}();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nvar tmpVec4 = new Vec3();\nvar tmpVec5 = new Vec3();\nvar tmpVec6 = new Vec3();\nnew Ray();\nnew Vec3();\nvar castRay_rayvector = new Vec3();\nvar castRay_target = new Vec3();\nvar directions = [new Vec3(1, 0, 0), new Vec3(0, 1, 0), new Vec3(0, 0, 1)];\nvar updateFriction_surfNormalWS_scaled_proj = new Vec3();\nvar updateFriction_axle = [];\nvar updateFriction_forwardWS = [];\nvar sideFrictionStiffness2 = 1;\nvar calcRollingFriction_vel1 = new Vec3();\nvar calcRollingFriction_vel2 = new Vec3();\nvar calcRollingFriction_vel = new Vec3();\nfunction calcRollingFriction(body0, body1, frictionPosWorld, frictionDirectionWorld, maxImpulse) {\n  var j1 = 0;\n  var contactPosWorld = frictionPosWorld; // const rel_pos1 = new Vec3();\n  // const rel_pos2 = new Vec3();\n\n  var vel1 = calcRollingFriction_vel1;\n  var vel2 = calcRollingFriction_vel2;\n  var vel = calcRollingFriction_vel; // contactPosWorld.vsub(body0.position, rel_pos1);\n  // contactPosWorld.vsub(body1.position, rel_pos2);\n\n  body0.getVelocityAtWorldPoint(contactPosWorld, vel1);\n  body1.getVelocityAtWorldPoint(contactPosWorld, vel2);\n  vel1.vsub(vel2, vel);\n  var vrel = frictionDirectionWorld.dot(vel);\n  var denom0 = computeImpulseDenominator(body0, frictionPosWorld, frictionDirectionWorld);\n  var denom1 = computeImpulseDenominator(body1, frictionPosWorld, frictionDirectionWorld);\n  var relaxation = 1;\n  var jacDiagABInv = relaxation / (denom0 + denom1); // calculate j that moves us to zero relative velocity\n\n  j1 = -vrel * jacDiagABInv;\n  if (maxImpulse < j1) {\n    j1 = maxImpulse;\n  }\n  if (j1 < -maxImpulse) {\n    j1 = -maxImpulse;\n  }\n  return j1;\n}\nvar computeImpulseDenominator_r0 = new Vec3();\nvar computeImpulseDenominator_c0 = new Vec3();\nvar computeImpulseDenominator_vec = new Vec3();\nvar computeImpulseDenominator_m = new Vec3();\nfunction computeImpulseDenominator(body, pos, normal) {\n  var r0 = computeImpulseDenominator_r0;\n  var c0 = computeImpulseDenominator_c0;\n  var vec = computeImpulseDenominator_vec;\n  var m = computeImpulseDenominator_m;\n  pos.vsub(body.position, r0);\n  r0.cross(normal, c0);\n  body.invInertiaWorld.vmult(c0, m);\n  m.cross(r0, vec);\n  return body.invMass + normal.dot(vec);\n}\nvar resolveSingleBilateral_vel1 = new Vec3();\nvar resolveSingleBilateral_vel2 = new Vec3();\nvar resolveSingleBilateral_vel = new Vec3(); // bilateral constraint between two dynamic objects\n\nfunction resolveSingleBilateral(body1, pos1, body2, pos2, normal) {\n  var normalLenSqr = normal.lengthSquared();\n  if (normalLenSqr > 1.1) {\n    return 0; // no impulse\n  } // const rel_pos1 = new Vec3();\n  // const rel_pos2 = new Vec3();\n  // pos1.vsub(body1.position, rel_pos1);\n  // pos2.vsub(body2.position, rel_pos2);\n\n  var vel1 = resolveSingleBilateral_vel1;\n  var vel2 = resolveSingleBilateral_vel2;\n  var vel = resolveSingleBilateral_vel;\n  body1.getVelocityAtWorldPoint(pos1, vel1);\n  body2.getVelocityAtWorldPoint(pos2, vel2);\n  vel1.vsub(vel2, vel);\n  var rel_vel = normal.dot(vel);\n  var contactDamping = 0.2;\n  var massTerm = 1 / (body1.invMass + body2.invMass);\n  var impulse = -contactDamping * rel_vel * massTerm;\n  return impulse;\n}\n\n/**\n * Spherical shape\n * @example\n *     const radius = 1\n *     const sphereShape = new CANNON.Sphere(radius)\n *     const sphereBody = new CANNON.Body({ mass: 1, shape: sphereShape })\n *     world.addBody(sphereBody)\n */\nvar Sphere = /*#__PURE__*/function (_Shape3) {\n  _inherits(Sphere, _Shape3);\n  var _super17 = _createSuper(Sphere);\n  /**\n   * The radius of the sphere.\n   */\n\n  /**\n   *\n   * @param radius The radius of the sphere, a non-negative number.\n   */\n  function Sphere(radius) {\n    var _this16;\n    _classCallCheck(this, Sphere);\n    _this16 = _super17.call(this, {\n      type: Shape.types.SPHERE\n    });\n    _this16.radius = radius !== undefined ? radius : 1.0;\n    if (_this16.radius < 0) {\n      throw new Error('The sphere radius cannot be negative.');\n    }\n    _this16.updateBoundingSphereRadius();\n    return _this16;\n  }\n  /** calculateLocalInertia */\n  _createClass(Sphere, [{\n    key: \"calculateLocalInertia\",\n    value: function calculateLocalInertia(mass, target) {\n      if (target === void 0) {\n        target = new Vec3();\n      }\n      var I = 2.0 * mass * this.radius * this.radius / 5.0;\n      target.x = I;\n      target.y = I;\n      target.z = I;\n      return target;\n    }\n    /** volume */\n  }, {\n    key: \"volume\",\n    value: function volume() {\n      return 4.0 * Math.PI * Math.pow(this.radius, 3) / 3.0;\n    }\n  }, {\n    key: \"updateBoundingSphereRadius\",\n    value: function updateBoundingSphereRadius() {\n      this.boundingSphereRadius = this.radius;\n    }\n  }, {\n    key: \"calculateWorldAABB\",\n    value: function calculateWorldAABB(pos, quat, min, max) {\n      var r = this.radius;\n      var axes = ['x', 'y', 'z'];\n      for (var i = 0; i < axes.length; i++) {\n        var ax = axes[i];\n        min[ax] = pos[ax] - r;\n        max[ax] = pos[ax] + r;\n      }\n    }\n  }]);\n  return Sphere;\n}(Shape);\n/**\n * Simple vehicle helper class with spherical rigid body wheels.\n */\nvar RigidVehicle = /*#__PURE__*/function () {\n  /**\n   * The bodies of the wheels.\n   */\n\n  /**\n   * The chassis body.\n   */\n\n  /**\n   * The constraints.\n   */\n\n  /**\n   * The wheel axes.\n   */\n\n  /**\n   * The wheel forces.\n   */\n  function RigidVehicle(options) {\n    _classCallCheck(this, RigidVehicle);\n    if (options === void 0) {\n      options = {};\n    }\n    this.wheelBodies = [];\n    this.coordinateSystem = typeof options.coordinateSystem !== 'undefined' ? options.coordinateSystem.clone() : new Vec3(1, 2, 3);\n    if (options.chassisBody) {\n      this.chassisBody = options.chassisBody;\n    } else {\n      // No chassis body given. Create it!\n      this.chassisBody = new Body({\n        mass: 1,\n        shape: new Box(new Vec3(5, 0.5, 2))\n      });\n    }\n    this.constraints = [];\n    this.wheelAxes = [];\n    this.wheelForces = [];\n  }\n  /**\n   * Add a wheel\n   */\n  _createClass(RigidVehicle, [{\n    key: \"addWheel\",\n    value: function addWheel(options) {\n      if (options === void 0) {\n        options = {};\n      }\n      var wheelBody;\n      if (options.body) {\n        wheelBody = options.body;\n      } else {\n        // No wheel body given. Create it!\n        wheelBody = new Body({\n          mass: 1,\n          shape: new Sphere(1.2)\n        });\n      }\n      this.wheelBodies.push(wheelBody);\n      this.wheelForces.push(0); // Position constrain wheels\n\n      var position = typeof options.position !== 'undefined' ? options.position.clone() : new Vec3(); // Set position locally to the chassis\n\n      var worldPosition = new Vec3();\n      this.chassisBody.pointToWorldFrame(position, worldPosition);\n      wheelBody.position.set(worldPosition.x, worldPosition.y, worldPosition.z); // Constrain wheel\n\n      var axis = typeof options.axis !== 'undefined' ? options.axis.clone() : new Vec3(0, 0, 1);\n      this.wheelAxes.push(axis);\n      var hingeConstraint = new HingeConstraint(this.chassisBody, wheelBody, {\n        pivotA: position,\n        axisA: axis,\n        pivotB: Vec3.ZERO,\n        axisB: axis,\n        collideConnected: false\n      });\n      this.constraints.push(hingeConstraint);\n      return this.wheelBodies.length - 1;\n    }\n    /**\n     * Set the steering value of a wheel.\n     * @todo check coordinateSystem\n     */\n  }, {\n    key: \"setSteeringValue\",\n    value: function setSteeringValue(value, wheelIndex) {\n      // Set angle of the hinge axis\n      var axis = this.wheelAxes[wheelIndex];\n      var c = Math.cos(value);\n      var s = Math.sin(value);\n      var x = axis.x;\n      var z = axis.z;\n      this.constraints[wheelIndex].axisA.set(-c * x + s * z, 0, s * x + c * z);\n    }\n    /**\n     * Set the target rotational speed of the hinge constraint.\n     */\n  }, {\n    key: \"setMotorSpeed\",\n    value: function setMotorSpeed(value, wheelIndex) {\n      var hingeConstraint = this.constraints[wheelIndex];\n      hingeConstraint.enableMotor();\n      hingeConstraint.motorTargetVelocity = value;\n    }\n    /**\n     * Set the target rotational speed of the hinge constraint.\n     */\n  }, {\n    key: \"disableMotor\",\n    value: function disableMotor(wheelIndex) {\n      var hingeConstraint = this.constraints[wheelIndex];\n      hingeConstraint.disableMotor();\n    }\n    /**\n     * Set the wheel force to apply on one of the wheels each time step\n     */\n  }, {\n    key: \"setWheelForce\",\n    value: function setWheelForce(value, wheelIndex) {\n      this.wheelForces[wheelIndex] = value;\n    }\n    /**\n     * Apply a torque on one of the wheels.\n     */\n  }, {\n    key: \"applyWheelForce\",\n    value: function applyWheelForce(value, wheelIndex) {\n      var axis = this.wheelAxes[wheelIndex];\n      var wheelBody = this.wheelBodies[wheelIndex];\n      var bodyTorque = wheelBody.torque;\n      axis.scale(value, torque);\n      wheelBody.vectorToWorldFrame(torque, torque);\n      bodyTorque.vadd(torque, bodyTorque);\n    }\n    /**\n     * Add the vehicle including its constraints to the world.\n     */\n  }, {\n    key: \"addToWorld\",\n    value: function addToWorld(world) {\n      var constraints = this.constraints;\n      var bodies = this.wheelBodies.concat([this.chassisBody]);\n      for (var i = 0; i < bodies.length; i++) {\n        world.addBody(bodies[i]);\n      }\n      for (var _i19 = 0; _i19 < constraints.length; _i19++) {\n        world.addConstraint(constraints[_i19]);\n      }\n      world.addEventListener('preStep', this._update.bind(this));\n    }\n  }, {\n    key: \"_update\",\n    value: function _update() {\n      var wheelForces = this.wheelForces;\n      for (var i = 0; i < wheelForces.length; i++) {\n        this.applyWheelForce(wheelForces[i], i);\n      }\n    }\n    /**\n     * Remove the vehicle including its constraints from the world.\n     */\n  }, {\n    key: \"removeFromWorld\",\n    value: function removeFromWorld(world) {\n      var constraints = this.constraints;\n      var bodies = this.wheelBodies.concat([this.chassisBody]);\n      for (var i = 0; i < bodies.length; i++) {\n        world.removeBody(bodies[i]);\n      }\n      for (var _i20 = 0; _i20 < constraints.length; _i20++) {\n        world.removeConstraint(constraints[_i20]);\n      }\n    }\n    /**\n     * Get current rotational velocity of a wheel\n     */\n  }, {\n    key: \"getWheelSpeed\",\n    value: function getWheelSpeed(wheelIndex) {\n      var axis = this.wheelAxes[wheelIndex];\n      var wheelBody = this.wheelBodies[wheelIndex];\n      var w = wheelBody.angularVelocity;\n      this.chassisBody.vectorToWorldFrame(axis, worldAxis);\n      return w.dot(worldAxis);\n    }\n  }]);\n  return RigidVehicle;\n}();\nvar torque = new Vec3();\nvar worldAxis = new Vec3();\n\n/**\n * Smoothed-particle hydrodynamics system\n * @todo Make parameters customizable in the constructor\n */\nvar SPHSystem = /*#__PURE__*/function () {\n  /**\n   * The particles array.\n   */\n\n  /**\n   * Density of the system (kg/m3).\n   * @default 1\n   */\n\n  /**\n   * Distance below which two particles are considered to be neighbors.\n   * It should be adjusted so there are about 15-20 neighbor particles within this radius.\n   * @default 1\n   */\n\n  /**\n   * @default 1\n   */\n\n  /**\n   * Viscosity of the system.\n   * @default 0.01\n   */\n\n  /**\n   * @default 0.000001\n   */\n  function SPHSystem() {\n    _classCallCheck(this, SPHSystem);\n    this.particles = [];\n    this.density = 1;\n    this.smoothingRadius = 1;\n    this.speedOfSound = 1;\n    this.viscosity = 0.01;\n    this.eps = 0.000001; // Stuff Computed per particle\n\n    this.pressures = [];\n    this.densities = [];\n    this.neighbors = [];\n  }\n  /**\n   * Add a particle to the system.\n   */\n  _createClass(SPHSystem, [{\n    key: \"add\",\n    value: function add(particle) {\n      this.particles.push(particle);\n      if (this.neighbors.length < this.particles.length) {\n        this.neighbors.push([]);\n      }\n    }\n    /**\n     * Remove a particle from the system.\n     */\n  }, {\n    key: \"remove\",\n    value: function remove(particle) {\n      var idx = this.particles.indexOf(particle);\n      if (idx !== -1) {\n        this.particles.splice(idx, 1);\n        if (this.neighbors.length > this.particles.length) {\n          this.neighbors.pop();\n        }\n      }\n    }\n    /**\n     * Get neighbors within smoothing volume, save in the array neighbors\n     */\n  }, {\n    key: \"getNeighbors\",\n    value: function getNeighbors(particle, neighbors) {\n      var N = this.particles.length;\n      var id = particle.id;\n      var R2 = this.smoothingRadius * this.smoothingRadius;\n      var dist = SPHSystem_getNeighbors_dist;\n      for (var i = 0; i !== N; i++) {\n        var p = this.particles[i];\n        p.position.vsub(particle.position, dist);\n        if (id !== p.id && dist.lengthSquared() < R2) {\n          neighbors.push(p);\n        }\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var N = this.particles.length;\n      var dist = SPHSystem_update_dist;\n      var cs = this.speedOfSound;\n      var eps = this.eps;\n      for (var i = 0; i !== N; i++) {\n        var p = this.particles[i]; // Current particle\n\n        var neighbors = this.neighbors[i]; // Get neighbors\n\n        neighbors.length = 0;\n        this.getNeighbors(p, neighbors);\n        neighbors.push(this.particles[i]); // Add current too\n\n        var numNeighbors = neighbors.length; // Accumulate density for the particle\n\n        var sum = 0.0;\n        for (var j = 0; j !== numNeighbors; j++) {\n          //printf(\"Current particle has position %f %f %f\\n\",objects[id].pos.x(),objects[id].pos.y(),objects[id].pos.z());\n          p.position.vsub(neighbors[j].position, dist);\n          var len = dist.length();\n          var weight = this.w(len);\n          sum += neighbors[j].mass * weight;\n        } // Save\n\n        this.densities[i] = sum;\n        this.pressures[i] = cs * cs * (this.densities[i] - this.density);\n      } // Add forces\n      // Sum to these accelerations\n\n      var a_pressure = SPHSystem_update_a_pressure;\n      var a_visc = SPHSystem_update_a_visc;\n      var gradW = SPHSystem_update_gradW;\n      var r_vec = SPHSystem_update_r_vec;\n      var u = SPHSystem_update_u;\n      for (var _i21 = 0; _i21 !== N; _i21++) {\n        var particle = this.particles[_i21];\n        a_pressure.set(0, 0, 0);\n        a_visc.set(0, 0, 0); // Init vars\n\n        var Pij = void 0;\n        var nabla = void 0;\n        var _neighbors = this.neighbors[_i21];\n        var _numNeighbors = _neighbors.length; //printf(\"Neighbors: \");\n\n        for (var _j2 = 0; _j2 !== _numNeighbors; _j2++) {\n          var neighbor = _neighbors[_j2]; //printf(\"%d \",nj);\n          // Get r once for all..\n\n          particle.position.vsub(neighbor.position, r_vec);\n          var r = r_vec.length(); // Pressure contribution\n\n          Pij = -neighbor.mass * (this.pressures[_i21] / (this.densities[_i21] * this.densities[_i21] + eps) + this.pressures[_j2] / (this.densities[_j2] * this.densities[_j2] + eps));\n          this.gradw(r_vec, gradW); // Add to pressure acceleration\n\n          gradW.scale(Pij, gradW);\n          a_pressure.vadd(gradW, a_pressure); // Viscosity contribution\n\n          neighbor.velocity.vsub(particle.velocity, u);\n          u.scale(1.0 / (0.0001 + this.densities[_i21] * this.densities[_j2]) * this.viscosity * neighbor.mass, u);\n          nabla = this.nablaw(r);\n          u.scale(nabla, u); // Add to viscosity acceleration\n\n          a_visc.vadd(u, a_visc);\n        } // Calculate force\n\n        a_visc.scale(particle.mass, a_visc);\n        a_pressure.scale(particle.mass, a_pressure); // Add force to particles\n\n        particle.force.vadd(a_visc, particle.force);\n        particle.force.vadd(a_pressure, particle.force);\n      }\n    } // Calculate the weight using the W(r) weightfunction\n  }, {\n    key: \"w\",\n    value: function w(r) {\n      // 315\n      var h = this.smoothingRadius;\n      return 315.0 / (64.0 * Math.PI * Math.pow(h, 9)) * Math.pow(h * h - r * r, 3);\n    } // calculate gradient of the weight function\n  }, {\n    key: \"gradw\",\n    value: function gradw(rVec, resultVec) {\n      var r = rVec.length();\n      var h = this.smoothingRadius;\n      rVec.scale(945.0 / (32.0 * Math.PI * Math.pow(h, 9)) * Math.pow(h * h - r * r, 2), resultVec);\n    } // Calculate nabla(W)\n  }, {\n    key: \"nablaw\",\n    value: function nablaw(r) {\n      var h = this.smoothingRadius;\n      var nabla = 945.0 / (32.0 * Math.PI * Math.pow(h, 9)) * (h * h - r * r) * (7 * r * r - 3 * h * h);\n      return nabla;\n    }\n  }]);\n  return SPHSystem;\n}();\nvar SPHSystem_getNeighbors_dist = new Vec3(); // Temp vectors for calculation\n\nvar SPHSystem_update_dist = new Vec3(); // Relative velocity\n\nvar SPHSystem_update_a_pressure = new Vec3();\nvar SPHSystem_update_a_visc = new Vec3();\nvar SPHSystem_update_gradW = new Vec3();\nvar SPHSystem_update_r_vec = new Vec3();\nvar SPHSystem_update_u = new Vec3();\n\n/**\n * Cylinder class.\n * @example\n *     const radiusTop = 0.5\n *     const radiusBottom = 0.5\n *     const height = 2\n *     const numSegments = 12\n *     const cylinderShape = new CANNON.Cylinder(radiusTop, radiusBottom, height, numSegments)\n *     const cylinderBody = new CANNON.Body({ mass: 1, shape: cylinderShape })\n *     world.addBody(cylinderBody)\n */\nvar Cylinder = /*#__PURE__*/function (_ConvexPolyhedron) {\n  _inherits(Cylinder, _ConvexPolyhedron);\n  var _super18 = _createSuper(Cylinder);\n  /** The radius of the top of the Cylinder. */\n\n  /** The radius of the bottom of the Cylinder. */\n\n  /** The height of the Cylinder. */\n\n  /** The number of segments to build the cylinder out of. */\n\n  /**\n   * @param radiusTop The radius of the top of the Cylinder.\n   * @param radiusBottom The radius of the bottom of the Cylinder.\n   * @param height The height of the Cylinder.\n   * @param numSegments The number of segments to build the cylinder out of.\n   */\n  function Cylinder(radiusTop, radiusBottom, height, numSegments) {\n    var _this17;\n    _classCallCheck(this, Cylinder);\n    if (radiusTop === void 0) {\n      radiusTop = 1;\n    }\n    if (radiusBottom === void 0) {\n      radiusBottom = 1;\n    }\n    if (height === void 0) {\n      height = 1;\n    }\n    if (numSegments === void 0) {\n      numSegments = 8;\n    }\n    if (radiusTop < 0) {\n      throw new Error('The cylinder radiusTop cannot be negative.');\n    }\n    if (radiusBottom < 0) {\n      throw new Error('The cylinder radiusBottom cannot be negative.');\n    }\n    var N = numSegments;\n    var vertices = [];\n    var axes = [];\n    var faces = [];\n    var bottomface = [];\n    var topface = [];\n    var cos = Math.cos;\n    var sin = Math.sin; // First bottom point\n\n    vertices.push(new Vec3(-radiusBottom * sin(0), -height * 0.5, radiusBottom * cos(0)));\n    bottomface.push(0); // First top point\n\n    vertices.push(new Vec3(-radiusTop * sin(0), height * 0.5, radiusTop * cos(0)));\n    topface.push(1);\n    for (var i = 0; i < N; i++) {\n      var theta = 2 * Math.PI / N * (i + 1);\n      var thetaN = 2 * Math.PI / N * (i + 0.5);\n      if (i < N - 1) {\n        // Bottom\n        vertices.push(new Vec3(-radiusBottom * sin(theta), -height * 0.5, radiusBottom * cos(theta)));\n        bottomface.push(2 * i + 2); // Top\n\n        vertices.push(new Vec3(-radiusTop * sin(theta), height * 0.5, radiusTop * cos(theta)));\n        topface.push(2 * i + 3); // Face\n\n        faces.push([2 * i, 2 * i + 1, 2 * i + 3, 2 * i + 2]);\n      } else {\n        faces.push([2 * i, 2 * i + 1, 1, 0]); // Connect\n      } // Axis: we can cut off half of them if we have even number of segments\n\n      if (N % 2 === 1 || i < N / 2) {\n        axes.push(new Vec3(-sin(thetaN), 0, cos(thetaN)));\n      }\n    }\n    faces.push(bottomface);\n    axes.push(new Vec3(0, 1, 0)); // Reorder top face\n\n    var temp = [];\n    for (var _i22 = 0; _i22 < topface.length; _i22++) {\n      temp.push(topface[topface.length - _i22 - 1]);\n    }\n    faces.push(temp);\n    _this17 = _super18.call(this, {\n      vertices: vertices,\n      faces: faces,\n      axes: axes\n    });\n    _this17.type = Shape.types.CYLINDER;\n    _this17.radiusTop = radiusTop;\n    _this17.radiusBottom = radiusBottom;\n    _this17.height = height;\n    _this17.numSegments = numSegments;\n    return _this17;\n  }\n  return _createClass(Cylinder);\n}(ConvexPolyhedron);\n/**\n * Particle shape.\n * @example\n *     const particleShape = new CANNON.Particle()\n *     const particleBody = new CANNON.Body({ mass: 1, shape: particleShape })\n *     world.addBody(particleBody)\n */\nvar Particle = /*#__PURE__*/function (_Shape4) {\n  _inherits(Particle, _Shape4);\n  var _super19 = _createSuper(Particle);\n  function Particle() {\n    _classCallCheck(this, Particle);\n    return _super19.call(this, {\n      type: Shape.types.PARTICLE\n    });\n  }\n  /**\n   * calculateLocalInertia\n   */\n  _createClass(Particle, [{\n    key: \"calculateLocalInertia\",\n    value: function calculateLocalInertia(mass, target) {\n      if (target === void 0) {\n        target = new Vec3();\n      }\n      target.set(0, 0, 0);\n      return target;\n    }\n  }, {\n    key: \"volume\",\n    value: function volume() {\n      return 0;\n    }\n  }, {\n    key: \"updateBoundingSphereRadius\",\n    value: function updateBoundingSphereRadius() {\n      this.boundingSphereRadius = 0;\n    }\n  }, {\n    key: \"calculateWorldAABB\",\n    value: function calculateWorldAABB(pos, quat, min, max) {\n      // Get each axis max\n      min.copy(pos);\n      max.copy(pos);\n    }\n  }]);\n  return Particle;\n}(Shape);\n/**\n * A plane, facing in the Z direction. The plane has its surface at z=0 and everything below z=0 is assumed to be solid plane. To make the plane face in some other direction than z, you must put it inside a Body and rotate that body. See the demos.\n * @example\n *     const planeShape = new CANNON.Plane()\n *     const planeBody = new CANNON.Body({ mass: 0, shape:  planeShape })\n *     planeBody.quaternion.setFromEuler(-Math.PI / 2, 0, 0) // make it face up\n *     world.addBody(planeBody)\n */\nvar Plane = /*#__PURE__*/function (_Shape5) {\n  _inherits(Plane, _Shape5);\n  var _super20 = _createSuper(Plane);\n  /** worldNormal */\n\n  /** worldNormalNeedsUpdate */\n  function Plane() {\n    var _this18;\n    _classCallCheck(this, Plane);\n    _this18 = _super20.call(this, {\n      type: Shape.types.PLANE\n    }); // World oriented normal\n\n    _this18.worldNormal = new Vec3();\n    _this18.worldNormalNeedsUpdate = true;\n    _this18.boundingSphereRadius = Number.MAX_VALUE;\n    return _this18;\n  }\n  /** computeWorldNormal */\n  _createClass(Plane, [{\n    key: \"computeWorldNormal\",\n    value: function computeWorldNormal(quat) {\n      var n = this.worldNormal;\n      n.set(0, 0, 1);\n      quat.vmult(n, n);\n      this.worldNormalNeedsUpdate = false;\n    }\n  }, {\n    key: \"calculateLocalInertia\",\n    value: function calculateLocalInertia(mass, target) {\n      if (target === void 0) {\n        target = new Vec3();\n      }\n      return target;\n    }\n  }, {\n    key: \"volume\",\n    value: function volume() {\n      return (\n        // The plane is infinite...\n        Number.MAX_VALUE\n      );\n    }\n  }, {\n    key: \"calculateWorldAABB\",\n    value: function calculateWorldAABB(pos, quat, min, max) {\n      // The plane AABB is infinite, except if the normal is pointing along any axis\n      tempNormal.set(0, 0, 1); // Default plane normal is z\n\n      quat.vmult(tempNormal, tempNormal);\n      var maxVal = Number.MAX_VALUE;\n      min.set(-maxVal, -maxVal, -maxVal);\n      max.set(maxVal, maxVal, maxVal);\n      if (tempNormal.x === 1) {\n        max.x = pos.x;\n      } else if (tempNormal.x === -1) {\n        min.x = pos.x;\n      }\n      if (tempNormal.y === 1) {\n        max.y = pos.y;\n      } else if (tempNormal.y === -1) {\n        min.y = pos.y;\n      }\n      if (tempNormal.z === 1) {\n        max.z = pos.z;\n      } else if (tempNormal.z === -1) {\n        min.z = pos.z;\n      }\n    }\n  }, {\n    key: \"updateBoundingSphereRadius\",\n    value: function updateBoundingSphereRadius() {\n      this.boundingSphereRadius = Number.MAX_VALUE;\n    }\n  }]);\n  return Plane;\n}(Shape);\nvar tempNormal = new Vec3();\n\n/**\n * Heightfield shape class. Height data is given as an array. These data points are spread out evenly with a given distance.\n * @todo Should be possible to use along all axes, not just y\n * @todo should be possible to scale along all axes\n * @todo Refactor elementSize to elementSizeX and elementSizeY\n *\n * @example\n *     // Generate some height data (y-values).\n *     const data = []\n *     for (let i = 0; i < 1000; i++) {\n *         const y = 0.5 * Math.cos(0.2 * i)\n *         data.push(y)\n *     }\n *\n *     // Create the heightfield shape\n *     const heightfieldShape = new CANNON.Heightfield(data, {\n *         elementSize: 1 // Distance between the data points in X and Y directions\n *     })\n *     const heightfieldBody = new CANNON.Body({ shape: heightfieldShape })\n *     world.addBody(heightfieldBody)\n */\nvar Heightfield = /*#__PURE__*/function (_Shape6) {\n  _inherits(Heightfield, _Shape6);\n  var _super21 = _createSuper(Heightfield);\n  /**\n   * An array of numbers, or height values, that are spread out along the x axis.\n   */\n\n  /**\n   * Max value of the data points in the data array.\n   */\n\n  /**\n   * Minimum value of the data points in the data array.\n   */\n\n  /**\n   * World spacing between the data points in X and Y direction.\n   * @todo elementSizeX and Y\n   * @default 1\n   */\n\n  /**\n   * @default true\n   */\n\n  /**\n   * @param data An array of numbers, or height values, that are spread out along the x axis.\n   */\n  function Heightfield(data, options) {\n    var _this19;\n    _classCallCheck(this, Heightfield);\n    if (options === void 0) {\n      options = {};\n    }\n    options = Utils.defaults(options, {\n      maxValue: null,\n      minValue: null,\n      elementSize: 1\n    });\n    _this19 = _super21.call(this, {\n      type: Shape.types.HEIGHTFIELD\n    });\n    _this19.data = data;\n    _this19.maxValue = options.maxValue;\n    _this19.minValue = options.minValue;\n    _this19.elementSize = options.elementSize;\n    if (options.minValue === null) {\n      _this19.updateMinValue();\n    }\n    if (options.maxValue === null) {\n      _this19.updateMaxValue();\n    }\n    _this19.cacheEnabled = true;\n    _this19.pillarConvex = new ConvexPolyhedron();\n    _this19.pillarOffset = new Vec3();\n    _this19.updateBoundingSphereRadius(); // \"i_j_isUpper\" => { convex: ..., offset: ... }\n    // for example:\n    // _cachedPillars[\"0_2_1\"]\n\n    _this19._cachedPillars = {};\n    return _this19;\n  }\n  /**\n   * Call whenever you change the data array.\n   */\n  _createClass(Heightfield, [{\n    key: \"update\",\n    value: function update() {\n      this._cachedPillars = {};\n    }\n    /**\n     * Update the `minValue` property\n     */\n  }, {\n    key: \"updateMinValue\",\n    value: function updateMinValue() {\n      var data = this.data;\n      var minValue = data[0][0];\n      for (var i = 0; i !== data.length; i++) {\n        for (var j = 0; j !== data[i].length; j++) {\n          var v = data[i][j];\n          if (v < minValue) {\n            minValue = v;\n          }\n        }\n      }\n      this.minValue = minValue;\n    }\n    /**\n     * Update the `maxValue` property\n     */\n  }, {\n    key: \"updateMaxValue\",\n    value: function updateMaxValue() {\n      var data = this.data;\n      var maxValue = data[0][0];\n      for (var i = 0; i !== data.length; i++) {\n        for (var j = 0; j !== data[i].length; j++) {\n          var v = data[i][j];\n          if (v > maxValue) {\n            maxValue = v;\n          }\n        }\n      }\n      this.maxValue = maxValue;\n    }\n    /**\n     * Set the height value at an index. Don't forget to update maxValue and minValue after you're done.\n     */\n  }, {\n    key: \"setHeightValueAtIndex\",\n    value: function setHeightValueAtIndex(xi, yi, value) {\n      var data = this.data;\n      data[xi][yi] = value; // Invalidate cache\n\n      this.clearCachedConvexTrianglePillar(xi, yi, false);\n      if (xi > 0) {\n        this.clearCachedConvexTrianglePillar(xi - 1, yi, true);\n        this.clearCachedConvexTrianglePillar(xi - 1, yi, false);\n      }\n      if (yi > 0) {\n        this.clearCachedConvexTrianglePillar(xi, yi - 1, true);\n        this.clearCachedConvexTrianglePillar(xi, yi - 1, false);\n      }\n      if (yi > 0 && xi > 0) {\n        this.clearCachedConvexTrianglePillar(xi - 1, yi - 1, true);\n      }\n    }\n    /**\n     * Get max/min in a rectangle in the matrix data\n     * @param result An array to store the results in.\n     * @return The result array, if it was passed in. Minimum will be at position 0 and max at 1.\n     */\n  }, {\n    key: \"getRectMinMax\",\n    value: function getRectMinMax(iMinX, iMinY, iMaxX, iMaxY, result) {\n      if (result === void 0) {\n        result = [];\n      }\n\n      // Get max and min of the data\n      var data = this.data; // Set first value\n\n      var max = this.minValue;\n      for (var i = iMinX; i <= iMaxX; i++) {\n        for (var j = iMinY; j <= iMaxY; j++) {\n          var height = data[i][j];\n          if (height > max) {\n            max = height;\n          }\n        }\n      }\n      result[0] = this.minValue;\n      result[1] = max;\n    }\n    /**\n     * Get the index of a local position on the heightfield. The indexes indicate the rectangles, so if your terrain is made of N x N height data points, you will have rectangle indexes ranging from 0 to N-1.\n     * @param result Two-element array\n     * @param clamp If the position should be clamped to the heightfield edge.\n     */\n  }, {\n    key: \"getIndexOfPosition\",\n    value: function getIndexOfPosition(x, y, result, clamp) {\n      // Get the index of the data points to test against\n      var w = this.elementSize;\n      var data = this.data;\n      var xi = Math.floor(x / w);\n      var yi = Math.floor(y / w);\n      result[0] = xi;\n      result[1] = yi;\n      if (clamp) {\n        // Clamp index to edges\n        if (xi < 0) {\n          xi = 0;\n        }\n        if (yi < 0) {\n          yi = 0;\n        }\n        if (xi >= data.length - 1) {\n          xi = data.length - 1;\n        }\n        if (yi >= data[0].length - 1) {\n          yi = data[0].length - 1;\n        }\n      } // Bail out if we are out of the terrain\n\n      if (xi < 0 || yi < 0 || xi >= data.length - 1 || yi >= data[0].length - 1) {\n        return false;\n      }\n      return true;\n    }\n  }, {\n    key: \"getTriangleAt\",\n    value: function getTriangleAt(x, y, edgeClamp, a, b, c) {\n      var idx = getHeightAt_idx;\n      this.getIndexOfPosition(x, y, idx, edgeClamp);\n      var xi = idx[0];\n      var yi = idx[1];\n      var data = this.data;\n      if (edgeClamp) {\n        xi = Math.min(data.length - 2, Math.max(0, xi));\n        yi = Math.min(data[0].length - 2, Math.max(0, yi));\n      }\n      var elementSize = this.elementSize;\n      var lowerDist2 = Math.pow(x / elementSize - xi, 2) + Math.pow(y / elementSize - yi, 2);\n      var upperDist2 = Math.pow(x / elementSize - (xi + 1), 2) + Math.pow(y / elementSize - (yi + 1), 2);\n      var upper = lowerDist2 > upperDist2;\n      this.getTriangle(xi, yi, upper, a, b, c);\n      return upper;\n    }\n  }, {\n    key: \"getNormalAt\",\n    value: function getNormalAt(x, y, edgeClamp, result) {\n      var a = getNormalAt_a;\n      var b = getNormalAt_b;\n      var c = getNormalAt_c;\n      var e0 = getNormalAt_e0;\n      var e1 = getNormalAt_e1;\n      this.getTriangleAt(x, y, edgeClamp, a, b, c);\n      b.vsub(a, e0);\n      c.vsub(a, e1);\n      e0.cross(e1, result);\n      result.normalize();\n    }\n    /**\n     * Get an AABB of a square in the heightfield\n     * @param xi\n     * @param yi\n     * @param result\n     */\n  }, {\n    key: \"getAabbAtIndex\",\n    value: function getAabbAtIndex(xi, yi, _ref) {\n      var lowerBound = _ref.lowerBound,\n        upperBound = _ref.upperBound;\n      var data = this.data;\n      var elementSize = this.elementSize;\n      lowerBound.set(xi * elementSize, yi * elementSize, data[xi][yi]);\n      upperBound.set((xi + 1) * elementSize, (yi + 1) * elementSize, data[xi + 1][yi + 1]);\n    }\n    /**\n     * Get the height in the heightfield at a given position\n     */\n  }, {\n    key: \"getHeightAt\",\n    value: function getHeightAt(x, y, edgeClamp) {\n      var data = this.data;\n      var a = getHeightAt_a;\n      var b = getHeightAt_b;\n      var c = getHeightAt_c;\n      var idx = getHeightAt_idx;\n      this.getIndexOfPosition(x, y, idx, edgeClamp);\n      var xi = idx[0];\n      var yi = idx[1];\n      if (edgeClamp) {\n        xi = Math.min(data.length - 2, Math.max(0, xi));\n        yi = Math.min(data[0].length - 2, Math.max(0, yi));\n      }\n      var upper = this.getTriangleAt(x, y, edgeClamp, a, b, c);\n      barycentricWeights(x, y, a.x, a.y, b.x, b.y, c.x, c.y, getHeightAt_weights);\n      var w = getHeightAt_weights;\n      if (upper) {\n        // Top triangle verts\n        return data[xi + 1][yi + 1] * w.x + data[xi][yi + 1] * w.y + data[xi + 1][yi] * w.z;\n      } else {\n        // Top triangle verts\n        return data[xi][yi] * w.x + data[xi + 1][yi] * w.y + data[xi][yi + 1] * w.z;\n      }\n    }\n  }, {\n    key: \"getCacheConvexTrianglePillarKey\",\n    value: function getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle) {\n      return \"\".concat(xi, \"_\").concat(yi, \"_\").concat(getUpperTriangle ? 1 : 0);\n    }\n  }, {\n    key: \"getCachedConvexTrianglePillar\",\n    value: function getCachedConvexTrianglePillar(xi, yi, getUpperTriangle) {\n      return this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)];\n    }\n  }, {\n    key: \"setCachedConvexTrianglePillar\",\n    value: function setCachedConvexTrianglePillar(xi, yi, getUpperTriangle, convex, offset) {\n      this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)] = {\n        convex: convex,\n        offset: offset\n      };\n    }\n  }, {\n    key: \"clearCachedConvexTrianglePillar\",\n    value: function clearCachedConvexTrianglePillar(xi, yi, getUpperTriangle) {\n      delete this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)];\n    }\n    /**\n     * Get a triangle from the heightfield\n     */\n  }, {\n    key: \"getTriangle\",\n    value: function getTriangle(xi, yi, upper, a, b, c) {\n      var data = this.data;\n      var elementSize = this.elementSize;\n      if (upper) {\n        // Top triangle verts\n        a.set((xi + 1) * elementSize, (yi + 1) * elementSize, data[xi + 1][yi + 1]);\n        b.set(xi * elementSize, (yi + 1) * elementSize, data[xi][yi + 1]);\n        c.set((xi + 1) * elementSize, yi * elementSize, data[xi + 1][yi]);\n      } else {\n        // Top triangle verts\n        a.set(xi * elementSize, yi * elementSize, data[xi][yi]);\n        b.set((xi + 1) * elementSize, yi * elementSize, data[xi + 1][yi]);\n        c.set(xi * elementSize, (yi + 1) * elementSize, data[xi][yi + 1]);\n      }\n    }\n    /**\n     * Get a triangle in the terrain in the form of a triangular convex shape.\n     */\n  }, {\n    key: \"getConvexTrianglePillar\",\n    value: function getConvexTrianglePillar(xi, yi, getUpperTriangle) {\n      var result = this.pillarConvex;\n      var offsetResult = this.pillarOffset;\n      if (this.cacheEnabled) {\n        var _data = this.getCachedConvexTrianglePillar(xi, yi, getUpperTriangle);\n        if (_data) {\n          this.pillarConvex = _data.convex;\n          this.pillarOffset = _data.offset;\n          return;\n        }\n        result = new ConvexPolyhedron();\n        offsetResult = new Vec3();\n        this.pillarConvex = result;\n        this.pillarOffset = offsetResult;\n      }\n      var data = this.data;\n      var elementSize = this.elementSize;\n      var faces = result.faces; // Reuse verts if possible\n\n      result.vertices.length = 6;\n      for (var i = 0; i < 6; i++) {\n        if (!result.vertices[i]) {\n          result.vertices[i] = new Vec3();\n        }\n      } // Reuse faces if possible\n\n      faces.length = 5;\n      for (var _i23 = 0; _i23 < 5; _i23++) {\n        if (!faces[_i23]) {\n          faces[_i23] = [];\n        }\n      }\n      var verts = result.vertices;\n      var h = (Math.min(data[xi][yi], data[xi + 1][yi], data[xi][yi + 1], data[xi + 1][yi + 1]) - this.minValue) / 2 + this.minValue;\n      if (!getUpperTriangle) {\n        // Center of the triangle pillar - all polygons are given relative to this one\n        offsetResult.set((xi + 0.25) * elementSize,\n        // sort of center of a triangle\n        (yi + 0.25) * elementSize, h // vertical center\n        ); // Top triangle verts\n\n        verts[0].set(-0.25 * elementSize, -0.25 * elementSize, data[xi][yi] - h);\n        verts[1].set(0.75 * elementSize, -0.25 * elementSize, data[xi + 1][yi] - h);\n        verts[2].set(-0.25 * elementSize, 0.75 * elementSize, data[xi][yi + 1] - h); // bottom triangle verts\n\n        verts[3].set(-0.25 * elementSize, -0.25 * elementSize, -Math.abs(h) - 1);\n        verts[4].set(0.75 * elementSize, -0.25 * elementSize, -Math.abs(h) - 1);\n        verts[5].set(-0.25 * elementSize, 0.75 * elementSize, -Math.abs(h) - 1); // top triangle\n\n        faces[0][0] = 0;\n        faces[0][1] = 1;\n        faces[0][2] = 2; // bottom triangle\n\n        faces[1][0] = 5;\n        faces[1][1] = 4;\n        faces[1][2] = 3; // -x facing quad\n\n        faces[2][0] = 0;\n        faces[2][1] = 2;\n        faces[2][2] = 5;\n        faces[2][3] = 3; // -y facing quad\n\n        faces[3][0] = 1;\n        faces[3][1] = 0;\n        faces[3][2] = 3;\n        faces[3][3] = 4; // +xy facing quad\n\n        faces[4][0] = 4;\n        faces[4][1] = 5;\n        faces[4][2] = 2;\n        faces[4][3] = 1;\n      } else {\n        // Center of the triangle pillar - all polygons are given relative to this one\n        offsetResult.set((xi + 0.75) * elementSize,\n        // sort of center of a triangle\n        (yi + 0.75) * elementSize, h // vertical center\n        ); // Top triangle verts\n\n        verts[0].set(0.25 * elementSize, 0.25 * elementSize, data[xi + 1][yi + 1] - h);\n        verts[1].set(-0.75 * elementSize, 0.25 * elementSize, data[xi][yi + 1] - h);\n        verts[2].set(0.25 * elementSize, -0.75 * elementSize, data[xi + 1][yi] - h); // bottom triangle verts\n\n        verts[3].set(0.25 * elementSize, 0.25 * elementSize, -Math.abs(h) - 1);\n        verts[4].set(-0.75 * elementSize, 0.25 * elementSize, -Math.abs(h) - 1);\n        verts[5].set(0.25 * elementSize, -0.75 * elementSize, -Math.abs(h) - 1); // Top triangle\n\n        faces[0][0] = 0;\n        faces[0][1] = 1;\n        faces[0][2] = 2; // bottom triangle\n\n        faces[1][0] = 5;\n        faces[1][1] = 4;\n        faces[1][2] = 3; // +x facing quad\n\n        faces[2][0] = 2;\n        faces[2][1] = 5;\n        faces[2][2] = 3;\n        faces[2][3] = 0; // +y facing quad\n\n        faces[3][0] = 3;\n        faces[3][1] = 4;\n        faces[3][2] = 1;\n        faces[3][3] = 0; // -xy facing quad\n\n        faces[4][0] = 1;\n        faces[4][1] = 4;\n        faces[4][2] = 5;\n        faces[4][3] = 2;\n      }\n      result.computeNormals();\n      result.computeEdges();\n      result.updateBoundingSphereRadius();\n      this.setCachedConvexTrianglePillar(xi, yi, getUpperTriangle, result, offsetResult);\n    }\n  }, {\n    key: \"calculateLocalInertia\",\n    value: function calculateLocalInertia(mass, target) {\n      if (target === void 0) {\n        target = new Vec3();\n      }\n      target.set(0, 0, 0);\n      return target;\n    }\n  }, {\n    key: \"volume\",\n    value: function volume() {\n      return (\n        // The terrain is infinite\n        Number.MAX_VALUE\n      );\n    }\n  }, {\n    key: \"calculateWorldAABB\",\n    value: function calculateWorldAABB(pos, quat, min, max) {\n      /** @TODO do it properly */\n      min.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n      max.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n    }\n  }, {\n    key: \"updateBoundingSphereRadius\",\n    value: function updateBoundingSphereRadius() {\n      // Use the bounding box of the min/max values\n      var data = this.data;\n      var s = this.elementSize;\n      this.boundingSphereRadius = new Vec3(data.length * s, data[0].length * s, Math.max(Math.abs(this.maxValue), Math.abs(this.minValue))).length();\n    }\n    /**\n     * Sets the height values from an image. Currently only supported in browser.\n     */\n  }, {\n    key: \"setHeightsFromImage\",\n    value: function setHeightsFromImage(image, scale) {\n      var x = scale.x,\n        z = scale.z,\n        y = scale.y;\n      var canvas = document.createElement('canvas');\n      canvas.width = image.width;\n      canvas.height = image.height;\n      var context = canvas.getContext('2d');\n      context.drawImage(image, 0, 0);\n      var imageData = context.getImageData(0, 0, image.width, image.height);\n      var matrix = this.data;\n      matrix.length = 0;\n      this.elementSize = Math.abs(x) / imageData.width;\n      for (var i = 0; i < imageData.height; i++) {\n        var row = [];\n        for (var j = 0; j < imageData.width; j++) {\n          var _a3 = imageData.data[(i * imageData.height + j) * 4];\n          var _b6 = imageData.data[(i * imageData.height + j) * 4 + 1];\n          var _c = imageData.data[(i * imageData.height + j) * 4 + 2];\n          var height = (_a3 + _b6 + _c) / 4 / 255 * z;\n          if (x < 0) {\n            row.push(height);\n          } else {\n            row.unshift(height);\n          }\n        }\n        if (y < 0) {\n          matrix.unshift(row);\n        } else {\n          matrix.push(row);\n        }\n      }\n      this.updateMaxValue();\n      this.updateMinValue();\n      this.update();\n    }\n  }]);\n  return Heightfield;\n}(Shape);\nvar getHeightAt_idx = [];\nvar getHeightAt_weights = new Vec3();\nvar getHeightAt_a = new Vec3();\nvar getHeightAt_b = new Vec3();\nvar getHeightAt_c = new Vec3();\nvar getNormalAt_a = new Vec3();\nvar getNormalAt_b = new Vec3();\nvar getNormalAt_c = new Vec3();\nvar getNormalAt_e0 = new Vec3();\nvar getNormalAt_e1 = new Vec3(); // from https://en.wikipedia.org/wiki/Barycentric_coordinate_system\n\nfunction barycentricWeights(x, y, ax, ay, bx, by, cx, cy, result) {\n  result.x = ((by - cy) * (x - cx) + (cx - bx) * (y - cy)) / ((by - cy) * (ax - cx) + (cx - bx) * (ay - cy));\n  result.y = ((cy - ay) * (x - cx) + (ax - cx) * (y - cy)) / ((by - cy) * (ax - cx) + (cx - bx) * (ay - cy));\n  result.z = 1 - result.x - result.y;\n}\n\n/**\n * OctreeNode\n */\nvar OctreeNode = /*#__PURE__*/function () {\n  /** The root node */\n\n  /** Boundary of this node */\n\n  /** Contained data at the current node level */\n\n  /** Children to this node */\n  function OctreeNode(options) {\n    _classCallCheck(this, OctreeNode);\n    if (options === void 0) {\n      options = {};\n    }\n    this.root = options.root || null;\n    this.aabb = options.aabb ? options.aabb.clone() : new AABB();\n    this.data = [];\n    this.children = [];\n  }\n  /**\n   * reset\n   */\n  _createClass(OctreeNode, [{\n    key: \"reset\",\n    value: function reset() {\n      this.children.length = this.data.length = 0;\n    }\n    /**\n     * Insert data into this node\n     * @return True if successful, otherwise false\n     */\n  }, {\n    key: \"insert\",\n    value: function insert(aabb, elementData, level) {\n      if (level === void 0) {\n        level = 0;\n      }\n      var nodeData = this.data; // Ignore objects that do not belong in this node\n\n      if (!this.aabb.contains(aabb)) {\n        return false; // object cannot be added\n      }\n\n      var children = this.children;\n      var maxDepth = this.maxDepth || this.root.maxDepth;\n      if (level < maxDepth) {\n        // Subdivide if there are no children yet\n        var subdivided = false;\n        if (!children.length) {\n          this.subdivide();\n          subdivided = true;\n        } // add to whichever node will accept it\n\n        for (var i = 0; i !== 8; i++) {\n          if (children[i].insert(aabb, elementData, level + 1)) {\n            return true;\n          }\n        }\n        if (subdivided) {\n          // No children accepted! Might as well just remove em since they contain none\n          children.length = 0;\n        }\n      } // Too deep, or children didnt want it. add it in current node\n\n      nodeData.push(elementData);\n      return true;\n    }\n    /**\n     * Create 8 equally sized children nodes and put them in the `children` array.\n     */\n  }, {\n    key: \"subdivide\",\n    value: function subdivide() {\n      var aabb = this.aabb;\n      var l = aabb.lowerBound;\n      var u = aabb.upperBound;\n      var children = this.children;\n      children.push(new OctreeNode({\n        aabb: new AABB({\n          lowerBound: new Vec3(0, 0, 0)\n        })\n      }), new OctreeNode({\n        aabb: new AABB({\n          lowerBound: new Vec3(1, 0, 0)\n        })\n      }), new OctreeNode({\n        aabb: new AABB({\n          lowerBound: new Vec3(1, 1, 0)\n        })\n      }), new OctreeNode({\n        aabb: new AABB({\n          lowerBound: new Vec3(1, 1, 1)\n        })\n      }), new OctreeNode({\n        aabb: new AABB({\n          lowerBound: new Vec3(0, 1, 1)\n        })\n      }), new OctreeNode({\n        aabb: new AABB({\n          lowerBound: new Vec3(0, 0, 1)\n        })\n      }), new OctreeNode({\n        aabb: new AABB({\n          lowerBound: new Vec3(1, 0, 1)\n        })\n      }), new OctreeNode({\n        aabb: new AABB({\n          lowerBound: new Vec3(0, 1, 0)\n        })\n      }));\n      u.vsub(l, halfDiagonal);\n      halfDiagonal.scale(0.5, halfDiagonal);\n      var root = this.root || this;\n      for (var i = 0; i !== 8; i++) {\n        var child = children[i]; // Set current node as root\n\n        child.root = root; // Compute bounds\n\n        var lowerBound = child.aabb.lowerBound;\n        lowerBound.x *= halfDiagonal.x;\n        lowerBound.y *= halfDiagonal.y;\n        lowerBound.z *= halfDiagonal.z;\n        lowerBound.vadd(l, lowerBound); // Upper bound is always lower bound + halfDiagonal\n\n        lowerBound.vadd(halfDiagonal, child.aabb.upperBound);\n      }\n    }\n    /**\n     * Get all data, potentially within an AABB\n     * @return The \"result\" object\n     */\n  }, {\n    key: \"aabbQuery\",\n    value: function aabbQuery(aabb, result) {\n      this.data; // abort if the range does not intersect this node\n      // if (!this.aabb.overlaps(aabb)){\n      //     return result;\n      // }\n      // Add objects at this level\n      // Array.prototype.push.apply(result, nodeData);\n      // Add child data\n      // @todo unwrap recursion into a queue / loop, that's faster in JS\n\n      this.children; // for (let i = 0, N = this.children.length; i !== N; i++) {\n      //     children[i].aabbQuery(aabb, result);\n      // }\n\n      var queue = [this];\n      while (queue.length) {\n        var node = queue.pop();\n        if (node.aabb.overlaps(aabb)) {\n          Array.prototype.push.apply(result, node.data);\n        }\n        Array.prototype.push.apply(queue, node.children);\n      }\n      return result;\n    }\n    /**\n     * Get all data, potentially intersected by a ray.\n     * @return The \"result\" object\n     */\n  }, {\n    key: \"rayQuery\",\n    value: function rayQuery(ray, treeTransform, result) {\n      // Use aabb query for now.\n\n      /** @todo implement real ray query which needs less lookups */\n      ray.getAABB(tmpAABB);\n      tmpAABB.toLocalFrame(treeTransform, tmpAABB);\n      this.aabbQuery(tmpAABB, result);\n      return result;\n    }\n    /**\n     * removeEmptyNodes\n     */\n  }, {\n    key: \"removeEmptyNodes\",\n    value: function removeEmptyNodes() {\n      for (var i = this.children.length - 1; i >= 0; i--) {\n        this.children[i].removeEmptyNodes();\n        if (!this.children[i].children.length && !this.children[i].data.length) {\n          this.children.splice(i, 1);\n        }\n      }\n    }\n  }]);\n  return OctreeNode;\n}();\n/**\n * Octree\n */\nvar Octree = /*#__PURE__*/function (_OctreeNode) {\n  _inherits(Octree, _OctreeNode);\n  var _super22 = _createSuper(Octree);\n  /**\n   * Maximum subdivision depth\n   * @default 8\n   */\n\n  /**\n   * @param aabb The total AABB of the tree\n   */\n  function Octree(aabb, options) {\n    var _this20;\n    _classCallCheck(this, Octree);\n    if (options === void 0) {\n      options = {};\n    }\n    _this20 = _super22.call(this, {\n      root: null,\n      aabb: aabb\n    });\n    _this20.maxDepth = typeof options.maxDepth !== 'undefined' ? options.maxDepth : 8;\n    return _this20;\n  }\n  return _createClass(Octree);\n}(OctreeNode);\nvar halfDiagonal = new Vec3();\nvar tmpAABB = new AABB();\n\n/**\n * Trimesh.\n * @example\n *     // How to make a mesh with a single triangle\n *     const vertices = [\n *         0, 0, 0, // vertex 0\n *         1, 0, 0, // vertex 1\n *         0, 1, 0  // vertex 2\n *     ]\n *     const indices = [\n *         0, 1, 2  // triangle 0\n *     ]\n *     const trimeshShape = new CANNON.Trimesh(vertices, indices)\n */\nvar Trimesh = /*#__PURE__*/function (_Shape7) {\n  _inherits(Trimesh, _Shape7);\n  var _super23 = _createSuper(Trimesh);\n  /**\n   * vertices\n   */\n\n  /**\n   * Array of integers, indicating which vertices each triangle consists of. The length of this array is thus 3 times the number of triangles.\n   */\n\n  /**\n   * The normals data.\n   */\n\n  /**\n   * The local AABB of the mesh.\n   */\n\n  /**\n   * References to vertex pairs, making up all unique edges in the trimesh.\n   */\n\n  /**\n   * Local scaling of the mesh. Use .setScale() to set it.\n   */\n\n  /**\n   * The indexed triangles. Use .updateTree() to update it.\n   */\n  function Trimesh(vertices, indices) {\n    var _this21;\n    _classCallCheck(this, Trimesh);\n    _this21 = _super23.call(this, {\n      type: Shape.types.TRIMESH\n    });\n    _this21.vertices = new Float32Array(vertices);\n    _this21.indices = new Int16Array(indices);\n    _this21.normals = new Float32Array(indices.length);\n    _this21.aabb = new AABB();\n    _this21.edges = null;\n    _this21.scale = new Vec3(1, 1, 1);\n    _this21.tree = new Octree();\n    _this21.updateEdges();\n    _this21.updateNormals();\n    _this21.updateAABB();\n    _this21.updateBoundingSphereRadius();\n    _this21.updateTree();\n    return _this21;\n  }\n  /**\n   * updateTree\n   */\n  _createClass(Trimesh, [{\n    key: \"updateTree\",\n    value: function updateTree() {\n      var tree = this.tree;\n      tree.reset();\n      tree.aabb.copy(this.aabb);\n      var scale = this.scale; // The local mesh AABB is scaled, but the octree AABB should be unscaled\n\n      tree.aabb.lowerBound.x *= 1 / scale.x;\n      tree.aabb.lowerBound.y *= 1 / scale.y;\n      tree.aabb.lowerBound.z *= 1 / scale.z;\n      tree.aabb.upperBound.x *= 1 / scale.x;\n      tree.aabb.upperBound.y *= 1 / scale.y;\n      tree.aabb.upperBound.z *= 1 / scale.z; // Insert all triangles\n\n      var triangleAABB = new AABB();\n      var a = new Vec3();\n      var b = new Vec3();\n      var c = new Vec3();\n      var points = [a, b, c];\n      for (var i = 0; i < this.indices.length / 3; i++) {\n        //this.getTriangleVertices(i, a, b, c);\n        // Get unscaled triangle verts\n        var i3 = i * 3;\n        this._getUnscaledVertex(this.indices[i3], a);\n        this._getUnscaledVertex(this.indices[i3 + 1], b);\n        this._getUnscaledVertex(this.indices[i3 + 2], c);\n        triangleAABB.setFromPoints(points);\n        tree.insert(triangleAABB, i);\n      }\n      tree.removeEmptyNodes();\n    }\n    /**\n     * Get triangles in a local AABB from the trimesh.\n     * @param result An array of integers, referencing the queried triangles.\n     */\n  }, {\n    key: \"getTrianglesInAABB\",\n    value: function getTrianglesInAABB(aabb, result) {\n      unscaledAABB.copy(aabb); // Scale it to local\n\n      var scale = this.scale;\n      var isx = scale.x;\n      var isy = scale.y;\n      var isz = scale.z;\n      var l = unscaledAABB.lowerBound;\n      var u = unscaledAABB.upperBound;\n      l.x /= isx;\n      l.y /= isy;\n      l.z /= isz;\n      u.x /= isx;\n      u.y /= isy;\n      u.z /= isz;\n      return this.tree.aabbQuery(unscaledAABB, result);\n    }\n    /**\n     * setScale\n     */\n  }, {\n    key: \"setScale\",\n    value: function setScale(scale) {\n      var wasUniform = this.scale.x === this.scale.y && this.scale.y === this.scale.z;\n      var isUniform = scale.x === scale.y && scale.y === scale.z;\n      if (!(wasUniform && isUniform)) {\n        // Non-uniform scaling. Need to update normals.\n        this.updateNormals();\n      }\n      this.scale.copy(scale);\n      this.updateAABB();\n      this.updateBoundingSphereRadius();\n    }\n    /**\n     * Compute the normals of the faces. Will save in the `.normals` array.\n     */\n  }, {\n    key: \"updateNormals\",\n    value: function updateNormals() {\n      var n = computeNormals_n; // Generate normals\n\n      var normals = this.normals;\n      for (var i = 0; i < this.indices.length / 3; i++) {\n        var i3 = i * 3;\n        var _a4 = this.indices[i3];\n        var _b7 = this.indices[i3 + 1];\n        var _c2 = this.indices[i3 + 2];\n        this.getVertex(_a4, va);\n        this.getVertex(_b7, vb);\n        this.getVertex(_c2, vc);\n        Trimesh.computeNormal(vb, va, vc, n);\n        normals[i3] = n.x;\n        normals[i3 + 1] = n.y;\n        normals[i3 + 2] = n.z;\n      }\n    }\n    /**\n     * Update the `.edges` property\n     */\n  }, {\n    key: \"updateEdges\",\n    value: function updateEdges() {\n      var edges = {};\n      var add = function add(a, b) {\n        var key = a < b ? \"\".concat(a, \"_\").concat(b) : \"\".concat(b, \"_\").concat(a);\n        edges[key] = true;\n      };\n      for (var i = 0; i < this.indices.length / 3; i++) {\n        var i3 = i * 3;\n        var _a5 = this.indices[i3];\n        var _b8 = this.indices[i3 + 1];\n        var _c3 = this.indices[i3 + 2];\n        add(_a5, _b8);\n        add(_b8, _c3);\n        add(_c3, _a5);\n      }\n      var keys = Object.keys(edges);\n      this.edges = new Int16Array(keys.length * 2);\n      for (var _i24 = 0; _i24 < keys.length; _i24++) {\n        var indices = keys[_i24].split('_');\n        this.edges[2 * _i24] = parseInt(indices[0], 10);\n        this.edges[2 * _i24 + 1] = parseInt(indices[1], 10);\n      }\n    }\n    /**\n     * Get an edge vertex\n     * @param firstOrSecond 0 or 1, depending on which one of the vertices you need.\n     * @param vertexStore Where to store the result\n     */\n  }, {\n    key: \"getEdgeVertex\",\n    value: function getEdgeVertex(edgeIndex, firstOrSecond, vertexStore) {\n      var vertexIndex = this.edges[edgeIndex * 2 + (firstOrSecond ? 1 : 0)];\n      this.getVertex(vertexIndex, vertexStore);\n    }\n    /**\n     * Get a vector along an edge.\n     */\n  }, {\n    key: \"getEdgeVector\",\n    value: function getEdgeVector(edgeIndex, vectorStore) {\n      var va = getEdgeVector_va;\n      var vb = getEdgeVector_vb;\n      this.getEdgeVertex(edgeIndex, 0, va);\n      this.getEdgeVertex(edgeIndex, 1, vb);\n      vb.vsub(va, vectorStore);\n    }\n    /**\n     * Get face normal given 3 vertices\n     */\n  }, {\n    key: \"getVertex\",\n    value:\n    /**\n     * Get vertex i.\n     * @return The \"out\" vector object\n     */\n\n    function getVertex(i, out) {\n      var scale = this.scale;\n      this._getUnscaledVertex(i, out);\n      out.x *= scale.x;\n      out.y *= scale.y;\n      out.z *= scale.z;\n      return out;\n    }\n    /**\n     * Get raw vertex i\n     * @return The \"out\" vector object\n     */\n  }, {\n    key: \"_getUnscaledVertex\",\n    value: function _getUnscaledVertex(i, out) {\n      var i3 = i * 3;\n      var vertices = this.vertices;\n      return out.set(vertices[i3], vertices[i3 + 1], vertices[i3 + 2]);\n    }\n    /**\n     * Get a vertex from the trimesh,transformed by the given position and quaternion.\n     * @return The \"out\" vector object\n     */\n  }, {\n    key: \"getWorldVertex\",\n    value: function getWorldVertex(i, pos, quat, out) {\n      this.getVertex(i, out);\n      Transform.pointToWorldFrame(pos, quat, out, out);\n      return out;\n    }\n    /**\n     * Get the three vertices for triangle i.\n     */\n  }, {\n    key: \"getTriangleVertices\",\n    value: function getTriangleVertices(i, a, b, c) {\n      var i3 = i * 3;\n      this.getVertex(this.indices[i3], a);\n      this.getVertex(this.indices[i3 + 1], b);\n      this.getVertex(this.indices[i3 + 2], c);\n    }\n    /**\n     * Compute the normal of triangle i.\n     * @return The \"target\" vector object\n     */\n  }, {\n    key: \"getNormal\",\n    value: function getNormal(i, target) {\n      var i3 = i * 3;\n      return target.set(this.normals[i3], this.normals[i3 + 1], this.normals[i3 + 2]);\n    }\n    /**\n     * @return The \"target\" vector object\n     */\n  }, {\n    key: \"calculateLocalInertia\",\n    value: function calculateLocalInertia(mass, target) {\n      // Approximate with box inertia\n      // Exact inertia calculation is overkill, but see http://geometrictools.com/Documentation/PolyhedralMassProperties.pdf for the correct way to do it\n      this.computeLocalAABB(cli_aabb);\n      var x = cli_aabb.upperBound.x - cli_aabb.lowerBound.x;\n      var y = cli_aabb.upperBound.y - cli_aabb.lowerBound.y;\n      var z = cli_aabb.upperBound.z - cli_aabb.lowerBound.z;\n      return target.set(1.0 / 12.0 * mass * (2 * y * 2 * y + 2 * z * 2 * z), 1.0 / 12.0 * mass * (2 * x * 2 * x + 2 * z * 2 * z), 1.0 / 12.0 * mass * (2 * y * 2 * y + 2 * x * 2 * x));\n    }\n    /**\n     * Compute the local AABB for the trimesh\n     */\n  }, {\n    key: \"computeLocalAABB\",\n    value: function computeLocalAABB(aabb) {\n      var l = aabb.lowerBound;\n      var u = aabb.upperBound;\n      var n = this.vertices.length;\n      this.vertices;\n      var v = computeLocalAABB_worldVert;\n      this.getVertex(0, v);\n      l.copy(v);\n      u.copy(v);\n      for (var i = 0; i !== n; i++) {\n        this.getVertex(i, v);\n        if (v.x < l.x) {\n          l.x = v.x;\n        } else if (v.x > u.x) {\n          u.x = v.x;\n        }\n        if (v.y < l.y) {\n          l.y = v.y;\n        } else if (v.y > u.y) {\n          u.y = v.y;\n        }\n        if (v.z < l.z) {\n          l.z = v.z;\n        } else if (v.z > u.z) {\n          u.z = v.z;\n        }\n      }\n    }\n    /**\n     * Update the `.aabb` property\n     */\n  }, {\n    key: \"updateAABB\",\n    value: function updateAABB() {\n      this.computeLocalAABB(this.aabb);\n    }\n    /**\n     * Will update the `.boundingSphereRadius` property\n     */\n  }, {\n    key: \"updateBoundingSphereRadius\",\n    value: function updateBoundingSphereRadius() {\n      // Assume points are distributed with local (0,0,0) as center\n      var max2 = 0;\n      var vertices = this.vertices;\n      var v = new Vec3();\n      for (var i = 0, N = vertices.length / 3; i !== N; i++) {\n        this.getVertex(i, v);\n        var norm2 = v.lengthSquared();\n        if (norm2 > max2) {\n          max2 = norm2;\n        }\n      }\n      this.boundingSphereRadius = Math.sqrt(max2);\n    }\n    /**\n     * calculateWorldAABB\n     */\n  }, {\n    key: \"calculateWorldAABB\",\n    value: function calculateWorldAABB(pos, quat, min, max) {\n      /*\n          const n = this.vertices.length / 3,\n              verts = this.vertices;\n          const minx,miny,minz,maxx,maxy,maxz;\n           const v = tempWorldVertex;\n          for(let i=0; i<n; i++){\n              this.getVertex(i, v);\n              quat.vmult(v, v);\n              pos.vadd(v, v);\n              if (v.x < minx || minx===undefined){\n                  minx = v.x;\n              } else if(v.x > maxx || maxx===undefined){\n                  maxx = v.x;\n              }\n               if (v.y < miny || miny===undefined){\n                  miny = v.y;\n              } else if(v.y > maxy || maxy===undefined){\n                  maxy = v.y;\n              }\n               if (v.z < minz || minz===undefined){\n                  minz = v.z;\n              } else if(v.z > maxz || maxz===undefined){\n                  maxz = v.z;\n              }\n          }\n          min.set(minx,miny,minz);\n          max.set(maxx,maxy,maxz);\n          */\n      // Faster approximation using local AABB\n      var frame = calculateWorldAABB_frame;\n      var result = calculateWorldAABB_aabb;\n      frame.position = pos;\n      frame.quaternion = quat;\n      this.aabb.toWorldFrame(frame, result);\n      min.copy(result.lowerBound);\n      max.copy(result.upperBound);\n    }\n    /**\n     * Get approximate volume\n     */\n  }, {\n    key: \"volume\",\n    value: function volume() {\n      return 4.0 * Math.PI * this.boundingSphereRadius / 3.0;\n    }\n    /**\n     * Create a Trimesh instance, shaped as a torus.\n     */\n  }], [{\n    key: \"computeNormal\",\n    value: function computeNormal(va, vb, vc, target) {\n      vb.vsub(va, ab);\n      vc.vsub(vb, cb);\n      cb.cross(ab, target);\n      if (!target.isZero()) {\n        target.normalize();\n      }\n    }\n  }, {\n    key: \"createTorus\",\n    value: function createTorus(radius, tube, radialSegments, tubularSegments, arc) {\n      if (radius === void 0) {\n        radius = 1;\n      }\n      if (tube === void 0) {\n        tube = 0.5;\n      }\n      if (radialSegments === void 0) {\n        radialSegments = 8;\n      }\n      if (tubularSegments === void 0) {\n        tubularSegments = 6;\n      }\n      if (arc === void 0) {\n        arc = Math.PI * 2;\n      }\n      var vertices = [];\n      var indices = [];\n      for (var j = 0; j <= radialSegments; j++) {\n        for (var i = 0; i <= tubularSegments; i++) {\n          var u = i / tubularSegments * arc;\n          var v = j / radialSegments * Math.PI * 2;\n          var x = (radius + tube * Math.cos(v)) * Math.cos(u);\n          var y = (radius + tube * Math.cos(v)) * Math.sin(u);\n          var z = tube * Math.sin(v);\n          vertices.push(x, y, z);\n        }\n      }\n      for (var _j3 = 1; _j3 <= radialSegments; _j3++) {\n        for (var _i25 = 1; _i25 <= tubularSegments; _i25++) {\n          var _a6 = (tubularSegments + 1) * _j3 + _i25 - 1;\n          var _b9 = (tubularSegments + 1) * (_j3 - 1) + _i25 - 1;\n          var _c4 = (tubularSegments + 1) * (_j3 - 1) + _i25;\n          var d = (tubularSegments + 1) * _j3 + _i25;\n          indices.push(_a6, _b9, d);\n          indices.push(_b9, _c4, d);\n        }\n      }\n      return new Trimesh(vertices, indices);\n    }\n  }]);\n  return Trimesh;\n}(Shape);\nvar computeNormals_n = new Vec3();\nvar unscaledAABB = new AABB();\nvar getEdgeVector_va = new Vec3();\nvar getEdgeVector_vb = new Vec3();\nvar cb = new Vec3();\nvar ab = new Vec3();\nvar va = new Vec3();\nvar vb = new Vec3();\nvar vc = new Vec3();\nvar cli_aabb = new AABB();\nvar computeLocalAABB_worldVert = new Vec3();\nvar calculateWorldAABB_frame = new Transform();\nvar calculateWorldAABB_aabb = new AABB();\n\n/**\n * Constraint equation solver base class.\n */\nvar Solver = /*#__PURE__*/function () {\n  /**\n   * All equations to be solved\n   */\n\n  /**\n   * @todo remove useless constructor\n   */\n  function Solver() {\n    _classCallCheck(this, Solver);\n    this.equations = [];\n  }\n  /**\n   * Should be implemented in subclasses!\n   * @todo use abstract\n   * @return number of iterations performed\n   */\n  _createClass(Solver, [{\n    key: \"solve\",\n    value: function solve(dt, world) {\n      return (\n        // Should return the number of iterations done!\n        0\n      );\n    }\n    /**\n     * Add an equation\n     */\n  }, {\n    key: \"addEquation\",\n    value: function addEquation(eq) {\n      if (eq.enabled && !eq.bi.isTrigger && !eq.bj.isTrigger) {\n        this.equations.push(eq);\n      }\n    }\n    /**\n     * Remove an equation\n     */\n  }, {\n    key: \"removeEquation\",\n    value: function removeEquation(eq) {\n      var eqs = this.equations;\n      var i = eqs.indexOf(eq);\n      if (i !== -1) {\n        eqs.splice(i, 1);\n      }\n    }\n    /**\n     * Add all equations\n     */\n  }, {\n    key: \"removeAllEquations\",\n    value: function removeAllEquations() {\n      this.equations.length = 0;\n    }\n  }]);\n  return Solver;\n}();\n/**\n * Constraint equation Gauss-Seidel solver.\n * @todo The spook parameters should be specified for each constraint, not globally.\n * @see https://www8.cs.umu.se/kurser/5DV058/VT09/lectures/spooknotes.pdf\n */\nvar GSSolver = /*#__PURE__*/function (_Solver) {\n  _inherits(GSSolver, _Solver);\n  var _super24 = _createSuper(GSSolver);\n  /**\n   * The number of solver iterations determines quality of the constraints in the world.\n   * The more iterations, the more correct simulation. More iterations need more computations though. If you have a large gravity force in your world, you will need more iterations.\n   */\n\n  /**\n   * When tolerance is reached, the system is assumed to be converged.\n   */\n\n  /**\n   * @todo remove useless constructor\n   */\n  function GSSolver() {\n    var _this22;\n    _classCallCheck(this, GSSolver);\n    _this22 = _super24.call(this);\n    _this22.iterations = 10;\n    _this22.tolerance = 1e-7;\n    return _this22;\n  }\n  /**\n   * Solve\n   * @return number of iterations performed\n   */\n  _createClass(GSSolver, [{\n    key: \"solve\",\n    value: function solve(dt, world) {\n      var iter = 0;\n      var maxIter = this.iterations;\n      var tolSquared = this.tolerance * this.tolerance;\n      var equations = this.equations;\n      var Neq = equations.length;\n      var bodies = world.bodies;\n      var Nbodies = bodies.length;\n      var h = dt;\n      var B;\n      var invC;\n      var deltalambda;\n      var deltalambdaTot;\n      var GWlambda;\n      var lambdaj; // Update solve mass\n\n      if (Neq !== 0) {\n        for (var i = 0; i !== Nbodies; i++) {\n          bodies[i].updateSolveMassProperties();\n        }\n      } // Things that do not change during iteration can be computed once\n\n      var invCs = GSSolver_solve_invCs;\n      var Bs = GSSolver_solve_Bs;\n      var lambda = GSSolver_solve_lambda;\n      invCs.length = Neq;\n      Bs.length = Neq;\n      lambda.length = Neq;\n      for (var _i26 = 0; _i26 !== Neq; _i26++) {\n        var _c5 = equations[_i26];\n        lambda[_i26] = 0.0;\n        Bs[_i26] = _c5.computeB(h);\n        invCs[_i26] = 1.0 / _c5.computeC();\n      }\n      if (Neq !== 0) {\n        // Reset vlambda\n        for (var _i27 = 0; _i27 !== Nbodies; _i27++) {\n          var _b10 = bodies[_i27];\n          var vlambda = _b10.vlambda;\n          var wlambda = _b10.wlambda;\n          vlambda.set(0, 0, 0);\n          wlambda.set(0, 0, 0);\n        } // Iterate over equations\n\n        for (iter = 0; iter !== maxIter; iter++) {\n          // Accumulate the total error for each iteration.\n          deltalambdaTot = 0.0;\n          for (var j = 0; j !== Neq; j++) {\n            var _c6 = equations[j]; // Compute iteration\n\n            B = Bs[j];\n            invC = invCs[j];\n            lambdaj = lambda[j];\n            GWlambda = _c6.computeGWlambda();\n            deltalambda = invC * (B - GWlambda - _c6.eps * lambdaj); // Clamp if we are not within the min/max interval\n\n            if (lambdaj + deltalambda < _c6.minForce) {\n              deltalambda = _c6.minForce - lambdaj;\n            } else if (lambdaj + deltalambda > _c6.maxForce) {\n              deltalambda = _c6.maxForce - lambdaj;\n            }\n            lambda[j] += deltalambda;\n            deltalambdaTot += deltalambda > 0.0 ? deltalambda : -deltalambda; // abs(deltalambda)\n\n            _c6.addToWlambda(deltalambda);\n          } // If the total error is small enough - stop iterate\n\n          if (deltalambdaTot * deltalambdaTot < tolSquared) {\n            break;\n          }\n        } // Add result to velocity\n\n        for (var _i28 = 0; _i28 !== Nbodies; _i28++) {\n          var _b11 = bodies[_i28];\n          var v = _b11.velocity;\n          var w = _b11.angularVelocity;\n          _b11.vlambda.vmul(_b11.linearFactor, _b11.vlambda);\n          v.vadd(_b11.vlambda, v);\n          _b11.wlambda.vmul(_b11.angularFactor, _b11.wlambda);\n          w.vadd(_b11.wlambda, w);\n        } // Set the `.multiplier` property of each equation\n\n        var l = equations.length;\n        var invDt = 1 / h;\n        while (l--) {\n          equations[l].multiplier = lambda[l] * invDt;\n        }\n      }\n      return iter;\n    }\n  }]);\n  return GSSolver;\n}(Solver); // Just temporary number holders that we want to reuse each iteration.\nvar GSSolver_solve_lambda = [];\nvar GSSolver_solve_invCs = [];\nvar GSSolver_solve_Bs = [];\n\n/**\n * Splits the equations into islands and solves them independently. Can improve performance.\n */\nvar SplitSolver = /*#__PURE__*/function (_Solver2) {\n  _inherits(SplitSolver, _Solver2);\n  var _super25 = _createSuper(SplitSolver);\n  /**\n   * The number of solver iterations determines quality of the constraints in the world. The more iterations, the more correct simulation. More iterations need more computations though. If you have a large gravity force in your world, you will need more iterations.\n   */\n\n  /**\n   * When tolerance is reached, the system is assumed to be converged.\n   */\n\n  /** subsolver */\n  function SplitSolver(subsolver) {\n    var _this23;\n    _classCallCheck(this, SplitSolver);\n    _this23 = _super25.call(this);\n    _this23.iterations = 10;\n    _this23.tolerance = 1e-7;\n    _this23.subsolver = subsolver;\n    _this23.nodes = [];\n    _this23.nodePool = []; // Create needed nodes, reuse if possible\n\n    while (_this23.nodePool.length < 128) {\n      _this23.nodePool.push(_this23.createNode());\n    }\n    return _this23;\n  }\n  /**\n   * createNode\n   */\n  _createClass(SplitSolver, [{\n    key: \"createNode\",\n    value: function createNode() {\n      return {\n        body: null,\n        children: [],\n        eqs: [],\n        visited: false\n      };\n    }\n    /**\n     * Solve the subsystems\n     * @return number of iterations performed\n     */\n  }, {\n    key: \"solve\",\n    value: function solve(dt, world) {\n      var nodes = SplitSolver_solve_nodes;\n      var nodePool = this.nodePool;\n      var bodies = world.bodies;\n      var equations = this.equations;\n      var Neq = equations.length;\n      var Nbodies = bodies.length;\n      var subsolver = this.subsolver; // Create needed nodes, reuse if possible\n\n      while (nodePool.length < Nbodies) {\n        nodePool.push(this.createNode());\n      }\n      nodes.length = Nbodies;\n      for (var i = 0; i < Nbodies; i++) {\n        nodes[i] = nodePool[i];\n      } // Reset node values\n\n      for (var _i29 = 0; _i29 !== Nbodies; _i29++) {\n        var node = nodes[_i29];\n        node.body = bodies[_i29];\n        node.children.length = 0;\n        node.eqs.length = 0;\n        node.visited = false;\n      }\n      for (var k = 0; k !== Neq; k++) {\n        var eq = equations[k];\n        var _i30 = bodies.indexOf(eq.bi);\n        var j = bodies.indexOf(eq.bj);\n        var ni = nodes[_i30];\n        var nj = nodes[j];\n        ni.children.push(nj);\n        ni.eqs.push(eq);\n        nj.children.push(ni);\n        nj.eqs.push(eq);\n      }\n      var child;\n      var n = 0;\n      var eqs = SplitSolver_solve_eqs;\n      subsolver.tolerance = this.tolerance;\n      subsolver.iterations = this.iterations;\n      var dummyWorld = SplitSolver_solve_dummyWorld;\n      while (child = getUnvisitedNode(nodes)) {\n        eqs.length = 0;\n        dummyWorld.bodies.length = 0;\n        bfs(child, visitFunc, dummyWorld.bodies, eqs);\n        var Neqs = eqs.length;\n        eqs = eqs.sort(sortById);\n        for (var _i31 = 0; _i31 !== Neqs; _i31++) {\n          subsolver.addEquation(eqs[_i31]);\n        }\n        subsolver.solve(dt, dummyWorld);\n        subsolver.removeAllEquations();\n        n++;\n      }\n      return n;\n    }\n  }]);\n  return SplitSolver;\n}(Solver); // Returns the number of subsystems\nvar SplitSolver_solve_nodes = []; // All allocated node objects\n\nvar SplitSolver_solve_eqs = []; // Temp array\n\nvar SplitSolver_solve_dummyWorld = {\n  bodies: []\n}; // Temp object\n\nvar STATIC = Body.STATIC;\nfunction getUnvisitedNode(nodes) {\n  var Nnodes = nodes.length;\n  for (var i = 0; i !== Nnodes; i++) {\n    var node = nodes[i];\n    if (!node.visited && !(node.body.type & STATIC)) {\n      return node;\n    }\n  }\n  return false;\n}\nvar queue = [];\nfunction bfs(root, visitFunc, bds, eqs) {\n  queue.push(root);\n  root.visited = true;\n  visitFunc(root, bds, eqs);\n  while (queue.length) {\n    var node = queue.pop(); // Loop over unvisited child nodes\n\n    var child = void 0;\n    while (child = getUnvisitedNode(node.children)) {\n      child.visited = true;\n      visitFunc(child, bds, eqs);\n      queue.push(child);\n    }\n  }\n}\nfunction visitFunc(node, bds, eqs) {\n  bds.push(node.body);\n  var Neqs = node.eqs.length;\n  for (var i = 0; i !== Neqs; i++) {\n    var eq = node.eqs[i];\n    if (!eqs.includes(eq)) {\n      eqs.push(eq);\n    }\n  }\n}\nfunction sortById(a, b) {\n  return b.id - a.id;\n}\n\n/**\n * For pooling objects that can be reused.\n */\nvar Pool = /*#__PURE__*/function () {\n  function Pool() {\n    _classCallCheck(this, Pool);\n    this.objects = [];\n    this.type = Object;\n  }\n\n  /**\n   * Release an object after use\n   */\n  _createClass(Pool, [{\n    key: \"release\",\n    value: function release() {\n      var Nargs = arguments.length;\n      for (var i = 0; i !== Nargs; i++) {\n        this.objects.push(i < 0 || arguments.length <= i ? undefined : arguments[i]);\n      }\n      return this;\n    }\n    /**\n     * Get an object\n     */\n  }, {\n    key: \"get\",\n    value: function get() {\n      if (this.objects.length === 0) {\n        return this.constructObject();\n      } else {\n        return this.objects.pop();\n      }\n    }\n    /**\n     * Construct an object. Should be implemented in each subclass.\n     */\n  }, {\n    key: \"constructObject\",\n    value: function constructObject() {\n      throw new Error('constructObject() not implemented in this Pool subclass yet!');\n    }\n    /**\n     * @return Self, for chaining\n     */\n  }, {\n    key: \"resize\",\n    value: function resize(size) {\n      var objects = this.objects;\n      while (objects.length > size) {\n        objects.pop();\n      }\n      while (objects.length < size) {\n        objects.push(this.constructObject());\n      }\n      return this;\n    }\n  }]);\n  return Pool;\n}();\n/**\n * Vec3Pool\n */\nvar Vec3Pool = /*#__PURE__*/function (_Pool) {\n  _inherits(Vec3Pool, _Pool);\n  var _super26 = _createSuper(Vec3Pool);\n  function Vec3Pool() {\n    var _this24;\n    _classCallCheck(this, Vec3Pool);\n    _this24 = _super26.apply(this, arguments);\n    _this24.type = Vec3;\n    return _this24;\n  }\n\n  /**\n   * Construct a vector\n   */\n  _createClass(Vec3Pool, [{\n    key: \"constructObject\",\n    value: function constructObject() {\n      return new Vec3();\n    }\n  }]);\n  return Vec3Pool;\n}(Pool); // Naming rule: based of the order in SHAPE_TYPES,\n// the first part of the method is formed by the\n// shape type that comes before, in the second part\n// there is the shape type that comes after in the SHAPE_TYPES list\nvar COLLISION_TYPES = {\n  sphereSphere: Shape.types.SPHERE,\n  spherePlane: Shape.types.SPHERE | Shape.types.PLANE,\n  boxBox: Shape.types.BOX | Shape.types.BOX,\n  sphereBox: Shape.types.SPHERE | Shape.types.BOX,\n  planeBox: Shape.types.PLANE | Shape.types.BOX,\n  convexConvex: Shape.types.CONVEXPOLYHEDRON,\n  sphereConvex: Shape.types.SPHERE | Shape.types.CONVEXPOLYHEDRON,\n  planeConvex: Shape.types.PLANE | Shape.types.CONVEXPOLYHEDRON,\n  boxConvex: Shape.types.BOX | Shape.types.CONVEXPOLYHEDRON,\n  sphereHeightfield: Shape.types.SPHERE | Shape.types.HEIGHTFIELD,\n  boxHeightfield: Shape.types.BOX | Shape.types.HEIGHTFIELD,\n  convexHeightfield: Shape.types.CONVEXPOLYHEDRON | Shape.types.HEIGHTFIELD,\n  sphereParticle: Shape.types.PARTICLE | Shape.types.SPHERE,\n  planeParticle: Shape.types.PLANE | Shape.types.PARTICLE,\n  boxParticle: Shape.types.BOX | Shape.types.PARTICLE,\n  convexParticle: Shape.types.PARTICLE | Shape.types.CONVEXPOLYHEDRON,\n  cylinderCylinder: Shape.types.CYLINDER,\n  sphereCylinder: Shape.types.SPHERE | Shape.types.CYLINDER,\n  planeCylinder: Shape.types.PLANE | Shape.types.CYLINDER,\n  boxCylinder: Shape.types.BOX | Shape.types.CYLINDER,\n  convexCylinder: Shape.types.CONVEXPOLYHEDRON | Shape.types.CYLINDER,\n  heightfieldCylinder: Shape.types.HEIGHTFIELD | Shape.types.CYLINDER,\n  particleCylinder: Shape.types.PARTICLE | Shape.types.CYLINDER,\n  sphereTrimesh: Shape.types.SPHERE | Shape.types.TRIMESH,\n  planeTrimesh: Shape.types.PLANE | Shape.types.TRIMESH\n};\n\n/**\n * Helper class for the World. Generates ContactEquations.\n * @todo Sphere-ConvexPolyhedron contacts\n * @todo Contact reduction\n * @todo should move methods to prototype\n */\nvar Narrowphase = /*#__PURE__*/function (_COLLISION_TYPES$sphe, _COLLISION_TYPES$sphe2, _COLLISION_TYPES$boxB, _COLLISION_TYPES$sphe3, _COLLISION_TYPES$plan, _COLLISION_TYPES$conv, _COLLISION_TYPES$sphe4, _COLLISION_TYPES$plan2, _COLLISION_TYPES$boxC, _COLLISION_TYPES$sphe5, _COLLISION_TYPES$boxH, _COLLISION_TYPES$conv2, _COLLISION_TYPES$sphe6, _COLLISION_TYPES$plan3, _COLLISION_TYPES$boxP, _COLLISION_TYPES$conv3, _COLLISION_TYPES$cyli, _COLLISION_TYPES$sphe7, _COLLISION_TYPES$plan4, _COLLISION_TYPES$boxC2, _COLLISION_TYPES$conv4, _COLLISION_TYPES$heig, _COLLISION_TYPES$part, _COLLISION_TYPES$sphe8, _COLLISION_TYPES$plan5) {\n  // get [COLLISION_TYPES.convexTrimesh]() {\n  //   return this.convexTrimesh\n  // }\n\n  function Narrowphase(world) {\n    _classCallCheck(this, Narrowphase);\n    this.contactPointPool = [];\n    this.frictionEquationPool = [];\n    this.result = [];\n    this.frictionResult = [];\n    this.v3pool = new Vec3Pool();\n    this.world = world;\n    this.currentContactMaterial = world.defaultContactMaterial;\n    this.enableFrictionReduction = false;\n  }\n  /**\n   * Make a contact object, by using the internal pool or creating a new one.\n   */\n  _createClass(Narrowphase, [{\n    key: _COLLISION_TYPES$sphe,\n    get:\n    /**\n     * Internal storage of pooled contact points.\n     */\n\n    /**\n     * Pooled vectors.\n     */\n    function get() {\n      return this.sphereSphere;\n    }\n  }, {\n    key: _COLLISION_TYPES$sphe2,\n    get: function get() {\n      return this.spherePlane;\n    }\n  }, {\n    key: _COLLISION_TYPES$boxB,\n    get: function get() {\n      return this.boxBox;\n    }\n  }, {\n    key: _COLLISION_TYPES$sphe3,\n    get: function get() {\n      return this.sphereBox;\n    }\n  }, {\n    key: _COLLISION_TYPES$plan,\n    get: function get() {\n      return this.planeBox;\n    }\n  }, {\n    key: _COLLISION_TYPES$conv,\n    get: function get() {\n      return this.convexConvex;\n    }\n  }, {\n    key: _COLLISION_TYPES$sphe4,\n    get: function get() {\n      return this.sphereConvex;\n    }\n  }, {\n    key: _COLLISION_TYPES$plan2,\n    get: function get() {\n      return this.planeConvex;\n    }\n  }, {\n    key: _COLLISION_TYPES$boxC,\n    get: function get() {\n      return this.boxConvex;\n    }\n  }, {\n    key: _COLLISION_TYPES$sphe5,\n    get: function get() {\n      return this.sphereHeightfield;\n    }\n  }, {\n    key: _COLLISION_TYPES$boxH,\n    get: function get() {\n      return this.boxHeightfield;\n    }\n  }, {\n    key: _COLLISION_TYPES$conv2,\n    get: function get() {\n      return this.convexHeightfield;\n    }\n  }, {\n    key: _COLLISION_TYPES$sphe6,\n    get: function get() {\n      return this.sphereParticle;\n    }\n  }, {\n    key: _COLLISION_TYPES$plan3,\n    get: function get() {\n      return this.planeParticle;\n    }\n  }, {\n    key: _COLLISION_TYPES$boxP,\n    get: function get() {\n      return this.boxParticle;\n    }\n  }, {\n    key: _COLLISION_TYPES$conv3,\n    get: function get() {\n      return this.convexParticle;\n    }\n  }, {\n    key: _COLLISION_TYPES$cyli,\n    get: function get() {\n      return this.convexConvex;\n    }\n  }, {\n    key: _COLLISION_TYPES$sphe7,\n    get: function get() {\n      return this.sphereConvex;\n    }\n  }, {\n    key: _COLLISION_TYPES$plan4,\n    get: function get() {\n      return this.planeConvex;\n    }\n  }, {\n    key: _COLLISION_TYPES$boxC2,\n    get: function get() {\n      return this.boxConvex;\n    }\n  }, {\n    key: _COLLISION_TYPES$conv4,\n    get: function get() {\n      return this.convexConvex;\n    }\n  }, {\n    key: _COLLISION_TYPES$heig,\n    get: function get() {\n      return this.heightfieldCylinder;\n    }\n  }, {\n    key: _COLLISION_TYPES$part,\n    get: function get() {\n      return this.particleCylinder;\n    }\n  }, {\n    key: _COLLISION_TYPES$sphe8,\n    get: function get() {\n      return this.sphereTrimesh;\n    }\n  }, {\n    key: _COLLISION_TYPES$plan5,\n    get: function get() {\n      return this.planeTrimesh;\n    }\n  }, {\n    key: \"createContactEquation\",\n    value: function createContactEquation(bi, bj, si, sj, overrideShapeA, overrideShapeB) {\n      var c;\n      if (this.contactPointPool.length) {\n        c = this.contactPointPool.pop();\n        c.bi = bi;\n        c.bj = bj;\n      } else {\n        c = new ContactEquation(bi, bj);\n      }\n      c.enabled = bi.collisionResponse && bj.collisionResponse && si.collisionResponse && sj.collisionResponse;\n      var cm = this.currentContactMaterial;\n      c.restitution = cm.restitution;\n      c.setSpookParams(cm.contactEquationStiffness, cm.contactEquationRelaxation, this.world.dt);\n      var matA = si.material || bi.material;\n      var matB = sj.material || bj.material;\n      if (matA && matB && matA.restitution >= 0 && matB.restitution >= 0) {\n        c.restitution = matA.restitution * matB.restitution;\n      }\n      c.si = overrideShapeA || si;\n      c.sj = overrideShapeB || sj;\n      return c;\n    }\n  }, {\n    key: \"createFrictionEquationsFromContact\",\n    value: function createFrictionEquationsFromContact(contactEquation, outArray) {\n      var bodyA = contactEquation.bi;\n      var bodyB = contactEquation.bj;\n      var shapeA = contactEquation.si;\n      var shapeB = contactEquation.sj;\n      var world = this.world;\n      var cm = this.currentContactMaterial; // If friction or restitution were specified in the material, use them\n\n      var friction = cm.friction;\n      var matA = shapeA.material || bodyA.material;\n      var matB = shapeB.material || bodyB.material;\n      if (matA && matB && matA.friction >= 0 && matB.friction >= 0) {\n        friction = matA.friction * matB.friction;\n      }\n      if (friction > 0) {\n        // Create 2 tangent equations\n        // Users may provide a force different from global gravity to use when computing contact friction.\n        var mug = friction * (world.frictionGravity || world.gravity).length();\n        var reducedMass = bodyA.invMass + bodyB.invMass;\n        if (reducedMass > 0) {\n          reducedMass = 1 / reducedMass;\n        }\n        var pool = this.frictionEquationPool;\n        var c1 = pool.length ? pool.pop() : new FrictionEquation(bodyA, bodyB, mug * reducedMass);\n        var c2 = pool.length ? pool.pop() : new FrictionEquation(bodyA, bodyB, mug * reducedMass);\n        c1.bi = c2.bi = bodyA;\n        c1.bj = c2.bj = bodyB;\n        c1.minForce = c2.minForce = -mug * reducedMass;\n        c1.maxForce = c2.maxForce = mug * reducedMass; // Copy over the relative vectors\n\n        c1.ri.copy(contactEquation.ri);\n        c1.rj.copy(contactEquation.rj);\n        c2.ri.copy(contactEquation.ri);\n        c2.rj.copy(contactEquation.rj); // Construct tangents\n\n        contactEquation.ni.tangents(c1.t, c2.t); // Set spook params\n\n        c1.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, world.dt);\n        c2.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, world.dt);\n        c1.enabled = c2.enabled = contactEquation.enabled;\n        outArray.push(c1, c2);\n        return true;\n      }\n      return false;\n    }\n    /**\n     * Take the average N latest contact point on the plane.\n     */\n  }, {\n    key: \"createFrictionFromAverage\",\n    value: function createFrictionFromAverage(numContacts) {\n      // The last contactEquation\n      var c = this.result[this.result.length - 1]; // Create the result: two \"average\" friction equations\n\n      if (!this.createFrictionEquationsFromContact(c, this.frictionResult) || numContacts === 1) {\n        return;\n      }\n      var f1 = this.frictionResult[this.frictionResult.length - 2];\n      var f2 = this.frictionResult[this.frictionResult.length - 1];\n      averageNormal.setZero();\n      averageContactPointA.setZero();\n      averageContactPointB.setZero();\n      var bodyA = c.bi;\n      c.bj;\n      for (var i = 0; i !== numContacts; i++) {\n        c = this.result[this.result.length - 1 - i];\n        if (c.bi !== bodyA) {\n          averageNormal.vadd(c.ni, averageNormal);\n          averageContactPointA.vadd(c.ri, averageContactPointA);\n          averageContactPointB.vadd(c.rj, averageContactPointB);\n        } else {\n          averageNormal.vsub(c.ni, averageNormal);\n          averageContactPointA.vadd(c.rj, averageContactPointA);\n          averageContactPointB.vadd(c.ri, averageContactPointB);\n        }\n      }\n      var invNumContacts = 1 / numContacts;\n      averageContactPointA.scale(invNumContacts, f1.ri);\n      averageContactPointB.scale(invNumContacts, f1.rj);\n      f2.ri.copy(f1.ri); // Should be the same\n\n      f2.rj.copy(f1.rj);\n      averageNormal.normalize();\n      averageNormal.tangents(f1.t, f2.t); // return eq;\n    }\n    /**\n     * Generate all contacts between a list of body pairs\n     * @param p1 Array of body indices\n     * @param p2 Array of body indices\n     * @param result Array to store generated contacts\n     * @param oldcontacts Optional. Array of reusable contact objects\n     */\n  }, {\n    key: \"getContacts\",\n    value: function getContacts(p1, p2, world, result, oldcontacts, frictionResult, frictionPool) {\n      // Save old contact objects\n      this.contactPointPool = oldcontacts;\n      this.frictionEquationPool = frictionPool;\n      this.result = result;\n      this.frictionResult = frictionResult;\n      var qi = tmpQuat1;\n      var qj = tmpQuat2;\n      var xi = tmpVec1;\n      var xj = tmpVec2;\n      for (var k = 0, N = p1.length; k !== N; k++) {\n        // Get current collision bodies\n        var bi = p1[k];\n        var bj = p2[k]; // Get contact material\n\n        var bodyContactMaterial = null;\n        if (bi.material && bj.material) {\n          bodyContactMaterial = world.getContactMaterial(bi.material, bj.material) || null;\n        }\n        var justTest = bi.type & Body.KINEMATIC && bj.type & Body.STATIC || bi.type & Body.STATIC && bj.type & Body.KINEMATIC || bi.type & Body.KINEMATIC && bj.type & Body.KINEMATIC;\n        for (var i = 0; i < bi.shapes.length; i++) {\n          bi.quaternion.mult(bi.shapeOrientations[i], qi);\n          bi.quaternion.vmult(bi.shapeOffsets[i], xi);\n          xi.vadd(bi.position, xi);\n          var si = bi.shapes[i];\n          for (var j = 0; j < bj.shapes.length; j++) {\n            // Compute world transform of shapes\n            bj.quaternion.mult(bj.shapeOrientations[j], qj);\n            bj.quaternion.vmult(bj.shapeOffsets[j], xj);\n            xj.vadd(bj.position, xj);\n            var sj = bj.shapes[j];\n            if (!(si.collisionFilterMask & sj.collisionFilterGroup && sj.collisionFilterMask & si.collisionFilterGroup)) {\n              continue;\n            }\n            if (xi.distanceTo(xj) > si.boundingSphereRadius + sj.boundingSphereRadius) {\n              continue;\n            } // Get collision material\n\n            var shapeContactMaterial = null;\n            if (si.material && sj.material) {\n              shapeContactMaterial = world.getContactMaterial(si.material, sj.material) || null;\n            }\n            this.currentContactMaterial = shapeContactMaterial || bodyContactMaterial || world.defaultContactMaterial; // Get contacts\n\n            var resolverIndex = si.type | sj.type;\n            var resolver = this[resolverIndex];\n            if (resolver) {\n              var retval = false; // TO DO: investigate why sphereParticle and convexParticle\n              // resolvers expect si and sj shapes to be in reverse order\n              // (i.e. larger integer value type first instead of smaller first)\n\n              if (si.type < sj.type) {\n                retval = resolver.call(this, si, sj, xi, xj, qi, qj, bi, bj, si, sj, justTest);\n              } else {\n                retval = resolver.call(this, sj, si, xj, xi, qj, qi, bj, bi, si, sj, justTest);\n              }\n              if (retval && justTest) {\n                // Register overlap\n                world.shapeOverlapKeeper.set(si.id, sj.id);\n                world.bodyOverlapKeeper.set(bi.id, bj.id);\n              }\n            }\n          }\n        }\n      }\n    }\n  }, {\n    key: \"sphereSphere\",\n    value: function sphereSphere(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n      if (justTest) {\n        return xi.distanceSquared(xj) < Math.pow(si.radius + sj.radius, 2);\n      } // We will have only one contact in this case\n\n      var contactEq = this.createContactEquation(bi, bj, si, sj, rsi, rsj); // Contact normal\n\n      xj.vsub(xi, contactEq.ni);\n      contactEq.ni.normalize(); // Contact point locations\n\n      contactEq.ri.copy(contactEq.ni);\n      contactEq.rj.copy(contactEq.ni);\n      contactEq.ri.scale(si.radius, contactEq.ri);\n      contactEq.rj.scale(-sj.radius, contactEq.rj);\n      contactEq.ri.vadd(xi, contactEq.ri);\n      contactEq.ri.vsub(bi.position, contactEq.ri);\n      contactEq.rj.vadd(xj, contactEq.rj);\n      contactEq.rj.vsub(bj.position, contactEq.rj);\n      this.result.push(contactEq);\n      this.createFrictionEquationsFromContact(contactEq, this.frictionResult);\n    }\n  }, {\n    key: \"spherePlane\",\n    value: function spherePlane(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n      // We will have one contact in this case\n      var r = this.createContactEquation(bi, bj, si, sj, rsi, rsj); // Contact normal\n\n      r.ni.set(0, 0, 1);\n      qj.vmult(r.ni, r.ni);\n      r.ni.negate(r.ni); // body i is the sphere, flip normal\n\n      r.ni.normalize(); // Needed?\n      // Vector from sphere center to contact point\n\n      r.ni.scale(si.radius, r.ri); // Project down sphere on plane\n\n      xi.vsub(xj, point_on_plane_to_sphere);\n      r.ni.scale(r.ni.dot(point_on_plane_to_sphere), plane_to_sphere_ortho);\n      point_on_plane_to_sphere.vsub(plane_to_sphere_ortho, r.rj); // The sphere position projected to plane\n\n      if (-point_on_plane_to_sphere.dot(r.ni) <= si.radius) {\n        if (justTest) {\n          return true;\n        } // Make it relative to the body\n\n        var ri = r.ri;\n        var rj = r.rj;\n        ri.vadd(xi, ri);\n        ri.vsub(bi.position, ri);\n        rj.vadd(xj, rj);\n        rj.vsub(bj.position, rj);\n        this.result.push(r);\n        this.createFrictionEquationsFromContact(r, this.frictionResult);\n      }\n    }\n  }, {\n    key: \"boxBox\",\n    value: function boxBox(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n      si.convexPolyhedronRepresentation.material = si.material;\n      sj.convexPolyhedronRepresentation.material = sj.material;\n      si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;\n      sj.convexPolyhedronRepresentation.collisionResponse = sj.collisionResponse;\n      return this.convexConvex(si.convexPolyhedronRepresentation, sj.convexPolyhedronRepresentation, xi, xj, qi, qj, bi, bj, si, sj, justTest);\n    }\n  }, {\n    key: \"sphereBox\",\n    value: function sphereBox(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n      var v3pool = this.v3pool; // we refer to the box as body j\n\n      var sides = sphereBox_sides;\n      xi.vsub(xj, box_to_sphere);\n      sj.getSideNormals(sides, qj);\n      var R = si.radius;\n      var found = false; // Store the resulting side penetration info\n\n      var side_ns = sphereBox_side_ns;\n      var side_ns1 = sphereBox_side_ns1;\n      var side_ns2 = sphereBox_side_ns2;\n      var side_h = null;\n      var side_penetrations = 0;\n      var side_dot1 = 0;\n      var side_dot2 = 0;\n      var side_distance = null;\n      for (var idx = 0, nsides = sides.length; idx !== nsides && found === false; idx++) {\n        // Get the plane side normal (ns)\n        var ns = sphereBox_ns;\n        ns.copy(sides[idx]);\n        var h = ns.length();\n        ns.normalize(); // The normal/distance dot product tells which side of the plane we are\n\n        var dot = box_to_sphere.dot(ns);\n        if (dot < h + R && dot > 0) {\n          // Intersects plane. Now check the other two dimensions\n          var ns1 = sphereBox_ns1;\n          var ns2 = sphereBox_ns2;\n          ns1.copy(sides[(idx + 1) % 3]);\n          ns2.copy(sides[(idx + 2) % 3]);\n          var h1 = ns1.length();\n          var h2 = ns2.length();\n          ns1.normalize();\n          ns2.normalize();\n          var dot1 = box_to_sphere.dot(ns1);\n          var dot2 = box_to_sphere.dot(ns2);\n          if (dot1 < h1 && dot1 > -h1 && dot2 < h2 && dot2 > -h2) {\n            var _dist = Math.abs(dot - h - R);\n            if (side_distance === null || _dist < side_distance) {\n              side_distance = _dist;\n              side_dot1 = dot1;\n              side_dot2 = dot2;\n              side_h = h;\n              side_ns.copy(ns);\n              side_ns1.copy(ns1);\n              side_ns2.copy(ns2);\n              side_penetrations++;\n              if (justTest) {\n                return true;\n              }\n            }\n          }\n        }\n      }\n      if (side_penetrations) {\n        found = true;\n        var _r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n        side_ns.scale(-R, _r.ri); // Sphere r\n\n        _r.ni.copy(side_ns);\n        _r.ni.negate(_r.ni); // Normal should be out of sphere\n\n        side_ns.scale(side_h, side_ns);\n        side_ns1.scale(side_dot1, side_ns1);\n        side_ns.vadd(side_ns1, side_ns);\n        side_ns2.scale(side_dot2, side_ns2);\n        side_ns.vadd(side_ns2, _r.rj); // Make relative to bodies\n\n        _r.ri.vadd(xi, _r.ri);\n        _r.ri.vsub(bi.position, _r.ri);\n        _r.rj.vadd(xj, _r.rj);\n        _r.rj.vsub(bj.position, _r.rj);\n        this.result.push(_r);\n        this.createFrictionEquationsFromContact(_r, this.frictionResult);\n      } // Check corners\n\n      var rj = v3pool.get();\n      var sphere_to_corner = sphereBox_sphere_to_corner;\n      for (var j = 0; j !== 2 && !found; j++) {\n        for (var k = 0; k !== 2 && !found; k++) {\n          for (var l = 0; l !== 2 && !found; l++) {\n            rj.set(0, 0, 0);\n            if (j) {\n              rj.vadd(sides[0], rj);\n            } else {\n              rj.vsub(sides[0], rj);\n            }\n            if (k) {\n              rj.vadd(sides[1], rj);\n            } else {\n              rj.vsub(sides[1], rj);\n            }\n            if (l) {\n              rj.vadd(sides[2], rj);\n            } else {\n              rj.vsub(sides[2], rj);\n            } // World position of corner\n\n            xj.vadd(rj, sphere_to_corner);\n            sphere_to_corner.vsub(xi, sphere_to_corner);\n            if (sphere_to_corner.lengthSquared() < R * R) {\n              if (justTest) {\n                return true;\n              }\n              found = true;\n              var _r2 = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n              _r2.ri.copy(sphere_to_corner);\n              _r2.ri.normalize();\n              _r2.ni.copy(_r2.ri);\n              _r2.ri.scale(R, _r2.ri);\n              _r2.rj.copy(rj); // Make relative to bodies\n\n              _r2.ri.vadd(xi, _r2.ri);\n              _r2.ri.vsub(bi.position, _r2.ri);\n              _r2.rj.vadd(xj, _r2.rj);\n              _r2.rj.vsub(bj.position, _r2.rj);\n              this.result.push(_r2);\n              this.createFrictionEquationsFromContact(_r2, this.frictionResult);\n            }\n          }\n        }\n      }\n      v3pool.release(rj);\n      rj = null; // Check edges\n\n      var edgeTangent = v3pool.get();\n      var edgeCenter = v3pool.get();\n      var r = v3pool.get(); // r = edge center to sphere center\n\n      var orthogonal = v3pool.get();\n      var dist = v3pool.get();\n      var Nsides = sides.length;\n      for (var _j4 = 0; _j4 !== Nsides && !found; _j4++) {\n        for (var _k = 0; _k !== Nsides && !found; _k++) {\n          if (_j4 % 3 !== _k % 3) {\n            // Get edge tangent\n            sides[_k].cross(sides[_j4], edgeTangent);\n            edgeTangent.normalize();\n            sides[_j4].vadd(sides[_k], edgeCenter);\n            r.copy(xi);\n            r.vsub(edgeCenter, r);\n            r.vsub(xj, r);\n            var orthonorm = r.dot(edgeTangent); // distance from edge center to sphere center in the tangent direction\n\n            edgeTangent.scale(orthonorm, orthogonal); // Vector from edge center to sphere center in the tangent direction\n            // Find the third side orthogonal to this one\n\n            var _l = 0;\n            while (_l === _j4 % 3 || _l === _k % 3) {\n              _l++;\n            } // vec from edge center to sphere projected to the plane orthogonal to the edge tangent\n\n            dist.copy(xi);\n            dist.vsub(orthogonal, dist);\n            dist.vsub(edgeCenter, dist);\n            dist.vsub(xj, dist); // Distances in tangent direction and distance in the plane orthogonal to it\n\n            var tdist = Math.abs(orthonorm);\n            var ndist = dist.length();\n            if (tdist < sides[_l].length() && ndist < R) {\n              if (justTest) {\n                return true;\n              }\n              found = true;\n              var res = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n              edgeCenter.vadd(orthogonal, res.rj); // box rj\n\n              res.rj.copy(res.rj);\n              dist.negate(res.ni);\n              res.ni.normalize();\n              res.ri.copy(res.rj);\n              res.ri.vadd(xj, res.ri);\n              res.ri.vsub(xi, res.ri);\n              res.ri.normalize();\n              res.ri.scale(R, res.ri); // Make relative to bodies\n\n              res.ri.vadd(xi, res.ri);\n              res.ri.vsub(bi.position, res.ri);\n              res.rj.vadd(xj, res.rj);\n              res.rj.vsub(bj.position, res.rj);\n              this.result.push(res);\n              this.createFrictionEquationsFromContact(res, this.frictionResult);\n            }\n          }\n        }\n      }\n      v3pool.release(edgeTangent, edgeCenter, r, orthogonal, dist);\n    }\n  }, {\n    key: \"planeBox\",\n    value: function planeBox(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n      sj.convexPolyhedronRepresentation.material = sj.material;\n      sj.convexPolyhedronRepresentation.collisionResponse = sj.collisionResponse;\n      sj.convexPolyhedronRepresentation.id = sj.id;\n      return this.planeConvex(si, sj.convexPolyhedronRepresentation, xi, xj, qi, qj, bi, bj, si, sj, justTest);\n    }\n  }, {\n    key: \"convexConvex\",\n    value: function convexConvex(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest, faceListA, faceListB) {\n      var sepAxis = convexConvex_sepAxis;\n      if (xi.distanceTo(xj) > si.boundingSphereRadius + sj.boundingSphereRadius) {\n        return;\n      }\n      if (si.findSeparatingAxis(sj, xi, qi, xj, qj, sepAxis, faceListA, faceListB)) {\n        var res = [];\n        var q = convexConvex_q;\n        si.clipAgainstHull(xi, qi, sj, xj, qj, sepAxis, -100, 100, res);\n        var numContacts = 0;\n        for (var j = 0; j !== res.length; j++) {\n          if (justTest) {\n            return true;\n          }\n          var r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n          var ri = r.ri;\n          var rj = r.rj;\n          sepAxis.negate(r.ni);\n          res[j].normal.negate(q);\n          q.scale(res[j].depth, q);\n          res[j].point.vadd(q, ri);\n          rj.copy(res[j].point); // Contact points are in world coordinates. Transform back to relative\n\n          ri.vsub(xi, ri);\n          rj.vsub(xj, rj); // Make relative to bodies\n\n          ri.vadd(xi, ri);\n          ri.vsub(bi.position, ri);\n          rj.vadd(xj, rj);\n          rj.vsub(bj.position, rj);\n          this.result.push(r);\n          numContacts++;\n          if (!this.enableFrictionReduction) {\n            this.createFrictionEquationsFromContact(r, this.frictionResult);\n          }\n        }\n        if (this.enableFrictionReduction && numContacts) {\n          this.createFrictionFromAverage(numContacts);\n        }\n      }\n    }\n  }, {\n    key: \"sphereConvex\",\n    value: function sphereConvex(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n      var v3pool = this.v3pool;\n      xi.vsub(xj, convex_to_sphere);\n      var normals = sj.faceNormals;\n      var faces = sj.faces;\n      var verts = sj.vertices;\n      var R = si.radius;\n      //     return;\n      // }\n\n      var found = false; // Check corners\n\n      for (var i = 0; i !== verts.length; i++) {\n        var v = verts[i]; // World position of corner\n\n        var worldCorner = sphereConvex_worldCorner;\n        qj.vmult(v, worldCorner);\n        xj.vadd(worldCorner, worldCorner);\n        var sphere_to_corner = sphereConvex_sphereToCorner;\n        worldCorner.vsub(xi, sphere_to_corner);\n        if (sphere_to_corner.lengthSquared() < R * R) {\n          if (justTest) {\n            return true;\n          }\n          found = true;\n          var r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n          r.ri.copy(sphere_to_corner);\n          r.ri.normalize();\n          r.ni.copy(r.ri);\n          r.ri.scale(R, r.ri);\n          worldCorner.vsub(xj, r.rj); // Should be relative to the body.\n\n          r.ri.vadd(xi, r.ri);\n          r.ri.vsub(bi.position, r.ri); // Should be relative to the body.\n\n          r.rj.vadd(xj, r.rj);\n          r.rj.vsub(bj.position, r.rj);\n          this.result.push(r);\n          this.createFrictionEquationsFromContact(r, this.frictionResult);\n          return;\n        }\n      } // Check side (plane) intersections\n\n      for (var _i32 = 0, nfaces = faces.length; _i32 !== nfaces && found === false; _i32++) {\n        var normal = normals[_i32];\n        var face = faces[_i32]; // Get world-transformed normal of the face\n\n        var worldNormal = sphereConvex_worldNormal;\n        qj.vmult(normal, worldNormal); // Get a world vertex from the face\n\n        var worldPoint = sphereConvex_worldPoint;\n        qj.vmult(verts[face[0]], worldPoint);\n        worldPoint.vadd(xj, worldPoint); // Get a point on the sphere, closest to the face normal\n\n        var worldSpherePointClosestToPlane = sphereConvex_worldSpherePointClosestToPlane;\n        worldNormal.scale(-R, worldSpherePointClosestToPlane);\n        xi.vadd(worldSpherePointClosestToPlane, worldSpherePointClosestToPlane); // Vector from a face point to the closest point on the sphere\n\n        var penetrationVec = sphereConvex_penetrationVec;\n        worldSpherePointClosestToPlane.vsub(worldPoint, penetrationVec); // The penetration. Negative value means overlap.\n\n        var penetration = penetrationVec.dot(worldNormal);\n        var worldPointToSphere = sphereConvex_sphereToWorldPoint;\n        xi.vsub(worldPoint, worldPointToSphere);\n        if (penetration < 0 && worldPointToSphere.dot(worldNormal) > 0) {\n          // Intersects plane. Now check if the sphere is inside the face polygon\n          var faceVerts = []; // Face vertices, in world coords\n\n          for (var j = 0, Nverts = face.length; j !== Nverts; j++) {\n            var worldVertex = v3pool.get();\n            qj.vmult(verts[face[j]], worldVertex);\n            xj.vadd(worldVertex, worldVertex);\n            faceVerts.push(worldVertex);\n          }\n          if (pointInPolygon(faceVerts, worldNormal, xi)) {\n            // Is the sphere center in the face polygon?\n            if (justTest) {\n              return true;\n            }\n            found = true;\n            var _r3 = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n            worldNormal.scale(-R, _r3.ri); // Contact offset, from sphere center to contact\n\n            worldNormal.negate(_r3.ni); // Normal pointing out of sphere\n\n            var penetrationVec2 = v3pool.get();\n            worldNormal.scale(-penetration, penetrationVec2);\n            var penetrationSpherePoint = v3pool.get();\n            worldNormal.scale(-R, penetrationSpherePoint); //xi.vsub(xj).vadd(penetrationSpherePoint).vadd(penetrationVec2 , r.rj);\n\n            xi.vsub(xj, _r3.rj);\n            _r3.rj.vadd(penetrationSpherePoint, _r3.rj);\n            _r3.rj.vadd(penetrationVec2, _r3.rj); // Should be relative to the body.\n\n            _r3.rj.vadd(xj, _r3.rj);\n            _r3.rj.vsub(bj.position, _r3.rj); // Should be relative to the body.\n\n            _r3.ri.vadd(xi, _r3.ri);\n            _r3.ri.vsub(bi.position, _r3.ri);\n            v3pool.release(penetrationVec2);\n            v3pool.release(penetrationSpherePoint);\n            this.result.push(_r3);\n            this.createFrictionEquationsFromContact(_r3, this.frictionResult); // Release world vertices\n\n            for (var _j5 = 0, Nfaceverts = faceVerts.length; _j5 !== Nfaceverts; _j5++) {\n              v3pool.release(faceVerts[_j5]);\n            }\n            return; // We only expect *one* face contact\n          } else {\n            // Edge?\n            for (var _j6 = 0; _j6 !== face.length; _j6++) {\n              // Get two world transformed vertices\n              var _v3 = v3pool.get();\n              var _v4 = v3pool.get();\n              qj.vmult(verts[face[(_j6 + 1) % face.length]], _v3);\n              qj.vmult(verts[face[(_j6 + 2) % face.length]], _v4);\n              xj.vadd(_v3, _v3);\n              xj.vadd(_v4, _v4); // Construct edge vector\n\n              var edge = sphereConvex_edge;\n              _v4.vsub(_v3, edge); // Construct the same vector, but normalized\n\n              var edgeUnit = sphereConvex_edgeUnit;\n              edge.unit(edgeUnit); // p is xi projected onto the edge\n\n              var p = v3pool.get();\n              var v1_to_xi = v3pool.get();\n              xi.vsub(_v3, v1_to_xi);\n              var dot = v1_to_xi.dot(edgeUnit);\n              edgeUnit.scale(dot, p);\n              p.vadd(_v3, p); // Compute a vector from p to the center of the sphere\n\n              var xi_to_p = v3pool.get();\n              p.vsub(xi, xi_to_p); // Collision if the edge-sphere distance is less than the radius\n              // AND if p is in between v1 and v2\n\n              if (dot > 0 && dot * dot < edge.lengthSquared() && xi_to_p.lengthSquared() < R * R) {\n                // Collision if the edge-sphere distance is less than the radius\n                // Edge contact!\n                if (justTest) {\n                  return true;\n                }\n                var _r4 = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n                p.vsub(xj, _r4.rj);\n                p.vsub(xi, _r4.ni);\n                _r4.ni.normalize();\n                _r4.ni.scale(R, _r4.ri); // Should be relative to the body.\n\n                _r4.rj.vadd(xj, _r4.rj);\n                _r4.rj.vsub(bj.position, _r4.rj); // Should be relative to the body.\n\n                _r4.ri.vadd(xi, _r4.ri);\n                _r4.ri.vsub(bi.position, _r4.ri);\n                this.result.push(_r4);\n                this.createFrictionEquationsFromContact(_r4, this.frictionResult); // Release world vertices\n\n                for (var _j7 = 0, _Nfaceverts = faceVerts.length; _j7 !== _Nfaceverts; _j7++) {\n                  v3pool.release(faceVerts[_j7]);\n                }\n                v3pool.release(_v3);\n                v3pool.release(_v4);\n                v3pool.release(p);\n                v3pool.release(xi_to_p);\n                v3pool.release(v1_to_xi);\n                return;\n              }\n              v3pool.release(_v3);\n              v3pool.release(_v4);\n              v3pool.release(p);\n              v3pool.release(xi_to_p);\n              v3pool.release(v1_to_xi);\n            }\n          } // Release world vertices\n\n          for (var _j8 = 0, _Nfaceverts2 = faceVerts.length; _j8 !== _Nfaceverts2; _j8++) {\n            v3pool.release(faceVerts[_j8]);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"planeConvex\",\n    value: function planeConvex(planeShape, convexShape, planePosition, convexPosition, planeQuat, convexQuat, planeBody, convexBody, si, sj, justTest) {\n      // Simply return the points behind the plane.\n      var worldVertex = planeConvex_v;\n      var worldNormal = planeConvex_normal;\n      worldNormal.set(0, 0, 1);\n      planeQuat.vmult(worldNormal, worldNormal); // Turn normal according to plane orientation\n\n      var numContacts = 0;\n      var relpos = planeConvex_relpos;\n      for (var i = 0; i !== convexShape.vertices.length; i++) {\n        // Get world convex vertex\n        worldVertex.copy(convexShape.vertices[i]);\n        convexQuat.vmult(worldVertex, worldVertex);\n        convexPosition.vadd(worldVertex, worldVertex);\n        worldVertex.vsub(planePosition, relpos);\n        var dot = worldNormal.dot(relpos);\n        if (dot <= 0.0) {\n          if (justTest) {\n            return true;\n          }\n          var r = this.createContactEquation(planeBody, convexBody, planeShape, convexShape, si, sj); // Get vertex position projected on plane\n\n          var projected = planeConvex_projected;\n          worldNormal.scale(worldNormal.dot(relpos), projected);\n          worldVertex.vsub(projected, projected);\n          projected.vsub(planePosition, r.ri); // From plane to vertex projected on plane\n\n          r.ni.copy(worldNormal); // Contact normal is the plane normal out from plane\n          // rj is now just the vector from the convex center to the vertex\n\n          worldVertex.vsub(convexPosition, r.rj); // Make it relative to the body\n\n          r.ri.vadd(planePosition, r.ri);\n          r.ri.vsub(planeBody.position, r.ri);\n          r.rj.vadd(convexPosition, r.rj);\n          r.rj.vsub(convexBody.position, r.rj);\n          this.result.push(r);\n          numContacts++;\n          if (!this.enableFrictionReduction) {\n            this.createFrictionEquationsFromContact(r, this.frictionResult);\n          }\n        }\n      }\n      if (this.enableFrictionReduction && numContacts) {\n        this.createFrictionFromAverage(numContacts);\n      }\n    }\n  }, {\n    key: \"boxConvex\",\n    value: function boxConvex(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n      si.convexPolyhedronRepresentation.material = si.material;\n      si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;\n      return this.convexConvex(si.convexPolyhedronRepresentation, sj, xi, xj, qi, qj, bi, bj, si, sj, justTest);\n    }\n  }, {\n    key: \"sphereHeightfield\",\n    value: function sphereHeightfield(sphereShape, hfShape, spherePos, hfPos, sphereQuat, hfQuat, sphereBody, hfBody, rsi, rsj, justTest) {\n      var data = hfShape.data;\n      var radius = sphereShape.radius;\n      var w = hfShape.elementSize;\n      var worldPillarOffset = sphereHeightfield_tmp2; // Get sphere position to heightfield local!\n\n      var localSpherePos = sphereHeightfield_tmp1;\n      Transform.pointToLocalFrame(hfPos, hfQuat, spherePos, localSpherePos); // Get the index of the data points to test against\n\n      var iMinX = Math.floor((localSpherePos.x - radius) / w) - 1;\n      var iMaxX = Math.ceil((localSpherePos.x + radius) / w) + 1;\n      var iMinY = Math.floor((localSpherePos.y - radius) / w) - 1;\n      var iMaxY = Math.ceil((localSpherePos.y + radius) / w) + 1; // Bail out if we are out of the terrain\n\n      if (iMaxX < 0 || iMaxY < 0 || iMinX > data.length || iMinY > data[0].length) {\n        return;\n      } // Clamp index to edges\n\n      if (iMinX < 0) {\n        iMinX = 0;\n      }\n      if (iMaxX < 0) {\n        iMaxX = 0;\n      }\n      if (iMinY < 0) {\n        iMinY = 0;\n      }\n      if (iMaxY < 0) {\n        iMaxY = 0;\n      }\n      if (iMinX >= data.length) {\n        iMinX = data.length - 1;\n      }\n      if (iMaxX >= data.length) {\n        iMaxX = data.length - 1;\n      }\n      if (iMaxY >= data[0].length) {\n        iMaxY = data[0].length - 1;\n      }\n      if (iMinY >= data[0].length) {\n        iMinY = data[0].length - 1;\n      }\n      var minMax = [];\n      hfShape.getRectMinMax(iMinX, iMinY, iMaxX, iMaxY, minMax);\n      var min = minMax[0];\n      var max = minMax[1]; // Bail out if we can't touch the bounding height box\n\n      if (localSpherePos.z - radius > max || localSpherePos.z + radius < min) {\n        return;\n      }\n      var result = this.result;\n      for (var i = iMinX; i < iMaxX; i++) {\n        for (var j = iMinY; j < iMaxY; j++) {\n          var numContactsBefore = result.length;\n          var intersecting = false; // Lower triangle\n\n          hfShape.getConvexTrianglePillar(i, j, false);\n          Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);\n          if (spherePos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + sphereShape.boundingSphereRadius) {\n            intersecting = this.sphereConvex(sphereShape, hfShape.pillarConvex, spherePos, worldPillarOffset, sphereQuat, hfQuat, sphereBody, hfBody, sphereShape, hfShape, justTest);\n          }\n          if (justTest && intersecting) {\n            return true;\n          } // Upper triangle\n\n          hfShape.getConvexTrianglePillar(i, j, true);\n          Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);\n          if (spherePos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + sphereShape.boundingSphereRadius) {\n            intersecting = this.sphereConvex(sphereShape, hfShape.pillarConvex, spherePos, worldPillarOffset, sphereQuat, hfQuat, sphereBody, hfBody, sphereShape, hfShape, justTest);\n          }\n          if (justTest && intersecting) {\n            return true;\n          }\n          var numContacts = result.length - numContactsBefore;\n          if (numContacts > 2) {\n            return;\n          }\n          /*\n            // Skip all but 1\n            for (let k = 0; k < numContacts - 1; k++) {\n                result.pop();\n            }\n          */\n        }\n      }\n    }\n  }, {\n    key: \"boxHeightfield\",\n    value: function boxHeightfield(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n      si.convexPolyhedronRepresentation.material = si.material;\n      si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;\n      return this.convexHeightfield(si.convexPolyhedronRepresentation, sj, xi, xj, qi, qj, bi, bj, si, sj, justTest);\n    }\n  }, {\n    key: \"convexHeightfield\",\n    value: function convexHeightfield(convexShape, hfShape, convexPos, hfPos, convexQuat, hfQuat, convexBody, hfBody, rsi, rsj, justTest) {\n      var data = hfShape.data;\n      var w = hfShape.elementSize;\n      var radius = convexShape.boundingSphereRadius;\n      var worldPillarOffset = convexHeightfield_tmp2;\n      var faceList = convexHeightfield_faceList; // Get sphere position to heightfield local!\n\n      var localConvexPos = convexHeightfield_tmp1;\n      Transform.pointToLocalFrame(hfPos, hfQuat, convexPos, localConvexPos); // Get the index of the data points to test against\n\n      var iMinX = Math.floor((localConvexPos.x - radius) / w) - 1;\n      var iMaxX = Math.ceil((localConvexPos.x + radius) / w) + 1;\n      var iMinY = Math.floor((localConvexPos.y - radius) / w) - 1;\n      var iMaxY = Math.ceil((localConvexPos.y + radius) / w) + 1; // Bail out if we are out of the terrain\n\n      if (iMaxX < 0 || iMaxY < 0 || iMinX > data.length || iMinY > data[0].length) {\n        return;\n      } // Clamp index to edges\n\n      if (iMinX < 0) {\n        iMinX = 0;\n      }\n      if (iMaxX < 0) {\n        iMaxX = 0;\n      }\n      if (iMinY < 0) {\n        iMinY = 0;\n      }\n      if (iMaxY < 0) {\n        iMaxY = 0;\n      }\n      if (iMinX >= data.length) {\n        iMinX = data.length - 1;\n      }\n      if (iMaxX >= data.length) {\n        iMaxX = data.length - 1;\n      }\n      if (iMaxY >= data[0].length) {\n        iMaxY = data[0].length - 1;\n      }\n      if (iMinY >= data[0].length) {\n        iMinY = data[0].length - 1;\n      }\n      var minMax = [];\n      hfShape.getRectMinMax(iMinX, iMinY, iMaxX, iMaxY, minMax);\n      var min = minMax[0];\n      var max = minMax[1]; // Bail out if we're cant touch the bounding height box\n\n      if (localConvexPos.z - radius > max || localConvexPos.z + radius < min) {\n        return;\n      }\n      for (var i = iMinX; i < iMaxX; i++) {\n        for (var j = iMinY; j < iMaxY; j++) {\n          var intersecting = false; // Lower triangle\n\n          hfShape.getConvexTrianglePillar(i, j, false);\n          Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);\n          if (convexPos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + convexShape.boundingSphereRadius) {\n            intersecting = this.convexConvex(convexShape, hfShape.pillarConvex, convexPos, worldPillarOffset, convexQuat, hfQuat, convexBody, hfBody, null, null, justTest, faceList, null);\n          }\n          if (justTest && intersecting) {\n            return true;\n          } // Upper triangle\n\n          hfShape.getConvexTrianglePillar(i, j, true);\n          Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);\n          if (convexPos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + convexShape.boundingSphereRadius) {\n            intersecting = this.convexConvex(convexShape, hfShape.pillarConvex, convexPos, worldPillarOffset, convexQuat, hfQuat, convexBody, hfBody, null, null, justTest, faceList, null);\n          }\n          if (justTest && intersecting) {\n            return true;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"sphereParticle\",\n    value: function sphereParticle(sj, si, xj, xi, qj, qi, bj, bi, rsi, rsj, justTest) {\n      // The normal is the unit vector from sphere center to particle center\n      var normal = particleSphere_normal;\n      normal.set(0, 0, 1);\n      xi.vsub(xj, normal);\n      var lengthSquared = normal.lengthSquared();\n      if (lengthSquared <= sj.radius * sj.radius) {\n        if (justTest) {\n          return true;\n        }\n        var r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n        normal.normalize();\n        r.rj.copy(normal);\n        r.rj.scale(sj.radius, r.rj);\n        r.ni.copy(normal); // Contact normal\n\n        r.ni.negate(r.ni);\n        r.ri.set(0, 0, 0); // Center of particle\n\n        this.result.push(r);\n        this.createFrictionEquationsFromContact(r, this.frictionResult);\n      }\n    }\n  }, {\n    key: \"planeParticle\",\n    value: function planeParticle(sj, si, xj, xi, qj, qi, bj, bi, rsi, rsj, justTest) {\n      var normal = particlePlane_normal;\n      normal.set(0, 0, 1);\n      bj.quaternion.vmult(normal, normal); // Turn normal according to plane orientation\n\n      var relpos = particlePlane_relpos;\n      xi.vsub(bj.position, relpos);\n      var dot = normal.dot(relpos);\n      if (dot <= 0.0) {\n        if (justTest) {\n          return true;\n        }\n        var r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n        r.ni.copy(normal); // Contact normal is the plane normal\n\n        r.ni.negate(r.ni);\n        r.ri.set(0, 0, 0); // Center of particle\n        // Get particle position projected on plane\n\n        var projected = particlePlane_projected;\n        normal.scale(normal.dot(xi), projected);\n        xi.vsub(projected, projected); //projected.vadd(bj.position,projected);\n        // rj is now the projected world position minus plane position\n\n        r.rj.copy(projected);\n        this.result.push(r);\n        this.createFrictionEquationsFromContact(r, this.frictionResult);\n      }\n    }\n  }, {\n    key: \"boxParticle\",\n    value: function boxParticle(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n      si.convexPolyhedronRepresentation.material = si.material;\n      si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;\n      return this.convexParticle(si.convexPolyhedronRepresentation, sj, xi, xj, qi, qj, bi, bj, si, sj, justTest);\n    }\n  }, {\n    key: \"convexParticle\",\n    value: function convexParticle(sj, si, xj, xi, qj, qi, bj, bi, rsi, rsj, justTest) {\n      var penetratedFaceIndex = -1;\n      var penetratedFaceNormal = convexParticle_penetratedFaceNormal;\n      var worldPenetrationVec = convexParticle_worldPenetrationVec;\n      var minPenetration = null;\n      var local = convexParticle_local;\n      local.copy(xi);\n      local.vsub(xj, local); // Convert position to relative the convex origin\n\n      qj.conjugate(cqj);\n      cqj.vmult(local, local);\n      if (sj.pointIsInside(local)) {\n        if (sj.worldVerticesNeedsUpdate) {\n          sj.computeWorldVertices(xj, qj);\n        }\n        if (sj.worldFaceNormalsNeedsUpdate) {\n          sj.computeWorldFaceNormals(qj);\n        } // For each world polygon in the polyhedra\n\n        for (var i = 0, nfaces = sj.faces.length; i !== nfaces; i++) {\n          // Construct world face vertices\n          var verts = [sj.worldVertices[sj.faces[i][0]]];\n          var normal = sj.worldFaceNormals[i]; // Check how much the particle penetrates the polygon plane.\n\n          xi.vsub(verts[0], convexParticle_vertexToParticle);\n          var penetration = -normal.dot(convexParticle_vertexToParticle);\n          if (minPenetration === null || Math.abs(penetration) < Math.abs(minPenetration)) {\n            if (justTest) {\n              return true;\n            }\n            minPenetration = penetration;\n            penetratedFaceIndex = i;\n            penetratedFaceNormal.copy(normal);\n          }\n        }\n        if (penetratedFaceIndex !== -1) {\n          // Setup contact\n          var r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n          penetratedFaceNormal.scale(minPenetration, worldPenetrationVec); // rj is the particle position projected to the face\n\n          worldPenetrationVec.vadd(xi, worldPenetrationVec);\n          worldPenetrationVec.vsub(xj, worldPenetrationVec);\n          r.rj.copy(worldPenetrationVec); //const projectedToFace = xi.vsub(xj).vadd(worldPenetrationVec);\n          //projectedToFace.copy(r.rj);\n          //qj.vmult(r.rj,r.rj);\n\n          penetratedFaceNormal.negate(r.ni); // Contact normal\n\n          r.ri.set(0, 0, 0); // Center of particle\n\n          var ri = r.ri;\n          var rj = r.rj; // Make relative to bodies\n\n          ri.vadd(xi, ri);\n          ri.vsub(bi.position, ri);\n          rj.vadd(xj, rj);\n          rj.vsub(bj.position, rj);\n          this.result.push(r);\n          this.createFrictionEquationsFromContact(r, this.frictionResult);\n        } else {\n          console.warn('Point found inside convex, but did not find penetrating face!');\n        }\n      }\n    }\n  }, {\n    key: \"heightfieldCylinder\",\n    value: function heightfieldCylinder(hfShape, convexShape, hfPos, convexPos, hfQuat, convexQuat, hfBody, convexBody, rsi, rsj, justTest) {\n      return this.convexHeightfield(convexShape, hfShape, convexPos, hfPos, convexQuat, hfQuat, convexBody, hfBody, rsi, rsj, justTest);\n    }\n  }, {\n    key: \"particleCylinder\",\n    value: function particleCylinder(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n      return this.convexParticle(sj, si, xj, xi, qj, qi, bj, bi, rsi, rsj, justTest);\n    }\n  }, {\n    key: \"sphereTrimesh\",\n    value: function sphereTrimesh(sphereShape, trimeshShape, spherePos, trimeshPos, sphereQuat, trimeshQuat, sphereBody, trimeshBody, rsi, rsj, justTest) {\n      var edgeVertexA = sphereTrimesh_edgeVertexA;\n      var edgeVertexB = sphereTrimesh_edgeVertexB;\n      var edgeVector = sphereTrimesh_edgeVector;\n      var edgeVectorUnit = sphereTrimesh_edgeVectorUnit;\n      var localSpherePos = sphereTrimesh_localSpherePos;\n      var tmp = sphereTrimesh_tmp;\n      var localSphereAABB = sphereTrimesh_localSphereAABB;\n      var v2 = sphereTrimesh_v2;\n      var relpos = sphereTrimesh_relpos;\n      var triangles = sphereTrimesh_triangles; // Convert sphere position to local in the trimesh\n\n      Transform.pointToLocalFrame(trimeshPos, trimeshQuat, spherePos, localSpherePos); // Get the aabb of the sphere locally in the trimesh\n\n      var sphereRadius = sphereShape.radius;\n      localSphereAABB.lowerBound.set(localSpherePos.x - sphereRadius, localSpherePos.y - sphereRadius, localSpherePos.z - sphereRadius);\n      localSphereAABB.upperBound.set(localSpherePos.x + sphereRadius, localSpherePos.y + sphereRadius, localSpherePos.z + sphereRadius);\n      trimeshShape.getTrianglesInAABB(localSphereAABB, triangles); //for (let i = 0; i < trimeshShape.indices.length / 3; i++) triangles.push(i); // All\n      // Vertices\n\n      var v = sphereTrimesh_v;\n      var radiusSquared = sphereShape.radius * sphereShape.radius;\n      for (var i = 0; i < triangles.length; i++) {\n        for (var j = 0; j < 3; j++) {\n          trimeshShape.getVertex(trimeshShape.indices[triangles[i] * 3 + j], v); // Check vertex overlap in sphere\n\n          v.vsub(localSpherePos, relpos);\n          if (relpos.lengthSquared() <= radiusSquared) {\n            // Safe up\n            v2.copy(v);\n            Transform.pointToWorldFrame(trimeshPos, trimeshQuat, v2, v);\n            v.vsub(spherePos, relpos);\n            if (justTest) {\n              return true;\n            }\n            var r = this.createContactEquation(sphereBody, trimeshBody, sphereShape, trimeshShape, rsi, rsj);\n            r.ni.copy(relpos);\n            r.ni.normalize(); // ri is the vector from sphere center to the sphere surface\n\n            r.ri.copy(r.ni);\n            r.ri.scale(sphereShape.radius, r.ri);\n            r.ri.vadd(spherePos, r.ri);\n            r.ri.vsub(sphereBody.position, r.ri);\n            r.rj.copy(v);\n            r.rj.vsub(trimeshBody.position, r.rj); // Store result\n\n            this.result.push(r);\n            this.createFrictionEquationsFromContact(r, this.frictionResult);\n          }\n        }\n      } // Check all edges\n\n      for (var _i33 = 0; _i33 < triangles.length; _i33++) {\n        for (var _j9 = 0; _j9 < 3; _j9++) {\n          trimeshShape.getVertex(trimeshShape.indices[triangles[_i33] * 3 + _j9], edgeVertexA);\n          trimeshShape.getVertex(trimeshShape.indices[triangles[_i33] * 3 + (_j9 + 1) % 3], edgeVertexB);\n          edgeVertexB.vsub(edgeVertexA, edgeVector); // Project sphere position to the edge\n\n          localSpherePos.vsub(edgeVertexB, tmp);\n          var positionAlongEdgeB = tmp.dot(edgeVector);\n          localSpherePos.vsub(edgeVertexA, tmp);\n          var positionAlongEdgeA = tmp.dot(edgeVector);\n          if (positionAlongEdgeA > 0 && positionAlongEdgeB < 0) {\n            // Now check the orthogonal distance from edge to sphere center\n            localSpherePos.vsub(edgeVertexA, tmp);\n            edgeVectorUnit.copy(edgeVector);\n            edgeVectorUnit.normalize();\n            positionAlongEdgeA = tmp.dot(edgeVectorUnit);\n            edgeVectorUnit.scale(positionAlongEdgeA, tmp);\n            tmp.vadd(edgeVertexA, tmp); // tmp is now the sphere center position projected to the edge, defined locally in the trimesh frame\n\n            var dist = tmp.distanceTo(localSpherePos);\n            if (dist < sphereShape.radius) {\n              if (justTest) {\n                return true;\n              }\n              var _r5 = this.createContactEquation(sphereBody, trimeshBody, sphereShape, trimeshShape, rsi, rsj);\n              tmp.vsub(localSpherePos, _r5.ni);\n              _r5.ni.normalize();\n              _r5.ni.scale(sphereShape.radius, _r5.ri);\n              _r5.ri.vadd(spherePos, _r5.ri);\n              _r5.ri.vsub(sphereBody.position, _r5.ri);\n              Transform.pointToWorldFrame(trimeshPos, trimeshQuat, tmp, tmp);\n              tmp.vsub(trimeshBody.position, _r5.rj);\n              Transform.vectorToWorldFrame(trimeshQuat, _r5.ni, _r5.ni);\n              Transform.vectorToWorldFrame(trimeshQuat, _r5.ri, _r5.ri);\n              this.result.push(_r5);\n              this.createFrictionEquationsFromContact(_r5, this.frictionResult);\n            }\n          }\n        }\n      } // Triangle faces\n\n      var va = sphereTrimesh_va;\n      var vb = sphereTrimesh_vb;\n      var vc = sphereTrimesh_vc;\n      var normal = sphereTrimesh_normal;\n      for (var _i34 = 0, N = triangles.length; _i34 !== N; _i34++) {\n        trimeshShape.getTriangleVertices(triangles[_i34], va, vb, vc);\n        trimeshShape.getNormal(triangles[_i34], normal);\n        localSpherePos.vsub(va, tmp);\n        var _dist2 = tmp.dot(normal);\n        normal.scale(_dist2, tmp);\n        localSpherePos.vsub(tmp, tmp); // tmp is now the sphere position projected to the triangle plane\n\n        _dist2 = tmp.distanceTo(localSpherePos);\n        if (Ray.pointInTriangle(tmp, va, vb, vc) && _dist2 < sphereShape.radius) {\n          if (justTest) {\n            return true;\n          }\n          var _r6 = this.createContactEquation(sphereBody, trimeshBody, sphereShape, trimeshShape, rsi, rsj);\n          tmp.vsub(localSpherePos, _r6.ni);\n          _r6.ni.normalize();\n          _r6.ni.scale(sphereShape.radius, _r6.ri);\n          _r6.ri.vadd(spherePos, _r6.ri);\n          _r6.ri.vsub(sphereBody.position, _r6.ri);\n          Transform.pointToWorldFrame(trimeshPos, trimeshQuat, tmp, tmp);\n          tmp.vsub(trimeshBody.position, _r6.rj);\n          Transform.vectorToWorldFrame(trimeshQuat, _r6.ni, _r6.ni);\n          Transform.vectorToWorldFrame(trimeshQuat, _r6.ri, _r6.ri);\n          this.result.push(_r6);\n          this.createFrictionEquationsFromContact(_r6, this.frictionResult);\n        }\n      }\n      triangles.length = 0;\n    }\n  }, {\n    key: \"planeTrimesh\",\n    value: function planeTrimesh(planeShape, trimeshShape, planePos, trimeshPos, planeQuat, trimeshQuat, planeBody, trimeshBody, rsi, rsj, justTest) {\n      // Make contacts!\n      var v = new Vec3();\n      var normal = planeTrimesh_normal;\n      normal.set(0, 0, 1);\n      planeQuat.vmult(normal, normal); // Turn normal according to plane\n\n      for (var i = 0; i < trimeshShape.vertices.length / 3; i++) {\n        // Get world vertex from trimesh\n        trimeshShape.getVertex(i, v); // Safe up\n\n        var _v5 = new Vec3();\n        _v5.copy(v);\n        Transform.pointToWorldFrame(trimeshPos, trimeshQuat, _v5, v); // Check plane side\n\n        var _relpos = planeTrimesh_relpos;\n        v.vsub(planePos, _relpos);\n        var dot = normal.dot(_relpos);\n        if (dot <= 0.0) {\n          if (justTest) {\n            return true;\n          }\n          var r = this.createContactEquation(planeBody, trimeshBody, planeShape, trimeshShape, rsi, rsj);\n          r.ni.copy(normal); // Contact normal is the plane normal\n          // Get vertex position projected on plane\n\n          var projected = planeTrimesh_projected;\n          normal.scale(_relpos.dot(normal), projected);\n          v.vsub(projected, projected); // ri is the projected world position minus plane position\n\n          r.ri.copy(projected);\n          r.ri.vsub(planeBody.position, r.ri);\n          r.rj.copy(v);\n          r.rj.vsub(trimeshBody.position, r.rj); // Store result\n\n          this.result.push(r);\n          this.createFrictionEquationsFromContact(r, this.frictionResult);\n        }\n      }\n    } // convexTrimesh(\n    //   si: ConvexPolyhedron, sj: Trimesh, xi: Vec3, xj: Vec3, qi: Quaternion, qj: Quaternion,\n    //   bi: Body, bj: Body, rsi?: Shape | null, rsj?: Shape | null,\n    //   faceListA?: number[] | null, faceListB?: number[] | null,\n    // ) {\n    //   const sepAxis = convexConvex_sepAxis;\n    //   if(xi.distanceTo(xj) > si.boundingSphereRadius + sj.boundingSphereRadius){\n    //       return;\n    //   }\n    //   // Construct a temp hull for each triangle\n    //   const hullB = new ConvexPolyhedron();\n    //   hullB.faces = [[0,1,2]];\n    //   const va = new Vec3();\n    //   const vb = new Vec3();\n    //   const vc = new Vec3();\n    //   hullB.vertices = [\n    //       va,\n    //       vb,\n    //       vc\n    //   ];\n    //   for (let i = 0; i < sj.indices.length / 3; i++) {\n    //       const triangleNormal = new Vec3();\n    //       sj.getNormal(i, triangleNormal);\n    //       hullB.faceNormals = [triangleNormal];\n    //       sj.getTriangleVertices(i, va, vb, vc);\n    //       let d = si.testSepAxis(triangleNormal, hullB, xi, qi, xj, qj);\n    //       if(!d){\n    //           triangleNormal.scale(-1, triangleNormal);\n    //           d = si.testSepAxis(triangleNormal, hullB, xi, qi, xj, qj);\n    //           if(!d){\n    //               continue;\n    //           }\n    //       }\n    //       const res: ConvexPolyhedronContactPoint[] = [];\n    //       const q = convexConvex_q;\n    //       si.clipAgainstHull(xi,qi,hullB,xj,qj,triangleNormal,-100,100,res);\n    //       for(let j = 0; j !== res.length; j++){\n    //           const r = this.createContactEquation(bi,bj,si,sj,rsi,rsj),\n    //               ri = r.ri,\n    //               rj = r.rj;\n    //           r.ni.copy(triangleNormal);\n    //           r.ni.negate(r.ni);\n    //           res[j].normal.negate(q);\n    //           q.mult(res[j].depth, q);\n    //           res[j].point.vadd(q, ri);\n    //           rj.copy(res[j].point);\n    //           // Contact points are in world coordinates. Transform back to relative\n    //           ri.vsub(xi,ri);\n    //           rj.vsub(xj,rj);\n    //           // Make relative to bodies\n    //           ri.vadd(xi, ri);\n    //           ri.vsub(bi.position, ri);\n    //           rj.vadd(xj, rj);\n    //           rj.vsub(bj.position, rj);\n    //           result.push(r);\n    //       }\n    //   }\n    // }\n  }]);\n  return Narrowphase;\n}(COLLISION_TYPES.sphereSphere, COLLISION_TYPES.spherePlane, COLLISION_TYPES.boxBox, COLLISION_TYPES.sphereBox, COLLISION_TYPES.planeBox, COLLISION_TYPES.convexConvex, COLLISION_TYPES.sphereConvex, COLLISION_TYPES.planeConvex, COLLISION_TYPES.boxConvex, COLLISION_TYPES.sphereHeightfield, COLLISION_TYPES.boxHeightfield, COLLISION_TYPES.convexHeightfield, COLLISION_TYPES.sphereParticle, COLLISION_TYPES.planeParticle, COLLISION_TYPES.boxParticle, COLLISION_TYPES.convexParticle, COLLISION_TYPES.cylinderCylinder, COLLISION_TYPES.sphereCylinder, COLLISION_TYPES.planeCylinder, COLLISION_TYPES.boxCylinder, COLLISION_TYPES.convexCylinder, COLLISION_TYPES.heightfieldCylinder, COLLISION_TYPES.particleCylinder, COLLISION_TYPES.sphereTrimesh, COLLISION_TYPES.planeTrimesh);\nvar averageNormal = new Vec3();\nvar averageContactPointA = new Vec3();\nvar averageContactPointB = new Vec3();\nvar tmpVec1 = new Vec3();\nvar tmpVec2 = new Vec3();\nvar tmpQuat1 = new Quaternion();\nvar tmpQuat2 = new Quaternion();\nvar planeTrimesh_normal = new Vec3();\nvar planeTrimesh_relpos = new Vec3();\nvar planeTrimesh_projected = new Vec3();\nvar sphereTrimesh_normal = new Vec3();\nvar sphereTrimesh_relpos = new Vec3();\nnew Vec3();\nvar sphereTrimesh_v = new Vec3();\nvar sphereTrimesh_v2 = new Vec3();\nvar sphereTrimesh_edgeVertexA = new Vec3();\nvar sphereTrimesh_edgeVertexB = new Vec3();\nvar sphereTrimesh_edgeVector = new Vec3();\nvar sphereTrimesh_edgeVectorUnit = new Vec3();\nvar sphereTrimesh_localSpherePos = new Vec3();\nvar sphereTrimesh_tmp = new Vec3();\nvar sphereTrimesh_va = new Vec3();\nvar sphereTrimesh_vb = new Vec3();\nvar sphereTrimesh_vc = new Vec3();\nvar sphereTrimesh_localSphereAABB = new AABB();\nvar sphereTrimesh_triangles = [];\nvar point_on_plane_to_sphere = new Vec3();\nvar plane_to_sphere_ortho = new Vec3(); // See http://bulletphysics.com/Bullet/BulletFull/SphereTriangleDetector_8cpp_source.html\n\nvar pointInPolygon_edge = new Vec3();\nvar pointInPolygon_edge_x_normal = new Vec3();\nvar pointInPolygon_vtp = new Vec3();\nfunction pointInPolygon(verts, normal, p) {\n  var positiveResult = null;\n  var N = verts.length;\n  for (var i = 0; i !== N; i++) {\n    var v = verts[i]; // Get edge to the next vertex\n\n    var edge = pointInPolygon_edge;\n    verts[(i + 1) % N].vsub(v, edge); // Get cross product between polygon normal and the edge\n\n    var edge_x_normal = pointInPolygon_edge_x_normal; //const edge_x_normal = new Vec3();\n\n    edge.cross(normal, edge_x_normal); // Get vector between point and current vertex\n\n    var vertex_to_p = pointInPolygon_vtp;\n    p.vsub(v, vertex_to_p); // This dot product determines which side of the edge the point is\n\n    var r = edge_x_normal.dot(vertex_to_p); // If all such dot products have same sign, we are inside the polygon.\n\n    if (positiveResult === null || r > 0 && positiveResult === true || r <= 0 && positiveResult === false) {\n      if (positiveResult === null) {\n        positiveResult = r > 0;\n      }\n      continue;\n    } else {\n      return false; // Encountered some other sign. Exit.\n    }\n  } // If we got here, all dot products were of the same sign.\n\n  return true;\n}\nvar box_to_sphere = new Vec3();\nvar sphereBox_ns = new Vec3();\nvar sphereBox_ns1 = new Vec3();\nvar sphereBox_ns2 = new Vec3();\nvar sphereBox_sides = [new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3()];\nvar sphereBox_sphere_to_corner = new Vec3();\nvar sphereBox_side_ns = new Vec3();\nvar sphereBox_side_ns1 = new Vec3();\nvar sphereBox_side_ns2 = new Vec3();\nvar convex_to_sphere = new Vec3();\nvar sphereConvex_edge = new Vec3();\nvar sphereConvex_edgeUnit = new Vec3();\nvar sphereConvex_sphereToCorner = new Vec3();\nvar sphereConvex_worldCorner = new Vec3();\nvar sphereConvex_worldNormal = new Vec3();\nvar sphereConvex_worldPoint = new Vec3();\nvar sphereConvex_worldSpherePointClosestToPlane = new Vec3();\nvar sphereConvex_penetrationVec = new Vec3();\nvar sphereConvex_sphereToWorldPoint = new Vec3();\nnew Vec3();\nnew Vec3();\nvar planeConvex_v = new Vec3();\nvar planeConvex_normal = new Vec3();\nvar planeConvex_relpos = new Vec3();\nvar planeConvex_projected = new Vec3();\nvar convexConvex_sepAxis = new Vec3();\nvar convexConvex_q = new Vec3();\nvar particlePlane_normal = new Vec3();\nvar particlePlane_relpos = new Vec3();\nvar particlePlane_projected = new Vec3();\nvar particleSphere_normal = new Vec3(); // WIP\n\nvar cqj = new Quaternion();\nvar convexParticle_local = new Vec3();\nnew Vec3();\nvar convexParticle_penetratedFaceNormal = new Vec3();\nvar convexParticle_vertexToParticle = new Vec3();\nvar convexParticle_worldPenetrationVec = new Vec3();\nvar convexHeightfield_tmp1 = new Vec3();\nvar convexHeightfield_tmp2 = new Vec3();\nvar convexHeightfield_faceList = [0];\nvar sphereHeightfield_tmp1 = new Vec3();\nvar sphereHeightfield_tmp2 = new Vec3();\nvar OverlapKeeper = /*#__PURE__*/function () {\n  /**\n   * @todo Remove useless constructor\n   */\n  function OverlapKeeper() {\n    _classCallCheck(this, OverlapKeeper);\n    this.current = [];\n    this.previous = [];\n  }\n  /**\n   * getKey\n   */\n  _createClass(OverlapKeeper, [{\n    key: \"getKey\",\n    value: function getKey(i, j) {\n      if (j < i) {\n        var temp = j;\n        j = i;\n        i = temp;\n      }\n      return i << 16 | j;\n    }\n    /**\n     * set\n     */\n  }, {\n    key: \"set\",\n    value: function set(i, j) {\n      // Insertion sort. This way the diff will have linear complexity.\n      var key = this.getKey(i, j);\n      var current = this.current;\n      var index = 0;\n      while (key > current[index]) {\n        index++;\n      }\n      if (key === current[index]) {\n        return; // Pair was already added\n      }\n\n      for (var _j10 = current.length - 1; _j10 >= index; _j10--) {\n        current[_j10 + 1] = current[_j10];\n      }\n      current[index] = key;\n    }\n    /**\n     * tick\n     */\n  }, {\n    key: \"tick\",\n    value: function tick() {\n      var tmp = this.current;\n      this.current = this.previous;\n      this.previous = tmp;\n      this.current.length = 0;\n    }\n    /**\n     * getDiff\n     */\n  }, {\n    key: \"getDiff\",\n    value: function getDiff(additions, removals) {\n      var a = this.current;\n      var b = this.previous;\n      var al = a.length;\n      var bl = b.length;\n      var j = 0;\n      for (var i = 0; i < al; i++) {\n        var found = false;\n        var keyA = a[i];\n        while (keyA > b[j]) {\n          j++;\n        }\n        found = keyA === b[j];\n        if (!found) {\n          unpackAndPush(additions, keyA);\n        }\n      }\n      j = 0;\n      for (var _i35 = 0; _i35 < bl; _i35++) {\n        var _found = false;\n        var keyB = b[_i35];\n        while (keyB > a[j]) {\n          j++;\n        }\n        _found = a[j] === keyB;\n        if (!_found) {\n          unpackAndPush(removals, keyB);\n        }\n      }\n    }\n  }]);\n  return OverlapKeeper;\n}();\nfunction unpackAndPush(array, key) {\n  array.push((key & 0xffff0000) >> 16, key & 0x0000ffff);\n}\nvar getKey = function getKey(i, j) {\n  return i < j ? \"\".concat(i, \"-\").concat(j) : \"\".concat(j, \"-\").concat(i);\n};\n/**\n * TupleDictionary\n */\nvar TupleDictionary = /*#__PURE__*/function () {\n  function TupleDictionary() {\n    _classCallCheck(this, TupleDictionary);\n    this.data = {\n      keys: []\n    };\n  }\n\n  /** get */\n  _createClass(TupleDictionary, [{\n    key: \"get\",\n    value: function get(i, j) {\n      var key = getKey(i, j);\n      return this.data[key];\n    }\n    /** set */\n  }, {\n    key: \"set\",\n    value: function set(i, j, value) {\n      var key = getKey(i, j); // Check if key already exists\n\n      if (!this.get(i, j)) {\n        this.data.keys.push(key);\n      }\n      this.data[key] = value;\n    }\n    /** delete */\n  }, {\n    key: \"delete\",\n    value: function _delete(i, j) {\n      var key = getKey(i, j);\n      var index = this.data.keys.indexOf(key);\n      if (index !== -1) {\n        this.data.keys.splice(index, 1);\n      }\n      delete this.data[key];\n    }\n    /** reset */\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      var data = this.data;\n      var keys = data.keys;\n      while (keys.length > 0) {\n        var key = keys.pop();\n        delete data[key];\n      }\n    }\n  }]);\n  return TupleDictionary;\n}();\n/**\n * The physics world\n */\nvar World = /*#__PURE__*/function (_EventTarget2) {\n  _inherits(World, _EventTarget2);\n  var _super27 = _createSuper(World);\n  /**\n   * Currently / last used timestep. Is set to -1 if not available. This value is updated before each internal step, which means that it is \"fresh\" inside event callbacks.\n   */\n\n  /**\n   * Makes bodies go to sleep when they've been inactive.\n   * @default false\n   */\n\n  /**\n   * All the current contacts (instances of ContactEquation) in the world.\n   */\n\n  /**\n   * How often to normalize quaternions. Set to 0 for every step, 1 for every second etc.. A larger value increases performance. If bodies tend to explode, set to a smaller value (zero to be sure nothing can go wrong).\n   * @default 0\n   */\n\n  /**\n   * Set to true to use fast quaternion normalization. It is often enough accurate to use.\n   * If bodies tend to explode, set to false.\n   * @default false\n   */\n\n  /**\n   * The wall-clock time since simulation start.\n   */\n\n  /**\n   * Number of timesteps taken since start.\n   */\n\n  /**\n   * Default and last timestep sizes.\n   */\n\n  /**\n   * The gravity of the world.\n   */\n\n  /**\n   * Gravity to use when approximating the friction max force (mu*mass*gravity).\n   * If undefined, global gravity will be used.\n   * Use to enable friction in a World with a null gravity vector (no gravity).\n   */\n\n  /**\n   * The broadphase algorithm to use.\n   * @default NaiveBroadphase\n   */\n\n  /**\n   * All bodies in this world\n   */\n\n  /**\n   * True if any bodies are not sleeping, false if every body is sleeping.\n   */\n\n  /**\n   * The solver algorithm to use.\n   * @default GSSolver\n   */\n\n  /**\n   * collisionMatrix\n   */\n\n  /**\n   * CollisionMatrix from the previous step.\n   */\n\n  /**\n   * All added contactmaterials.\n   */\n\n  /**\n   * Used to look up a ContactMaterial given two instances of Material.\n   */\n\n  /**\n   * The default material of the bodies.\n   */\n\n  /**\n   * This contact material is used if no suitable contactmaterial is found for a contact.\n   */\n\n  /**\n   * Time accumulator for interpolation.\n   * @see https://gafferongames.com/game-physics/fix-your-timestep/\n   */\n\n  /**\n   * Dispatched after a body has been added to the world.\n   */\n\n  /**\n   * Dispatched after a body has been removed from the world.\n   */\n  function World(options) {\n    var _this25;\n    _classCallCheck(this, World);\n    if (options === void 0) {\n      options = {};\n    }\n    _this25 = _super27.call(this);\n    _this25.dt = -1;\n    _this25.allowSleep = !!options.allowSleep;\n    _this25.contacts = [];\n    _this25.frictionEquations = [];\n    _this25.quatNormalizeSkip = options.quatNormalizeSkip !== undefined ? options.quatNormalizeSkip : 0;\n    _this25.quatNormalizeFast = options.quatNormalizeFast !== undefined ? options.quatNormalizeFast : false;\n    _this25.time = 0.0;\n    _this25.stepnumber = 0;\n    _this25.default_dt = 1 / 60;\n    _this25.nextId = 0;\n    _this25.gravity = new Vec3();\n    if (options.gravity) {\n      _this25.gravity.copy(options.gravity);\n    }\n    if (options.frictionGravity) {\n      _this25.frictionGravity = new Vec3();\n      _this25.frictionGravity.copy(options.frictionGravity);\n    }\n    _this25.broadphase = options.broadphase !== undefined ? options.broadphase : new NaiveBroadphase();\n    _this25.bodies = [];\n    _this25.hasActiveBodies = false;\n    _this25.solver = options.solver !== undefined ? options.solver : new GSSolver();\n    _this25.constraints = [];\n    _this25.narrowphase = new Narrowphase(_assertThisInitialized(_this25));\n    _this25.collisionMatrix = new ArrayCollisionMatrix();\n    _this25.collisionMatrixPrevious = new ArrayCollisionMatrix();\n    _this25.bodyOverlapKeeper = new OverlapKeeper();\n    _this25.shapeOverlapKeeper = new OverlapKeeper();\n    _this25.contactmaterials = [];\n    _this25.contactMaterialTable = new TupleDictionary();\n    _this25.defaultMaterial = new Material('default');\n    _this25.defaultContactMaterial = new ContactMaterial(_this25.defaultMaterial, _this25.defaultMaterial, {\n      friction: 0.3,\n      restitution: 0.0\n    });\n    _this25.doProfiling = false;\n    _this25.profile = {\n      solve: 0,\n      makeContactConstraints: 0,\n      broadphase: 0,\n      integrate: 0,\n      narrowphase: 0\n    };\n    _this25.accumulator = 0;\n    _this25.subsystems = [];\n    _this25.addBodyEvent = {\n      type: 'addBody',\n      body: null\n    };\n    _this25.removeBodyEvent = {\n      type: 'removeBody',\n      body: null\n    };\n    _this25.idToBodyMap = {};\n    _this25.broadphase.setWorld(_assertThisInitialized(_this25));\n    return _this25;\n  }\n  /**\n   * Get the contact material between materials m1 and m2\n   * @return The contact material if it was found.\n   */\n  _createClass(World, [{\n    key: \"getContactMaterial\",\n    value: function getContactMaterial(m1, m2) {\n      return this.contactMaterialTable.get(m1.id, m2.id);\n    }\n    /**\n     * Store old collision state info\n     */\n  }, {\n    key: \"collisionMatrixTick\",\n    value: function collisionMatrixTick() {\n      var temp = this.collisionMatrixPrevious;\n      this.collisionMatrixPrevious = this.collisionMatrix;\n      this.collisionMatrix = temp;\n      this.collisionMatrix.reset();\n      this.bodyOverlapKeeper.tick();\n      this.shapeOverlapKeeper.tick();\n    }\n    /**\n     * Add a constraint to the simulation.\n     */\n  }, {\n    key: \"addConstraint\",\n    value: function addConstraint(c) {\n      this.constraints.push(c);\n    }\n    /**\n     * Removes a constraint\n     */\n  }, {\n    key: \"removeConstraint\",\n    value: function removeConstraint(c) {\n      var idx = this.constraints.indexOf(c);\n      if (idx !== -1) {\n        this.constraints.splice(idx, 1);\n      }\n    }\n    /**\n     * Raycast test\n     * @deprecated Use .raycastAll, .raycastClosest or .raycastAny instead.\n     */\n  }, {\n    key: \"rayTest\",\n    value: function rayTest(from, to, result) {\n      if (result instanceof RaycastResult) {\n        // Do raycastClosest\n        this.raycastClosest(from, to, {\n          skipBackfaces: true\n        }, result);\n      } else {\n        // Do raycastAll\n        this.raycastAll(from, to, {\n          skipBackfaces: true\n        }, result);\n      }\n    }\n    /**\n     * Ray cast against all bodies. The provided callback will be executed for each hit with a RaycastResult as single argument.\n     * @return True if any body was hit.\n     */\n  }, {\n    key: \"raycastAll\",\n    value: function raycastAll(from, to, options, callback) {\n      if (options === void 0) {\n        options = {};\n      }\n      options.mode = Ray.ALL;\n      options.from = from;\n      options.to = to;\n      options.callback = callback;\n      return tmpRay.intersectWorld(this, options);\n    }\n    /**\n     * Ray cast, and stop at the first result. Note that the order is random - but the method is fast.\n     * @return True if any body was hit.\n     */\n  }, {\n    key: \"raycastAny\",\n    value: function raycastAny(from, to, options, result) {\n      if (options === void 0) {\n        options = {};\n      }\n      options.mode = Ray.ANY;\n      options.from = from;\n      options.to = to;\n      options.result = result;\n      return tmpRay.intersectWorld(this, options);\n    }\n    /**\n     * Ray cast, and return information of the closest hit.\n     * @return True if any body was hit.\n     */\n  }, {\n    key: \"raycastClosest\",\n    value: function raycastClosest(from, to, options, result) {\n      if (options === void 0) {\n        options = {};\n      }\n      options.mode = Ray.CLOSEST;\n      options.from = from;\n      options.to = to;\n      options.result = result;\n      return tmpRay.intersectWorld(this, options);\n    }\n    /**\n     * Add a rigid body to the simulation.\n     * @todo If the simulation has not yet started, why recrete and copy arrays for each body? Accumulate in dynamic arrays in this case.\n     * @todo Adding an array of bodies should be possible. This would save some loops too\n     */\n  }, {\n    key: \"addBody\",\n    value: function addBody(body) {\n      if (this.bodies.includes(body)) {\n        return;\n      }\n      body.index = this.bodies.length;\n      this.bodies.push(body);\n      body.world = this;\n      body.initPosition.copy(body.position);\n      body.initVelocity.copy(body.velocity);\n      body.timeLastSleepy = this.time;\n      if (body instanceof Body) {\n        body.initAngularVelocity.copy(body.angularVelocity);\n        body.initQuaternion.copy(body.quaternion);\n      }\n      this.collisionMatrix.setNumObjects(this.bodies.length);\n      this.addBodyEvent.body = body;\n      this.idToBodyMap[body.id] = body;\n      this.dispatchEvent(this.addBodyEvent);\n    }\n    /**\n     * Remove a rigid body from the simulation.\n     */\n  }, {\n    key: \"removeBody\",\n    value: function removeBody(body) {\n      body.world = null;\n      var n = this.bodies.length - 1;\n      var bodies = this.bodies;\n      var idx = bodies.indexOf(body);\n      if (idx !== -1) {\n        bodies.splice(idx, 1); // Todo: should use a garbage free method\n        // Recompute index\n\n        for (var i = 0; i !== bodies.length; i++) {\n          bodies[i].index = i;\n        }\n        this.collisionMatrix.setNumObjects(n);\n        this.removeBodyEvent.body = body;\n        delete this.idToBodyMap[body.id];\n        this.dispatchEvent(this.removeBodyEvent);\n      }\n    }\n  }, {\n    key: \"getBodyById\",\n    value: function getBodyById(id) {\n      return this.idToBodyMap[id];\n    }\n    /**\n     * @todo Make a faster map\n     */\n  }, {\n    key: \"getShapeById\",\n    value: function getShapeById(id) {\n      var bodies = this.bodies;\n      for (var i = 0; i < bodies.length; i++) {\n        var shapes = bodies[i].shapes;\n        for (var j = 0; j < shapes.length; j++) {\n          var shape = shapes[j];\n          if (shape.id === id) {\n            return shape;\n          }\n        }\n      }\n      return null;\n    }\n    /**\n     * Adds a contact material to the World\n     */\n  }, {\n    key: \"addContactMaterial\",\n    value: function addContactMaterial(cmat) {\n      // Add contact material\n      this.contactmaterials.push(cmat); // Add current contact material to the material table\n\n      this.contactMaterialTable.set(cmat.materials[0].id, cmat.materials[1].id, cmat);\n    }\n    /**\n     * Removes a contact material from the World.\n     */\n  }, {\n    key: \"removeContactMaterial\",\n    value: function removeContactMaterial(cmat) {\n      var idx = this.contactmaterials.indexOf(cmat);\n      if (idx === -1) {\n        return;\n      }\n      this.contactmaterials.splice(idx, 1);\n      this.contactMaterialTable.delete(cmat.materials[0].id, cmat.materials[1].id);\n    }\n    /**\n     * Step the simulation forward keeping track of last called time\n     * to be able to step the world at a fixed rate, independently of framerate.\n     *\n     * @param dt The fixed time step size to use (default: 1 / 60).\n     * @param maxSubSteps Maximum number of fixed steps to take per function call (default: 10).\n     * @see https://gafferongames.com/post/fix_your_timestep/\n     * @example\n     *     // Run the simulation independently of framerate every 1 / 60 ms\n     *     world.fixedStep()\n     */\n  }, {\n    key: \"fixedStep\",\n    value: function fixedStep(dt, maxSubSteps) {\n      if (dt === void 0) {\n        dt = 1 / 60;\n      }\n      if (maxSubSteps === void 0) {\n        maxSubSteps = 10;\n      }\n      var time = performance.now() / 1000; // seconds\n\n      if (!this.lastCallTime) {\n        this.step(dt, undefined, maxSubSteps);\n      } else {\n        var timeSinceLastCalled = time - this.lastCallTime;\n        this.step(dt, timeSinceLastCalled, maxSubSteps);\n      }\n      this.lastCallTime = time;\n    }\n    /**\n     * Step the physics world forward in time.\n     *\n     * There are two modes. The simple mode is fixed timestepping without interpolation. In this case you only use the first argument. The second case uses interpolation. In that you also provide the time since the function was last used, as well as the maximum fixed timesteps to take.\n     *\n     * @param dt The fixed time step size to use.\n     * @param timeSinceLastCalled The time elapsed since the function was last called.\n     * @param maxSubSteps Maximum number of fixed steps to take per function call (default: 10).\n     * @see https://web.archive.org/web/20180426154531/http://bulletphysics.org/mediawiki-1.5.8/index.php/Stepping_The_World#What_do_the_parameters_to_btDynamicsWorld::stepSimulation_mean.3F\n     * @example\n     *     // fixed timestepping without interpolation\n     *     world.step(1 / 60)\n     */\n  }, {\n    key: \"step\",\n    value: function step(dt, timeSinceLastCalled, maxSubSteps) {\n      if (maxSubSteps === void 0) {\n        maxSubSteps = 10;\n      }\n      if (timeSinceLastCalled === undefined) {\n        // Fixed, simple stepping\n        this.internalStep(dt); // Increment time\n\n        this.time += dt;\n      } else {\n        this.accumulator += timeSinceLastCalled;\n        var t0 = performance.now();\n        var substeps = 0;\n        while (this.accumulator >= dt && substeps < maxSubSteps) {\n          // Do fixed steps to catch up\n          this.internalStep(dt);\n          this.accumulator -= dt;\n          substeps++;\n          if (performance.now() - t0 > dt * 1000) {\n            // The framerate is not interactive anymore.\n            // We are below the target framerate.\n            // Better bail out.\n            break;\n          }\n        } // Remove the excess accumulator, since we may not\n        // have had enough substeps available to catch up\n\n        this.accumulator = this.accumulator % dt;\n        var t = this.accumulator / dt;\n        for (var j = 0; j !== this.bodies.length; j++) {\n          var _b12 = this.bodies[j];\n          _b12.previousPosition.lerp(_b12.position, t, _b12.interpolatedPosition);\n          _b12.previousQuaternion.slerp(_b12.quaternion, t, _b12.interpolatedQuaternion);\n          _b12.previousQuaternion.normalize();\n        }\n        this.time += timeSinceLastCalled;\n      }\n    }\n  }, {\n    key: \"internalStep\",\n    value: function internalStep(dt) {\n      this.dt = dt;\n      var contacts = this.contacts;\n      var p1 = World_step_p1;\n      var p2 = World_step_p2;\n      var N = this.bodies.length;\n      var bodies = this.bodies;\n      var solver = this.solver;\n      var gravity = this.gravity;\n      var doProfiling = this.doProfiling;\n      var profile = this.profile;\n      var DYNAMIC = Body.DYNAMIC;\n      var profilingStart = -Infinity;\n      var constraints = this.constraints;\n      var frictionEquationPool = World_step_frictionEquationPool;\n      gravity.length();\n      var gx = gravity.x;\n      var gy = gravity.y;\n      var gz = gravity.z;\n      var i = 0;\n      if (doProfiling) {\n        profilingStart = performance.now();\n      } // Add gravity to all objects\n\n      for (i = 0; i !== N; i++) {\n        var bi = bodies[i];\n        if (bi.type === DYNAMIC) {\n          // Only for dynamic bodies\n          var f = bi.force;\n          var m = bi.mass;\n          f.x += m * gx;\n          f.y += m * gy;\n          f.z += m * gz;\n        }\n      } // Update subsystems\n\n      for (var _i36 = 0, Nsubsystems = this.subsystems.length; _i36 !== Nsubsystems; _i36++) {\n        this.subsystems[_i36].update();\n      } // Collision detection\n\n      if (doProfiling) {\n        profilingStart = performance.now();\n      }\n      p1.length = 0; // Clean up pair arrays from last step\n\n      p2.length = 0;\n      this.broadphase.collisionPairs(this, p1, p2);\n      if (doProfiling) {\n        profile.broadphase = performance.now() - profilingStart;\n      } // Remove constrained pairs with collideConnected == false\n\n      var Nconstraints = constraints.length;\n      for (i = 0; i !== Nconstraints; i++) {\n        var _c7 = constraints[i];\n        if (!_c7.collideConnected) {\n          for (var j = p1.length - 1; j >= 0; j -= 1) {\n            if (_c7.bodyA === p1[j] && _c7.bodyB === p2[j] || _c7.bodyB === p1[j] && _c7.bodyA === p2[j]) {\n              p1.splice(j, 1);\n              p2.splice(j, 1);\n            }\n          }\n        }\n      }\n      this.collisionMatrixTick(); // Generate contacts\n\n      if (doProfiling) {\n        profilingStart = performance.now();\n      }\n      var oldcontacts = World_step_oldContacts;\n      var NoldContacts = contacts.length;\n      for (i = 0; i !== NoldContacts; i++) {\n        oldcontacts.push(contacts[i]);\n      }\n      contacts.length = 0; // Transfer FrictionEquation from current list to the pool for reuse\n\n      var NoldFrictionEquations = this.frictionEquations.length;\n      for (i = 0; i !== NoldFrictionEquations; i++) {\n        frictionEquationPool.push(this.frictionEquations[i]);\n      }\n      this.frictionEquations.length = 0;\n      this.narrowphase.getContacts(p1, p2, this, contacts, oldcontacts,\n      // To be reused\n      this.frictionEquations, frictionEquationPool);\n      if (doProfiling) {\n        profile.narrowphase = performance.now() - profilingStart;\n      } // Loop over all collisions\n\n      if (doProfiling) {\n        profilingStart = performance.now();\n      } // Add all friction eqs\n\n      for (i = 0; i < this.frictionEquations.length; i++) {\n        solver.addEquation(this.frictionEquations[i]);\n      }\n      var ncontacts = contacts.length;\n      for (var k = 0; k !== ncontacts; k++) {\n        // Current contact\n        var _c8 = contacts[k]; // Get current collision indeces\n\n        var _bi2 = _c8.bi;\n        var bj = _c8.bj;\n        var si = _c8.si;\n        var sj = _c8.sj; // Get collision properties\n\n        var cm = void 0;\n        if (_bi2.material && bj.material) {\n          cm = this.getContactMaterial(_bi2.material, bj.material) || this.defaultContactMaterial;\n        } else {\n          cm = this.defaultContactMaterial;\n        } // c.enabled = bi.collisionResponse && bj.collisionResponse && si.collisionResponse && sj.collisionResponse;\n\n        cm.friction; // c.restitution = cm.restitution;\n        // If friction or restitution were specified in the material, use them\n\n        if (_bi2.material && bj.material) {\n          if (_bi2.material.friction >= 0 && bj.material.friction >= 0) {\n            _bi2.material.friction * bj.material.friction;\n          }\n          if (_bi2.material.restitution >= 0 && bj.material.restitution >= 0) {\n            _c8.restitution = _bi2.material.restitution * bj.material.restitution;\n          }\n        } // c.setSpookParams(\n        //           cm.contactEquationStiffness,\n        //           cm.contactEquationRelaxation,\n        //           dt\n        //       );\n\n        solver.addEquation(_c8); // // Add friction constraint equation\n        // if(mu > 0){\n        // \t// Create 2 tangent equations\n        // \tconst mug = mu * gnorm;\n        // \tconst reducedMass = (bi.invMass + bj.invMass);\n        // \tif(reducedMass > 0){\n        // \t\treducedMass = 1/reducedMass;\n        // \t}\n        // \tconst pool = frictionEquationPool;\n        // \tconst c1 = pool.length ? pool.pop() : new FrictionEquation(bi,bj,mug*reducedMass);\n        // \tconst c2 = pool.length ? pool.pop() : new FrictionEquation(bi,bj,mug*reducedMass);\n        // \tthis.frictionEquations.push(c1, c2);\n        // \tc1.bi = c2.bi = bi;\n        // \tc1.bj = c2.bj = bj;\n        // \tc1.minForce = c2.minForce = -mug*reducedMass;\n        // \tc1.maxForce = c2.maxForce = mug*reducedMass;\n        // \t// Copy over the relative vectors\n        // \tc1.ri.copy(c.ri);\n        // \tc1.rj.copy(c.rj);\n        // \tc2.ri.copy(c.ri);\n        // \tc2.rj.copy(c.rj);\n        // \t// Construct tangents\n        // \tc.ni.tangents(c1.t, c2.t);\n        //           // Set spook params\n        //           c1.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, dt);\n        //           c2.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, dt);\n        //           c1.enabled = c2.enabled = c.enabled;\n        // \t// Add equations to solver\n        // \tsolver.addEquation(c1);\n        // \tsolver.addEquation(c2);\n        // }\n\n        if (_bi2.allowSleep && _bi2.type === Body.DYNAMIC && _bi2.sleepState === Body.SLEEPING && bj.sleepState === Body.AWAKE && bj.type !== Body.STATIC) {\n          var speedSquaredB = bj.velocity.lengthSquared() + bj.angularVelocity.lengthSquared();\n          var speedLimitSquaredB = Math.pow(bj.sleepSpeedLimit, 2);\n          if (speedSquaredB >= speedLimitSquaredB * 2) {\n            _bi2.wakeUpAfterNarrowphase = true;\n          }\n        }\n        if (bj.allowSleep && bj.type === Body.DYNAMIC && bj.sleepState === Body.SLEEPING && _bi2.sleepState === Body.AWAKE && _bi2.type !== Body.STATIC) {\n          var speedSquaredA = _bi2.velocity.lengthSquared() + _bi2.angularVelocity.lengthSquared();\n          var speedLimitSquaredA = Math.pow(_bi2.sleepSpeedLimit, 2);\n          if (speedSquaredA >= speedLimitSquaredA * 2) {\n            bj.wakeUpAfterNarrowphase = true;\n          }\n        } // Now we know that i and j are in contact. Set collision matrix state\n\n        this.collisionMatrix.set(_bi2, bj, true);\n        if (!this.collisionMatrixPrevious.get(_bi2, bj)) {\n          // First contact!\n          // We reuse the collideEvent object, otherwise we will end up creating new objects for each new contact, even if there's no event listener attached.\n          World_step_collideEvent.body = bj;\n          World_step_collideEvent.contact = _c8;\n          _bi2.dispatchEvent(World_step_collideEvent);\n          World_step_collideEvent.body = _bi2;\n          bj.dispatchEvent(World_step_collideEvent);\n        }\n        this.bodyOverlapKeeper.set(_bi2.id, bj.id);\n        this.shapeOverlapKeeper.set(si.id, sj.id);\n      }\n      this.emitContactEvents();\n      if (doProfiling) {\n        profile.makeContactConstraints = performance.now() - profilingStart;\n        profilingStart = performance.now();\n      } // Wake up bodies\n\n      for (i = 0; i !== N; i++) {\n        var _bi3 = bodies[i];\n        if (_bi3.wakeUpAfterNarrowphase) {\n          _bi3.wakeUp();\n          _bi3.wakeUpAfterNarrowphase = false;\n        }\n      } // Add user-added constraints\n\n      Nconstraints = constraints.length;\n      for (i = 0; i !== Nconstraints; i++) {\n        var _c9 = constraints[i];\n        _c9.update();\n        for (var _j11 = 0, Neq = _c9.equations.length; _j11 !== Neq; _j11++) {\n          var eq = _c9.equations[_j11];\n          solver.addEquation(eq);\n        }\n      } // Solve the constrained system\n\n      solver.solve(dt, this);\n      if (doProfiling) {\n        profile.solve = performance.now() - profilingStart;\n      } // Remove all contacts from solver\n\n      solver.removeAllEquations(); // Apply damping, see http://code.google.com/p/bullet/issues/detail?id=74 for details\n\n      var pow = Math.pow;\n      for (i = 0; i !== N; i++) {\n        var _bi4 = bodies[i];\n        if (_bi4.type & DYNAMIC) {\n          // Only for dynamic bodies\n          var ld = pow(1.0 - _bi4.linearDamping, dt);\n          var v = _bi4.velocity;\n          v.scale(ld, v);\n          var av = _bi4.angularVelocity;\n          if (av) {\n            var ad = pow(1.0 - _bi4.angularDamping, dt);\n            av.scale(ad, av);\n          }\n        }\n      }\n      this.dispatchEvent(World_step_preStepEvent); // Leap frog\n      // vnew = v + h*f/m\n      // xnew = x + h*vnew\n\n      if (doProfiling) {\n        profilingStart = performance.now();\n      }\n      var stepnumber = this.stepnumber;\n      var quatNormalize = stepnumber % (this.quatNormalizeSkip + 1) === 0;\n      var quatNormalizeFast = this.quatNormalizeFast;\n      for (i = 0; i !== N; i++) {\n        bodies[i].integrate(dt, quatNormalize, quatNormalizeFast);\n      }\n      this.clearForces();\n      this.broadphase.dirty = true;\n      if (doProfiling) {\n        profile.integrate = performance.now() - profilingStart;\n      } // Update step number\n\n      this.stepnumber += 1;\n      this.dispatchEvent(World_step_postStepEvent); // Sleeping update\n\n      var hasActiveBodies = true;\n      if (this.allowSleep) {\n        hasActiveBodies = false;\n        for (i = 0; i !== N; i++) {\n          var _bi5 = bodies[i];\n          _bi5.sleepTick(this.time);\n          if (_bi5.sleepState !== Body.SLEEPING) {\n            hasActiveBodies = true;\n          }\n        }\n      }\n      this.hasActiveBodies = hasActiveBodies;\n    }\n  }, {\n    key: \"emitContactEvents\",\n    value: function emitContactEvents() {\n      var hasBeginContact = this.hasAnyEventListener('beginContact');\n      var hasEndContact = this.hasAnyEventListener('endContact');\n      if (hasBeginContact || hasEndContact) {\n        this.bodyOverlapKeeper.getDiff(additions, removals);\n      }\n      if (hasBeginContact) {\n        for (var i = 0, l = additions.length; i < l; i += 2) {\n          beginContactEvent.bodyA = this.getBodyById(additions[i]);\n          beginContactEvent.bodyB = this.getBodyById(additions[i + 1]);\n          this.dispatchEvent(beginContactEvent);\n        }\n        beginContactEvent.bodyA = beginContactEvent.bodyB = null;\n      }\n      if (hasEndContact) {\n        for (var _i37 = 0, _l2 = removals.length; _i37 < _l2; _i37 += 2) {\n          endContactEvent.bodyA = this.getBodyById(removals[_i37]);\n          endContactEvent.bodyB = this.getBodyById(removals[_i37 + 1]);\n          this.dispatchEvent(endContactEvent);\n        }\n        endContactEvent.bodyA = endContactEvent.bodyB = null;\n      }\n      additions.length = removals.length = 0;\n      var hasBeginShapeContact = this.hasAnyEventListener('beginShapeContact');\n      var hasEndShapeContact = this.hasAnyEventListener('endShapeContact');\n      if (hasBeginShapeContact || hasEndShapeContact) {\n        this.shapeOverlapKeeper.getDiff(additions, removals);\n      }\n      if (hasBeginShapeContact) {\n        for (var _i38 = 0, _l3 = additions.length; _i38 < _l3; _i38 += 2) {\n          var shapeA = this.getShapeById(additions[_i38]);\n          var shapeB = this.getShapeById(additions[_i38 + 1]);\n          beginShapeContactEvent.shapeA = shapeA;\n          beginShapeContactEvent.shapeB = shapeB;\n          if (shapeA) beginShapeContactEvent.bodyA = shapeA.body;\n          if (shapeB) beginShapeContactEvent.bodyB = shapeB.body;\n          this.dispatchEvent(beginShapeContactEvent);\n        }\n        beginShapeContactEvent.bodyA = beginShapeContactEvent.bodyB = beginShapeContactEvent.shapeA = beginShapeContactEvent.shapeB = null;\n      }\n      if (hasEndShapeContact) {\n        for (var _i39 = 0, _l4 = removals.length; _i39 < _l4; _i39 += 2) {\n          var _shapeA = this.getShapeById(removals[_i39]);\n          var _shapeB = this.getShapeById(removals[_i39 + 1]);\n          endShapeContactEvent.shapeA = _shapeA;\n          endShapeContactEvent.shapeB = _shapeB;\n          if (_shapeA) endShapeContactEvent.bodyA = _shapeA.body;\n          if (_shapeB) endShapeContactEvent.bodyB = _shapeB.body;\n          this.dispatchEvent(endShapeContactEvent);\n        }\n        endShapeContactEvent.bodyA = endShapeContactEvent.bodyB = endShapeContactEvent.shapeA = endShapeContactEvent.shapeB = null;\n      }\n    }\n    /**\n     * Sets all body forces in the world to zero.\n     */\n  }, {\n    key: \"clearForces\",\n    value: function clearForces() {\n      var bodies = this.bodies;\n      var N = bodies.length;\n      for (var i = 0; i !== N; i++) {\n        var _b13 = bodies[i];\n        _b13.force;\n        _b13.torque;\n        _b13.force.set(0, 0, 0);\n        _b13.torque.set(0, 0, 0);\n      }\n    }\n  }]);\n  return World;\n}(EventTarget); // Temp stuff\nnew AABB();\nvar tmpRay = new Ray(); // performance.now() fallback on Date.now()\n\nvar performance = globalThis.performance || {};\nif (!performance.now) {\n  var nowOffset = Date.now();\n  if (performance.timing && performance.timing.navigationStart) {\n    nowOffset = performance.timing.navigationStart;\n  }\n  performance.now = function () {\n    return Date.now() - nowOffset;\n  };\n}\nnew Vec3(); // Dispatched after the world has stepped forward in time.\n// Reusable event objects to save memory.\n\nvar World_step_postStepEvent = {\n  type: 'postStep'\n}; // Dispatched before the world steps forward in time.\n\nvar World_step_preStepEvent = {\n  type: 'preStep'\n};\nvar World_step_collideEvent = {\n  type: Body.COLLIDE_EVENT_NAME,\n  body: null,\n  contact: null\n}; // Pools for unused objects\n\nvar World_step_oldContacts = [];\nvar World_step_frictionEquationPool = []; // Reusable arrays for collision pairs\n\nvar World_step_p1 = [];\nvar World_step_p2 = []; // Stuff for emitContactEvents\n\nvar additions = [];\nvar removals = [];\nvar beginContactEvent = {\n  type: 'beginContact',\n  bodyA: null,\n  bodyB: null\n};\nvar endContactEvent = {\n  type: 'endContact',\n  bodyA: null,\n  bodyB: null\n};\nvar beginShapeContactEvent = {\n  type: 'beginShapeContact',\n  bodyA: null,\n  bodyB: null,\n  shapeA: null,\n  shapeB: null\n};\nvar endShapeContactEvent = {\n  type: 'endShapeContact',\n  bodyA: null,\n  bodyB: null,\n  shapeA: null,\n  shapeB: null\n};\nexport { AABB, ArrayCollisionMatrix, BODY_SLEEP_STATES, BODY_TYPES, Body, Box, Broadphase, COLLISION_TYPES, ConeTwistConstraint, Constraint, ContactEquation, ContactMaterial, ConvexPolyhedron, Cylinder, DistanceConstraint, Equation, EventTarget, FrictionEquation, GSSolver, GridBroadphase, Heightfield, HingeConstraint, JacobianElement, LockConstraint, Mat3, Material, NaiveBroadphase, Narrowphase, ObjectCollisionMatrix, Particle, Plane, PointToPointConstraint, Pool, Quaternion, RAY_MODES, Ray, RaycastResult, RaycastVehicle, RigidVehicle, RotationalEquation, RotationalMotorEquation, SAPBroadphase, SHAPE_TYPES, SPHSystem, Shape, Solver, Sphere, SplitSolver, Spring, Transform, Trimesh, Vec3, Vec3Pool, WheelInfo, World };","map":{"version":3,"names":["ObjectCollisionMatrix","matrix","bi","bj","i","id","j","temp","value","n","Mat3","elements","e","vector","x","y","z","target","Vec3","v","s","length","A","B","T","a11","a12","a13","a21","a22","a23","a31","a32","a33","b11","b12","b13","b21","b22","b23","b31","b32","b33","t","b","nr","nc","eqns","push","k","np","kp","p","multiplier","isNaN","Infinity","toString","row","column","undefined","r","sep","reverse_eqns","q","w","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","M","tmp","vx","vy","vz","Math","sqrt","invN","ninv","dot","px","py","pz","scalar","t1","t2","norm","Vec3_tangents_n","inorm","set","randVec","Vec3_tangents_randVec","abs","cross","precision","negate","antip_neg","almostEquals","ZERO","UNIT_X","UNIT_Y","UNIT_Z","AABB","options","lowerBound","upperBound","copy","points","position","quaternion","skinSize","l","u","vmult","tmp$1","vadd","aabb","min","max","l1","u1","l2","u2","overlapsX","overlapsY","overlapsZ","a","c","d","f","g","h","frame","corners","transformIntoFrame_corners","getCorners","corner","pointToLocal","setFromPoints","pointToWorld","ray","direction","from","dirFracX","dirFracY","dirFracZ","t3","t4","t5","t6","tmin","tmax","ArrayCollisionMatrix","index","EventTarget","type","listener","_listeners","listeners","includes","indexOf","splice","event","listenerArray","call","Quaternion","angle","sin","cos","targetAxis","normalize","acos","isAntiparallelTo","sfv_t1","sfv_t2","tangents","setFromAxisAngle","PI","quat","ax","ay","az","aw","bx","by","bz","bw","conjugate","inorm2","qx","qy","qz","qw","ix","iy","iz","iw","order","heading","attitude","bank","test","atan2","sqx","sqy","sqz","asin","Error","c1","c2","c3","s1","s2","s3","toQuat","omega","cosom","sinom","scale0","scale1","angularVelocity","dt","angularFactor","half_dt","SHAPE_TYPES","SPHERE","PLANE","BOX","COMPOUND","CONVEXPOLYHEDRON","HEIGHTFIELD","PARTICLE","CYLINDER","TRIMESH","Shape","idCounter","boundingSphereRadius","collisionResponse","collisionFilterGroup","collisionFilterMask","material","body","mass","pos","types","Transform","worldPoint","result","pointToLocalFrame","localPoint","pointToWorldFrame","localVector","vsub","tmpQuat$1","worldVector","ConvexPolyhedron","props","vertices","faces","normals","axes","faceNormals","computeNormals","updateBoundingSphereRadius","worldVertices","worldVerticesNeedsUpdate","worldFaceNormals","worldFaceNormalsNeedsUpdate","uniqueAxes","slice","uniqueEdges","computeEdges","edges","edge","face","numVertices","found","clone","getFaceNormal","vertex","console","error","warn","va","vb","vc","computeNormal","posA","quatA","hullB","posB","quatB","separatingNormal","minDist","maxDist","WorldNormal","closestFaceB","dmax","Number","MAX_VALUE","worldVertsB1","worldb","clipFaceAgainstHull","faceListA","faceListB","faceANormalWS3","Worldnormal1","deltaC","worldEdge0","worldEdge1","Cross","dmin","hullA","numFacesA","fi","testSepAxis","numFacesB","e0","e1","almostZero","dist","axis","project","maxminA","maxminB","maxA","minA","maxB","minB","d0","d1","depth","aabbmax","aabbmin","computeLocalAABB","face_i","faceANormalWS","edge0","WorldEdge0","worldPlaneAnormal1","planeNormalWS1","worldA1","localPlaneNormal","planeNormalWS","worldVertsB2","pVtxIn","pVtxOut","closestFaceA","polyA","connectedFaces","numVerticesA","otherFace","localPlaneEq","getPlaneConstantOfFace","planeEqWS","clipFaceAgainstPlane","shift","log","point","normal","inVertices","outVertices","planeNormal","planeConstant","n_dot_first","n_dot_last","numVerts","firstVertex","lastVertex","vi","newv","lerp","verts","worldVerts","N","worldNormals","max2","norm2","lengthSquared","minx","miny","minz","maxx","maxy","maxz","tempWorldVertex","scale","offset","positiveResult","pointInside","getAveragePointLocal","vToP","r1","vToPointInside","r2","cb","ab","isZero","shape","project_worldVertex","localAxis","project_localAxis","localOrigin","project_localOrigin","vs","setZero","vectorToLocalFrame","add","val","Box","halfExtents","convexPolyhedronRepresentation","updateConvexPolyhedronRepresentation","sx","sy","sz","V","calculateInertia","sixTargetVectors","sides","ex","callback","worldCornerTempPos","worldCornersTemp","wc","BODY_TYPES","DYNAMIC","STATIC","KINEMATIC","BODY_SLEEP_STATES","AWAKE","SLEEPY","SLEEPING","Body","world","vlambda","previousPosition","interpolatedPosition","initPosition","velocity","initVelocity","force","invMass","linearDamping","allowSleep","sleepState","sleepSpeedLimit","sleepTimeLimit","timeLastSleepy","wakeUpAfterNarrowphase","torque","initQuaternion","previousQuaternion","interpolatedQuaternion","initAngularVelocity","shapes","shapeOffsets","shapeOrientations","inertia","invInertia","invInertiaWorld","invMassSolve","invInertiaSolve","invInertiaWorldSolve","fixedRotation","angularDamping","linearFactor","aabbNeedsUpdate","boundingRadius","wlambda","isTrigger","Boolean","addShape","updateMassProperties","prevState","dispatchEvent","wakeupEvent","time","speedSquared","speedLimitSquared","sleepyEvent","wakeUp","sleep","sleepEvent","_offset","_orientation","orientation","updateBoundingRadius","radius","tmpVec","tmpQuat","bodyQuat","shapeAABB","updateAABB_shapeAABB","mult","calculateWorldAABB","extend","I","m1","uiw_m1","m2","uiw_m2","uiw_m3","setRotationFromQuaternion","transpose","mmult","relativePoint","rotForce","Body_applyForce_rotForce","localForce","worldForce","Body_applyLocalForce_worldForce","relativePointWorld","Body_applyLocalForce_relativePointWorld","vectorToWorldFrame","applyForce","impulse","velo","Body_applyImpulse_velo","rotVelo","Body_applyImpulse_rotVelo","localImpulse","worldImpulse","Body_applyLocalImpulse_worldImpulse","Body_applyLocalImpulse_relativePoint","applyImpulse","Body_updateMassProperties_halfExtents","fixed","updateAABB","updateInertiaWorld","quatNormalize","quatNormalizeFast","angularVelo","iMdt","tx","ty","tz","integrate","normalizeFast","COLLIDE_EVENT_NAME","Broadphase","useBoundingBoxes","dirty","p1","p2","bodyA","bodyB","pairs1","pairs2","doBoundingBoxBroadphase","doBoundingSphereBroadphase","Broadphase_collisionPairs_r","boundingRadiusSum2","overlaps","Broadphase_makePairsUnique_temp","Broadphase_makePairsUnique_p1","Broadphase_makePairsUnique_p2","id1","id2","key","keys","pop","pairIndex","sa","sb","pow","GridBroadphase","aabbMin","aabbMax","nx","ny","nz","nbins","bins","binLengths","bodies","xstep","ystep","zstep","xmax","ymax","zmax","xmin","ymin","zmin","xmult","ymult","zmult","binsizeX","binsizeY","binsizeZ","binRadius","Nbins","ceil","addBoxToBins","x0","y0","z0","x1","y1","z1","xoff0","yoff0","zoff0","xoff1","yoff1","zoff1","xoff","yoff","zoff","idx","si","worldNormalNeedsUpdate","computeWorldNormal","worldNormal","xreset","yreset","zreset","GridBroadphase_collisionPairs_d","xi","yi","zi","binLength","bin","needBroadphaseCollision","intersectionTest","makePairsUnique","NaiveBroadphase","RaycastResult","rayFromWorld","rayToWorld","hitNormalWorld","hitPointWorld","hasHit","hitFaceIndex","distance","shouldStop","_Shape$types$SPHERE","_Shape$types$PLANE","_Shape$types$BOX","_Shape$types$CYLINDER","_Shape$types$CONVEXPO","_Shape$types$HEIGHTFI","_Shape$types$TRIMESH","RAY_MODES","CLOSEST","ANY","ALL","Ray","to","checkCollisionResponse","skipBackfaces","mode","_intersectSphere","_intersectPlane","_intersectBox","_intersectConvex","_intersectHeightfield","_intersectTrimesh","reset","updateDirection","getAABB","tmpAABB$1","tmpArray","broadphase","aabbQuery","intersectBodies","intersectBody_xi","qi","intersectBody_qi","intersectShape","intersectBody","distanceFromIntersection","intersectMethod","box","reportedShape","len","planeToFrom","planeToTo","distanceTo","n_dot_dir","planePointToFrom","dir_scaled_with_t","reportIntersection","data","elementSize","localRay","intersectHeightfield_localRay","intersectHeightfield_index","iMinX","iMinY","iMaxX","iMaxY","getIndexOfPosition","getAabbAtIndex","overlapsRay","getConvexTrianglePillar","pillarOffset","worldPillarOffset","pillarConvex","intersectConvexOptions","sphere","delta","intersectionPoint","Ray_intersectSphere_intersectionPoint","Ray_intersectSphere_normal","d2","intersectConvex_minDistNormal","intersectConvex_normal","intersectConvex_vector","intersectConvex_minDistIntersect","faceList","fromToDistance","Nfaces","faceNormal","intersectPoint","pointInTriangle","mesh","intersectTrimesh_normal","triangles","intersectTrimesh_triangles","treeTransform","intersectTrimesh_treeTransform","localDirection","intersectTrimesh_localDirection","localFrom","intersectTrimesh_localFrom","localTo","intersectTrimesh_localTo","worldIntersectPoint","intersectTrimesh_worldIntersectPoint","intersectTrimesh_worldNormal","indices","fromToDistanceSquared","distanceSquared","tree","rayQuery","trianglesIndex","getNormal","getVertex","squaredDistance","v0","v1","v2","dot00","dot01","dot02","dot11","dot12","intersect","SAPBroadphase","axisList","axisIndex","_addBodyHandler","_removeBodyHandler","setWorld","removeEventListener","addEventListener","sortList","checkBounds","insertionSortX","insertionSortY","insertionSortZ","sumX","sumX2","sumY","sumY2","sumZ","sumZ2","centerX","centerY","centerZ","varianceX","varianceY","varianceZ","biPos","bjPos","ri","rj","boundA2","boundB1","Utils","defaults","Constraint","collideConnected","wakeUpBodies","equations","eqs","enabled","JacobianElement","spatial","rotational","element","Equation","minForce","maxForce","eps","jacobianElementA","jacobianElementB","setSpookParams","stiffness","relaxation","timeStep","GW","computeGW","Gq","computeGq","GiMf","computeGiMf","GA","GB","xj","vj","wi","wj","multiplyVectors","ti","fj","tj","invMassi","invMassj","iMfi","iMfj","invIi_vmult_taui","invIj_vmult_tauj","invIi","invIj","deltalambda","addToWlambda_temp","addScaledVector","computeGiMGt","ContactEquation","restitution","ni","rixn","ContactEquation_computeB_temp1","rjxn","ContactEquation_computeB_temp2","penetrationVec","ContactEquation_computeB_temp3","ePlusOne","ContactEquation_getImpactVelocityAlongNormal_vi","ContactEquation_getImpactVelocityAlongNormal_vj","ContactEquation_getImpactVelocityAlongNormal_xi","ContactEquation_getImpactVelocityAlongNormal_xj","relVel","ContactEquation_getImpactVelocityAlongNormal_relVel","getVelocityAtWorldPoint","PointToPointConstraint","pivotA","pivotB","equationX","equationY","equationZ","ConeEquation","axisA","axisB","nj","nixnj","tmpVec1$2","njxni","tmpVec2$2","RotationalEquation","maxAngle","tmpVec1$1","tmpVec2$1","ConeTwistConstraint","coneEquation","twistEquation","twistAngle","cone","twist","DistanceConstraint","eq","distanceEquation","halfDist","LockConstraint","halfWay","xA","xB","yA","yB","zA","zB","rotationalEquation1","rotationalEquation2","r3","rotationalEquation3","motorEquation","LockConstraint_update_tmpVec1","LockConstraint_update_tmpVec2","RotationalMotorEquation","targetVelocity","HingeConstraint","rotational1","rotational2","motor","speed","worldAxisA","HingeConstraint_update_tmpVec1","worldAxisB","HingeConstraint_update_tmpVec2","FrictionEquation","slipForce","rixt","FrictionEquation_computeB_temp1","rjxt","FrictionEquation_computeB_temp2","ContactMaterial","friction","contactEquationStiffness","contactEquationRelaxation","frictionEquationStiffness","frictionEquationRelaxation","materials","Material","name","Spring","restLength","damping","localAnchorA","localAnchorB","worldAnchorA","setWorldAnchorA","worldAnchorB","setWorldAnchorB","applyForce_r","r_unit","applyForce_r_unit","applyForce_u","applyForce_f","applyForce_tmp","applyForce_worldAnchorA","applyForce_worldAnchorB","applyForce_ri","applyForce_rj","ri_x_f","applyForce_ri_x_f","rj_x_f","applyForce_rj_x_f","getWorldAnchorA","getWorldAnchorB","rlen","WheelInfo","chassisConnectionPointLocal","chassisConnectionPointWorld","directionLocal","directionWorld","axleLocal","axleWorld","suspensionRestLength","suspensionMaxLength","suspensionStiffness","dampingCompression","dampingRelaxation","frictionSlip","forwardAcceleration","sideAcceleration","steering","rotation","deltaRotation","rollInfluence","maxSuspensionForce","isFrontWheel","clippedInvContactDotSuspension","suspensionRelativeVelocity","suspensionForce","slipInfo","skidInfo","suspensionLength","maxSuspensionTravel","useCustomSlidingRotationalSpeed","customSlidingRotationalSpeed","sliding","engineForce","brake","sideImpulse","forwardImpulse","raycastResult","worldTransform","isInContact","chassis","relpos","chassis_velocity_at_contactPoint","projVel","inv","RaycastVehicle","chassisBody","wheelInfos","indexRightAxis","indexForwardAxis","indexUpAxis","constraints","preStepCallback","currentVehicleSpeedKmHour","numWheelsOnGround","info","wheelIndex","wheel","addBody","that","updateVehicle","numWheels","updateWheelTransform","forwardWorld","getVehicleAxisWorld","castRay","updateSuspension","updateFriction","hitNormalWorldScaledWithProj","fwd","vel","m","proj","proj2","deltaTime","chassisMass","w_it","susp_length","current_length","length_diff","projected_rel_vel","susp_damping","removeBody","rayvector","castRay_rayvector","castRay_target","updateWheelTransformWorld","raylen","source","oldState","rayTest","object","groundObject","hitDistance","minSuspensionLength","maxSuspensionLength","denominator","up","tmpVec4","right","tmpVec5","tmpVec6","steeringOrn","rotatingOrn","surfNormalWS_scaled_proj","updateFriction_surfNormalWS_scaled_proj","forwardWS","updateFriction_forwardWS","axle","updateFriction_axle","axlei","wheelTrans","getWheelTransformWorld","directions","surfNormalWS","resolveSingleBilateral","sideFrictionStiffness2","sideFactor","fwdFactor","rollingFriction","defaultRollingFrictionImpulse","maxImpulse","calcRollingFriction","factor","maximp","maximpSide","maximpSquared","impulseSquared","rel_pos","rel_pos2","sideImp","calcRollingFriction_vel1","calcRollingFriction_vel2","calcRollingFriction_vel","body0","body1","frictionPosWorld","frictionDirectionWorld","j1","contactPosWorld","vel1","vel2","vrel","denom0","computeImpulseDenominator","denom1","jacDiagABInv","computeImpulseDenominator_r0","computeImpulseDenominator_c0","computeImpulseDenominator_vec","computeImpulseDenominator_m","r0","c0","vec","resolveSingleBilateral_vel1","resolveSingleBilateral_vel2","resolveSingleBilateral_vel","pos1","body2","pos2","normalLenSqr","rel_vel","contactDamping","massTerm","Sphere","RigidVehicle","wheelBodies","coordinateSystem","wheelAxes","wheelForces","wheelBody","worldPosition","hingeConstraint","enableMotor","motorTargetVelocity","disableMotor","bodyTorque","concat","addConstraint","_update","bind","applyWheelForce","removeConstraint","worldAxis","SPHSystem","particles","density","smoothingRadius","speedOfSound","viscosity","pressures","densities","neighbors","particle","R2","SPHSystem_getNeighbors_dist","SPHSystem_update_dist","cs","getNeighbors","numNeighbors","sum","weight","a_pressure","SPHSystem_update_a_pressure","a_visc","SPHSystem_update_a_visc","gradW","SPHSystem_update_gradW","r_vec","SPHSystem_update_r_vec","SPHSystem_update_u","Pij","nabla","neighbor","gradw","nablaw","rVec","resultVec","Cylinder","radiusTop","radiusBottom","height","numSegments","bottomface","topface","theta","thetaN","Particle","Plane","tempNormal","maxVal","Heightfield","maxValue","minValue","updateMinValue","updateMaxValue","cacheEnabled","_cachedPillars","clearCachedConvexTrianglePillar","clamp","floor","edgeClamp","getHeightAt_idx","lowerDist2","upperDist2","upper","getTriangle","getNormalAt_a","getNormalAt_b","getNormalAt_c","getNormalAt_e0","getNormalAt_e1","getTriangleAt","_ref","getHeightAt_a","getHeightAt_b","getHeightAt_c","barycentricWeights","getHeightAt_weights","getUpperTriangle","getCacheConvexTrianglePillarKey","convex","offsetResult","getCachedConvexTrianglePillar","setCachedConvexTrianglePillar","image","canvas","document","createElement","width","context","getContext","drawImage","imageData","getImageData","unshift","update","cx","cy","OctreeNode","root","children","elementData","level","nodeData","contains","maxDepth","subdivided","subdivide","insert","halfDiagonal","child","queue","node","Array","prototype","apply","tmpAABB","toLocalFrame","removeEmptyNodes","Octree","Trimesh","Float32Array","Int16Array","updateEdges","updateNormals","updateTree","triangleAABB","i3","_getUnscaledVertex","unscaledAABB","isx","isy","isz","wasUniform","isUniform","computeNormals_n","Object","split","parseInt","edgeIndex","firstOrSecond","vertexStore","vertexIndex","vectorStore","getEdgeVector_va","getEdgeVector_vb","getEdgeVertex","out","cli_aabb","computeLocalAABB_worldVert","calculateWorldAABB_frame","calculateWorldAABB_aabb","toWorldFrame","tube","radialSegments","tubularSegments","arc","Solver","GSSolver","iterations","tolerance","iter","maxIter","tolSquared","Neq","Nbodies","invC","deltalambdaTot","GWlambda","lambdaj","updateSolveMassProperties","invCs","GSSolver_solve_invCs","Bs","GSSolver_solve_Bs","lambda","GSSolver_solve_lambda","computeB","computeC","computeGWlambda","addToWlambda","vmul","invDt","SplitSolver","subsolver","nodes","nodePool","createNode","visited","SplitSolver_solve_nodes","SplitSolver_solve_eqs","dummyWorld","SplitSolver_solve_dummyWorld","getUnvisitedNode","bfs","visitFunc","Neqs","sort","sortById","addEquation","solve","removeAllEquations","Nnodes","bds","Pool","objects","Nargs","arguments","constructObject","size","Vec3Pool","COLLISION_TYPES","sphereSphere","spherePlane","boxBox","sphereBox","planeBox","convexConvex","sphereConvex","planeConvex","boxConvex","sphereHeightfield","boxHeightfield","convexHeightfield","sphereParticle","planeParticle","boxParticle","convexParticle","cylinderCylinder","sphereCylinder","planeCylinder","boxCylinder","convexCylinder","heightfieldCylinder","particleCylinder","sphereTrimesh","planeTrimesh","Narrowphase","contactPointPool","frictionEquationPool","frictionResult","v3pool","currentContactMaterial","defaultContactMaterial","enableFrictionReduction","sj","overrideShapeA","overrideShapeB","cm","matA","matB","contactEquation","outArray","shapeA","shapeB","mug","frictionGravity","gravity","reducedMass","pool","numContacts","createFrictionEquationsFromContact","f1","f2","averageNormal","averageContactPointA","averageContactPointB","invNumContacts","oldcontacts","frictionPool","tmpQuat1","qj","tmpQuat2","tmpVec1","tmpVec2","bodyContactMaterial","getContactMaterial","justTest","shapeContactMaterial","resolverIndex","resolver","retval","shapeOverlapKeeper","bodyOverlapKeeper","rsi","rsj","contactEq","createContactEquation","point_on_plane_to_sphere","plane_to_sphere_ortho","sphereBox_sides","box_to_sphere","getSideNormals","R","side_ns","sphereBox_side_ns","side_ns1","sphereBox_side_ns1","side_ns2","sphereBox_side_ns2","side_h","side_penetrations","side_dot1","side_dot2","side_distance","nsides","ns","sphereBox_ns","ns1","sphereBox_ns1","ns2","sphereBox_ns2","h1","h2","dot1","dot2","get","sphere_to_corner","sphereBox_sphere_to_corner","release","edgeTangent","edgeCenter","orthogonal","Nsides","orthonorm","tdist","ndist","res","sepAxis","convexConvex_sepAxis","findSeparatingAxis","convexConvex_q","clipAgainstHull","createFrictionFromAverage","convex_to_sphere","worldCorner","sphereConvex_worldCorner","sphereConvex_sphereToCorner","nfaces","sphereConvex_worldNormal","sphereConvex_worldPoint","worldSpherePointClosestToPlane","sphereConvex_worldSpherePointClosestToPlane","sphereConvex_penetrationVec","penetration","worldPointToSphere","sphereConvex_sphereToWorldPoint","faceVerts","Nverts","worldVertex","pointInPolygon","penetrationVec2","penetrationSpherePoint","Nfaceverts","sphereConvex_edge","edgeUnit","sphereConvex_edgeUnit","unit","v1_to_xi","xi_to_p","planeShape","convexShape","planePosition","convexPosition","planeQuat","convexQuat","planeBody","convexBody","planeConvex_v","planeConvex_normal","planeConvex_relpos","projected","planeConvex_projected","sphereShape","hfShape","spherePos","hfPos","sphereQuat","hfQuat","sphereBody","hfBody","sphereHeightfield_tmp2","localSpherePos","sphereHeightfield_tmp1","minMax","getRectMinMax","numContactsBefore","intersecting","convexPos","convexHeightfield_tmp2","convexHeightfield_faceList","localConvexPos","convexHeightfield_tmp1","particleSphere_normal","particlePlane_normal","particlePlane_relpos","particlePlane_projected","penetratedFaceIndex","penetratedFaceNormal","convexParticle_penetratedFaceNormal","worldPenetrationVec","convexParticle_worldPenetrationVec","minPenetration","local","convexParticle_local","cqj","pointIsInside","computeWorldVertices","computeWorldFaceNormals","convexParticle_vertexToParticle","trimeshShape","trimeshPos","trimeshQuat","trimeshBody","edgeVertexA","sphereTrimesh_edgeVertexA","edgeVertexB","sphereTrimesh_edgeVertexB","edgeVector","sphereTrimesh_edgeVector","edgeVectorUnit","sphereTrimesh_edgeVectorUnit","sphereTrimesh_localSpherePos","sphereTrimesh_tmp","localSphereAABB","sphereTrimesh_localSphereAABB","sphereTrimesh_v2","sphereTrimesh_relpos","sphereTrimesh_triangles","sphereRadius","getTrianglesInAABB","sphereTrimesh_v","radiusSquared","positionAlongEdgeB","positionAlongEdgeA","sphereTrimesh_va","sphereTrimesh_vb","sphereTrimesh_vc","sphereTrimesh_normal","getTriangleVertices","planePos","planeTrimesh_normal","planeTrimesh_relpos","planeTrimesh_projected","pointInPolygon_edge","pointInPolygon_edge_x_normal","pointInPolygon_vtp","edge_x_normal","vertex_to_p","OverlapKeeper","current","previous","getKey","additions","removals","al","bl","keyA","unpackAndPush","keyB","array","TupleDictionary","World","contacts","frictionEquations","quatNormalizeSkip","stepnumber","default_dt","nextId","hasActiveBodies","solver","narrowphase","collisionMatrix","collisionMatrixPrevious","contactmaterials","contactMaterialTable","defaultMaterial","doProfiling","profile","makeContactConstraints","accumulator","subsystems","addBodyEvent","removeBodyEvent","idToBodyMap","tick","raycastClosest","raycastAll","tmpRay","intersectWorld","setNumObjects","cmat","delete","maxSubSteps","performance","now","lastCallTime","step","timeSinceLastCalled","internalStep","t0","substeps","slerp","World_step_p1","World_step_p2","profilingStart","World_step_frictionEquationPool","gx","gy","gz","Nsubsystems","collisionPairs","Nconstraints","collisionMatrixTick","World_step_oldContacts","NoldContacts","NoldFrictionEquations","getContacts","ncontacts","speedSquaredB","speedLimitSquaredB","speedSquaredA","speedLimitSquaredA","World_step_collideEvent","contact","emitContactEvents","ld","av","ad","World_step_preStepEvent","clearForces","World_step_postStepEvent","sleepTick","hasBeginContact","hasAnyEventListener","hasEndContact","getDiff","beginContactEvent","getBodyById","endContactEvent","hasBeginShapeContact","hasEndShapeContact","getShapeById","beginShapeContactEvent","endShapeContactEvent","globalThis","nowOffset","Date","timing","navigationStart"],"sources":["C:/Users/lucas/Desktop/Estudos Js/React-Playground/reactApp/node_modules/cannon-es/dist/cannon-es.js"],"sourcesContent":["/**\n * Records what objects are colliding with each other\n */\nclass ObjectCollisionMatrix {\n  /**\n   * The matrix storage.\n   */\n\n  /**\n   * @todo Remove useless constructor\n   */\n  constructor() {\n    this.matrix = {};\n  }\n  /**\n   * get\n   */\n\n\n  get(bi, bj) {\n    let {\n      id: i\n    } = bi;\n    let {\n      id: j\n    } = bj;\n\n    if (j > i) {\n      const temp = j;\n      j = i;\n      i = temp;\n    }\n\n    return `${i}-${j}` in this.matrix;\n  }\n  /**\n   * set\n   */\n\n\n  set(bi, bj, value) {\n    let {\n      id: i\n    } = bi;\n    let {\n      id: j\n    } = bj;\n\n    if (j > i) {\n      const temp = j;\n      j = i;\n      i = temp;\n    }\n\n    if (value) {\n      this.matrix[`${i}-${j}`] = true;\n    } else {\n      delete this.matrix[`${i}-${j}`];\n    }\n  }\n  /**\n   * Empty the matrix\n   */\n\n\n  reset() {\n    this.matrix = {};\n  }\n  /**\n   * Set max number of objects\n   */\n\n\n  setNumObjects(n) {}\n\n}\n\n/**\n * A 3x3 matrix.\n * Authored by {@link http://github.com/schteppe/ schteppe}\n */\nclass Mat3 {\n  /**\n   * A vector of length 9, containing all matrix elements.\n   */\n\n  /**\n   * @param elements A vector of length 9, containing all matrix elements.\n   */\n  constructor(elements) {\n    if (elements === void 0) {\n      elements = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n    }\n\n    this.elements = elements;\n  }\n  /**\n   * Sets the matrix to identity\n   * @todo Should perhaps be renamed to `setIdentity()` to be more clear.\n   * @todo Create another function that immediately creates an identity matrix eg. `eye()`\n   */\n\n\n  identity() {\n    const e = this.elements;\n    e[0] = 1;\n    e[1] = 0;\n    e[2] = 0;\n    e[3] = 0;\n    e[4] = 1;\n    e[5] = 0;\n    e[6] = 0;\n    e[7] = 0;\n    e[8] = 1;\n  }\n  /**\n   * Set all elements to zero\n   */\n\n\n  setZero() {\n    const e = this.elements;\n    e[0] = 0;\n    e[1] = 0;\n    e[2] = 0;\n    e[3] = 0;\n    e[4] = 0;\n    e[5] = 0;\n    e[6] = 0;\n    e[7] = 0;\n    e[8] = 0;\n  }\n  /**\n   * Sets the matrix diagonal elements from a Vec3\n   */\n\n\n  setTrace(vector) {\n    const e = this.elements;\n    e[0] = vector.x;\n    e[4] = vector.y;\n    e[8] = vector.z;\n  }\n  /**\n   * Gets the matrix diagonal elements\n   */\n\n\n  getTrace(target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n\n    const e = this.elements;\n    target.x = e[0];\n    target.y = e[4];\n    target.z = e[8];\n    return target;\n  }\n  /**\n   * Matrix-Vector multiplication\n   * @param v The vector to multiply with\n   * @param target Optional, target to save the result in.\n   */\n\n\n  vmult(v, target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n\n    const e = this.elements;\n    const x = v.x;\n    const y = v.y;\n    const z = v.z;\n    target.x = e[0] * x + e[1] * y + e[2] * z;\n    target.y = e[3] * x + e[4] * y + e[5] * z;\n    target.z = e[6] * x + e[7] * y + e[8] * z;\n    return target;\n  }\n  /**\n   * Matrix-scalar multiplication\n   */\n\n\n  smult(s) {\n    for (let i = 0; i < this.elements.length; i++) {\n      this.elements[i] *= s;\n    }\n  }\n  /**\n   * Matrix multiplication\n   * @param matrix Matrix to multiply with from left side.\n   */\n\n\n  mmult(matrix, target) {\n    if (target === void 0) {\n      target = new Mat3();\n    }\n\n    const A = this.elements;\n    const B = matrix.elements;\n    const T = target.elements;\n    const a11 = A[0],\n          a12 = A[1],\n          a13 = A[2],\n          a21 = A[3],\n          a22 = A[4],\n          a23 = A[5],\n          a31 = A[6],\n          a32 = A[7],\n          a33 = A[8];\n    const b11 = B[0],\n          b12 = B[1],\n          b13 = B[2],\n          b21 = B[3],\n          b22 = B[4],\n          b23 = B[5],\n          b31 = B[6],\n          b32 = B[7],\n          b33 = B[8];\n    T[0] = a11 * b11 + a12 * b21 + a13 * b31;\n    T[1] = a11 * b12 + a12 * b22 + a13 * b32;\n    T[2] = a11 * b13 + a12 * b23 + a13 * b33;\n    T[3] = a21 * b11 + a22 * b21 + a23 * b31;\n    T[4] = a21 * b12 + a22 * b22 + a23 * b32;\n    T[5] = a21 * b13 + a22 * b23 + a23 * b33;\n    T[6] = a31 * b11 + a32 * b21 + a33 * b31;\n    T[7] = a31 * b12 + a32 * b22 + a33 * b32;\n    T[8] = a31 * b13 + a32 * b23 + a33 * b33;\n    return target;\n  }\n  /**\n   * Scale each column of the matrix\n   */\n\n\n  scale(vector, target) {\n    if (target === void 0) {\n      target = new Mat3();\n    }\n\n    const e = this.elements;\n    const t = target.elements;\n\n    for (let i = 0; i !== 3; i++) {\n      t[3 * i + 0] = vector.x * e[3 * i + 0];\n      t[3 * i + 1] = vector.y * e[3 * i + 1];\n      t[3 * i + 2] = vector.z * e[3 * i + 2];\n    }\n\n    return target;\n  }\n  /**\n   * Solve Ax=b\n   * @param b The right hand side\n   * @param target Optional. Target vector to save in.\n   * @return The solution x\n   * @todo should reuse arrays\n   */\n\n\n  solve(b, target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n\n    // Construct equations\n    const nr = 3; // num rows\n\n    const nc = 4; // num cols\n\n    const eqns = [];\n    let i;\n    let j;\n\n    for (i = 0; i < nr * nc; i++) {\n      eqns.push(0);\n    }\n\n    for (i = 0; i < 3; i++) {\n      for (j = 0; j < 3; j++) {\n        eqns[i + nc * j] = this.elements[i + 3 * j];\n      }\n    }\n\n    eqns[3 + 4 * 0] = b.x;\n    eqns[3 + 4 * 1] = b.y;\n    eqns[3 + 4 * 2] = b.z; // Compute right upper triangular version of the matrix - Gauss elimination\n\n    let n = 3;\n    const k = n;\n    let np;\n    const kp = 4; // num rows\n\n    let p;\n\n    do {\n      i = k - n;\n\n      if (eqns[i + nc * i] === 0) {\n        // the pivot is null, swap lines\n        for (j = i + 1; j < k; j++) {\n          if (eqns[i + nc * j] !== 0) {\n            np = kp;\n\n            do {\n              // do ligne( i ) = ligne( i ) + ligne( k )\n              p = kp - np;\n              eqns[p + nc * i] += eqns[p + nc * j];\n            } while (--np);\n\n            break;\n          }\n        }\n      }\n\n      if (eqns[i + nc * i] !== 0) {\n        for (j = i + 1; j < k; j++) {\n          const multiplier = eqns[i + nc * j] / eqns[i + nc * i];\n          np = kp;\n\n          do {\n            // do ligne( k ) = ligne( k ) - multiplier * ligne( i )\n            p = kp - np;\n            eqns[p + nc * j] = p <= i ? 0 : eqns[p + nc * j] - eqns[p + nc * i] * multiplier;\n          } while (--np);\n        }\n      }\n    } while (--n); // Get the solution\n\n\n    target.z = eqns[2 * nc + 3] / eqns[2 * nc + 2];\n    target.y = (eqns[1 * nc + 3] - eqns[1 * nc + 2] * target.z) / eqns[1 * nc + 1];\n    target.x = (eqns[0 * nc + 3] - eqns[0 * nc + 2] * target.z - eqns[0 * nc + 1] * target.y) / eqns[0 * nc + 0];\n\n    if (isNaN(target.x) || isNaN(target.y) || isNaN(target.z) || target.x === Infinity || target.y === Infinity || target.z === Infinity) {\n      throw `Could not solve equation! Got x=[${target.toString()}], b=[${b.toString()}], A=[${this.toString()}]`;\n    }\n\n    return target;\n  }\n  /**\n   * Get an element in the matrix by index. Index starts at 0, not 1!!!\n   * @param value If provided, the matrix element will be set to this value.\n   */\n\n\n  e(row, column, value) {\n    if (value === undefined) {\n      return this.elements[column + 3 * row];\n    } else {\n      // Set value\n      this.elements[column + 3 * row] = value;\n    }\n  }\n  /**\n   * Copy another matrix into this matrix object.\n   */\n\n\n  copy(matrix) {\n    for (let i = 0; i < matrix.elements.length; i++) {\n      this.elements[i] = matrix.elements[i];\n    }\n\n    return this;\n  }\n  /**\n   * Returns a string representation of the matrix.\n   */\n\n\n  toString() {\n    let r = '';\n    const sep = ',';\n\n    for (let i = 0; i < 9; i++) {\n      r += this.elements[i] + sep;\n    }\n\n    return r;\n  }\n  /**\n   * reverse the matrix\n   * @param target Target matrix to save in.\n   * @return The solution x\n   */\n\n\n  reverse(target) {\n    if (target === void 0) {\n      target = new Mat3();\n    }\n\n    // Construct equations\n    const nr = 3; // num rows\n\n    const nc = 6; // num cols\n\n    const eqns = reverse_eqns;\n    let i;\n    let j;\n\n    for (i = 0; i < 3; i++) {\n      for (j = 0; j < 3; j++) {\n        eqns[i + nc * j] = this.elements[i + 3 * j];\n      }\n    }\n\n    eqns[3 + 6 * 0] = 1;\n    eqns[3 + 6 * 1] = 0;\n    eqns[3 + 6 * 2] = 0;\n    eqns[4 + 6 * 0] = 0;\n    eqns[4 + 6 * 1] = 1;\n    eqns[4 + 6 * 2] = 0;\n    eqns[5 + 6 * 0] = 0;\n    eqns[5 + 6 * 1] = 0;\n    eqns[5 + 6 * 2] = 1; // Compute right upper triangular version of the matrix - Gauss elimination\n\n    let n = 3;\n    const k = n;\n    let np;\n    const kp = nc; // num rows\n\n    let p;\n\n    do {\n      i = k - n;\n\n      if (eqns[i + nc * i] === 0) {\n        // the pivot is null, swap lines\n        for (j = i + 1; j < k; j++) {\n          if (eqns[i + nc * j] !== 0) {\n            np = kp;\n\n            do {\n              // do line( i ) = line( i ) + line( k )\n              p = kp - np;\n              eqns[p + nc * i] += eqns[p + nc * j];\n            } while (--np);\n\n            break;\n          }\n        }\n      }\n\n      if (eqns[i + nc * i] !== 0) {\n        for (j = i + 1; j < k; j++) {\n          const multiplier = eqns[i + nc * j] / eqns[i + nc * i];\n          np = kp;\n\n          do {\n            // do line( k ) = line( k ) - multiplier * line( i )\n            p = kp - np;\n            eqns[p + nc * j] = p <= i ? 0 : eqns[p + nc * j] - eqns[p + nc * i] * multiplier;\n          } while (--np);\n        }\n      }\n    } while (--n); // eliminate the upper left triangle of the matrix\n\n\n    i = 2;\n\n    do {\n      j = i - 1;\n\n      do {\n        const multiplier = eqns[i + nc * j] / eqns[i + nc * i];\n        np = nc;\n\n        do {\n          p = nc - np;\n          eqns[p + nc * j] = eqns[p + nc * j] - eqns[p + nc * i] * multiplier;\n        } while (--np);\n      } while (j--);\n    } while (--i); // operations on the diagonal\n\n\n    i = 2;\n\n    do {\n      const multiplier = 1 / eqns[i + nc * i];\n      np = nc;\n\n      do {\n        p = nc - np;\n        eqns[p + nc * i] = eqns[p + nc * i] * multiplier;\n      } while (--np);\n    } while (i--);\n\n    i = 2;\n\n    do {\n      j = 2;\n\n      do {\n        p = eqns[nr + j + nc * i];\n\n        if (isNaN(p) || p === Infinity) {\n          throw `Could not reverse! A=[${this.toString()}]`;\n        }\n\n        target.e(i, j, p);\n      } while (j--);\n    } while (i--);\n\n    return target;\n  }\n  /**\n   * Set the matrix from a quaterion\n   */\n\n\n  setRotationFromQuaternion(q) {\n    const x = q.x;\n    const y = q.y;\n    const z = q.z;\n    const w = q.w;\n    const x2 = x + x;\n    const y2 = y + y;\n    const z2 = z + z;\n    const xx = x * x2;\n    const xy = x * y2;\n    const xz = x * z2;\n    const yy = y * y2;\n    const yz = y * z2;\n    const zz = z * z2;\n    const wx = w * x2;\n    const wy = w * y2;\n    const wz = w * z2;\n    const e = this.elements;\n    e[3 * 0 + 0] = 1 - (yy + zz);\n    e[3 * 0 + 1] = xy - wz;\n    e[3 * 0 + 2] = xz + wy;\n    e[3 * 1 + 0] = xy + wz;\n    e[3 * 1 + 1] = 1 - (xx + zz);\n    e[3 * 1 + 2] = yz - wx;\n    e[3 * 2 + 0] = xz - wy;\n    e[3 * 2 + 1] = yz + wx;\n    e[3 * 2 + 2] = 1 - (xx + yy);\n    return this;\n  }\n  /**\n   * Transpose the matrix\n   * @param target Optional. Where to store the result.\n   * @return The target Mat3, or a new Mat3 if target was omitted.\n   */\n\n\n  transpose(target) {\n    if (target === void 0) {\n      target = new Mat3();\n    }\n\n    const M = this.elements;\n    const T = target.elements;\n    let tmp; //Set diagonals\n\n    T[0] = M[0];\n    T[4] = M[4];\n    T[8] = M[8];\n    tmp = M[1];\n    T[1] = M[3];\n    T[3] = tmp;\n    tmp = M[2];\n    T[2] = M[6];\n    T[6] = tmp;\n    tmp = M[5];\n    T[5] = M[7];\n    T[7] = tmp;\n    return target;\n  }\n\n}\nconst reverse_eqns = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n\n/**\n * 3-dimensional vector\n * @example\n *     const v = new Vec3(1, 2, 3)\n *     console.log('x=' + v.x) // x=1\n */\n\nclass Vec3 {\n  constructor(x, y, z) {\n    if (x === void 0) {\n      x = 0.0;\n    }\n\n    if (y === void 0) {\n      y = 0.0;\n    }\n\n    if (z === void 0) {\n      z = 0.0;\n    }\n\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n  /**\n   * Vector cross product\n   * @param target Optional target to save in.\n   */\n\n\n  cross(vector, target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n\n    const vx = vector.x;\n    const vy = vector.y;\n    const vz = vector.z;\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    target.x = y * vz - z * vy;\n    target.y = z * vx - x * vz;\n    target.z = x * vy - y * vx;\n    return target;\n  }\n  /**\n   * Set the vectors' 3 elements\n   */\n\n\n  set(x, y, z) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    return this;\n  }\n  /**\n   * Set all components of the vector to zero.\n   */\n\n\n  setZero() {\n    this.x = this.y = this.z = 0;\n  }\n  /**\n   * Vector addition\n   */\n\n\n  vadd(vector, target) {\n    if (target) {\n      target.x = vector.x + this.x;\n      target.y = vector.y + this.y;\n      target.z = vector.z + this.z;\n    } else {\n      return new Vec3(this.x + vector.x, this.y + vector.y, this.z + vector.z);\n    }\n  }\n  /**\n   * Vector subtraction\n   * @param target Optional target to save in.\n   */\n\n\n  vsub(vector, target) {\n    if (target) {\n      target.x = this.x - vector.x;\n      target.y = this.y - vector.y;\n      target.z = this.z - vector.z;\n    } else {\n      return new Vec3(this.x - vector.x, this.y - vector.y, this.z - vector.z);\n    }\n  }\n  /**\n   * Get the cross product matrix a_cross from a vector, such that a x b = a_cross * b = c\n   *\n   * See {@link https://www8.cs.umu.se/kurser/TDBD24/VT06/lectures/Lecture6.pdf Umeå University Lecture}\n   */\n\n\n  crossmat() {\n    return new Mat3([0, -this.z, this.y, this.z, 0, -this.x, -this.y, this.x, 0]);\n  }\n  /**\n   * Normalize the vector. Note that this changes the values in the vector.\n    * @return Returns the norm of the vector\n   */\n\n\n  normalize() {\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    const n = Math.sqrt(x * x + y * y + z * z);\n\n    if (n > 0.0) {\n      const invN = 1 / n;\n      this.x *= invN;\n      this.y *= invN;\n      this.z *= invN;\n    } else {\n      // Make something up\n      this.x = 0;\n      this.y = 0;\n      this.z = 0;\n    }\n\n    return n;\n  }\n  /**\n   * Get the version of this vector that is of length 1.\n   * @param target Optional target to save in\n   * @return Returns the unit vector\n   */\n\n\n  unit(target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    let ninv = Math.sqrt(x * x + y * y + z * z);\n\n    if (ninv > 0.0) {\n      ninv = 1.0 / ninv;\n      target.x = x * ninv;\n      target.y = y * ninv;\n      target.z = z * ninv;\n    } else {\n      target.x = 1;\n      target.y = 0;\n      target.z = 0;\n    }\n\n    return target;\n  }\n  /**\n   * Get the length of the vector\n   */\n\n\n  length() {\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    return Math.sqrt(x * x + y * y + z * z);\n  }\n  /**\n   * Get the squared length of the vector.\n   */\n\n\n  lengthSquared() {\n    return this.dot(this);\n  }\n  /**\n   * Get distance from this point to another point\n   */\n\n\n  distanceTo(p) {\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    const px = p.x;\n    const py = p.y;\n    const pz = p.z;\n    return Math.sqrt((px - x) * (px - x) + (py - y) * (py - y) + (pz - z) * (pz - z));\n  }\n  /**\n   * Get squared distance from this point to another point\n   */\n\n\n  distanceSquared(p) {\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    const px = p.x;\n    const py = p.y;\n    const pz = p.z;\n    return (px - x) * (px - x) + (py - y) * (py - y) + (pz - z) * (pz - z);\n  }\n  /**\n   * Multiply all the components of the vector with a scalar.\n   * @param target The vector to save the result in.\n   */\n\n\n  scale(scalar, target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    target.x = scalar * x;\n    target.y = scalar * y;\n    target.z = scalar * z;\n    return target;\n  }\n  /**\n   * Multiply the vector with an other vector, component-wise.\n   * @param target The vector to save the result in.\n   */\n\n\n  vmul(vector, target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n\n    target.x = vector.x * this.x;\n    target.y = vector.y * this.y;\n    target.z = vector.z * this.z;\n    return target;\n  }\n  /**\n   * Scale a vector and add it to this vector. Save the result in \"target\". (target = this + vector * scalar)\n   * @param target The vector to save the result in.\n   */\n\n\n  addScaledVector(scalar, vector, target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n\n    target.x = this.x + scalar * vector.x;\n    target.y = this.y + scalar * vector.y;\n    target.z = this.z + scalar * vector.z;\n    return target;\n  }\n  /**\n   * Calculate dot product\n   * @param vector\n   */\n\n\n  dot(vector) {\n    return this.x * vector.x + this.y * vector.y + this.z * vector.z;\n  }\n\n  isZero() {\n    return this.x === 0 && this.y === 0 && this.z === 0;\n  }\n  /**\n   * Make the vector point in the opposite direction.\n   * @param target Optional target to save in\n   */\n\n\n  negate(target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n\n    target.x = -this.x;\n    target.y = -this.y;\n    target.z = -this.z;\n    return target;\n  }\n  /**\n   * Compute two artificial tangents to the vector\n   * @param t1 Vector object to save the first tangent in\n   * @param t2 Vector object to save the second tangent in\n   */\n\n\n  tangents(t1, t2) {\n    const norm = this.length();\n\n    if (norm > 0.0) {\n      const n = Vec3_tangents_n;\n      const inorm = 1 / norm;\n      n.set(this.x * inorm, this.y * inorm, this.z * inorm);\n      const randVec = Vec3_tangents_randVec;\n\n      if (Math.abs(n.x) < 0.9) {\n        randVec.set(1, 0, 0);\n        n.cross(randVec, t1);\n      } else {\n        randVec.set(0, 1, 0);\n        n.cross(randVec, t1);\n      }\n\n      n.cross(t1, t2);\n    } else {\n      // The normal length is zero, make something up\n      t1.set(1, 0, 0);\n      t2.set(0, 1, 0);\n    }\n  }\n  /**\n   * Converts to a more readable format\n   */\n\n\n  toString() {\n    return `${this.x},${this.y},${this.z}`;\n  }\n  /**\n   * Converts to an array\n   */\n\n\n  toArray() {\n    return [this.x, this.y, this.z];\n  }\n  /**\n   * Copies value of source to this vector.\n   */\n\n\n  copy(vector) {\n    this.x = vector.x;\n    this.y = vector.y;\n    this.z = vector.z;\n    return this;\n  }\n  /**\n   * Do a linear interpolation between two vectors\n   * @param t A number between 0 and 1. 0 will make this function return u, and 1 will make it return v. Numbers in between will generate a vector in between them.\n   */\n\n\n  lerp(vector, t, target) {\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    target.x = x + (vector.x - x) * t;\n    target.y = y + (vector.y - y) * t;\n    target.z = z + (vector.z - z) * t;\n  }\n  /**\n   * Check if a vector equals is almost equal to another one.\n   */\n\n\n  almostEquals(vector, precision) {\n    if (precision === void 0) {\n      precision = 1e-6;\n    }\n\n    if (Math.abs(this.x - vector.x) > precision || Math.abs(this.y - vector.y) > precision || Math.abs(this.z - vector.z) > precision) {\n      return false;\n    }\n\n    return true;\n  }\n  /**\n   * Check if a vector is almost zero\n   */\n\n\n  almostZero(precision) {\n    if (precision === void 0) {\n      precision = 1e-6;\n    }\n\n    if (Math.abs(this.x) > precision || Math.abs(this.y) > precision || Math.abs(this.z) > precision) {\n      return false;\n    }\n\n    return true;\n  }\n  /**\n   * Check if the vector is anti-parallel to another vector.\n   * @param precision Set to zero for exact comparisons\n   */\n\n\n  isAntiparallelTo(vector, precision) {\n    this.negate(antip_neg);\n    return antip_neg.almostEquals(vector, precision);\n  }\n  /**\n   * Clone the vector\n   */\n\n\n  clone() {\n    return new Vec3(this.x, this.y, this.z);\n  }\n\n}\nVec3.ZERO = new Vec3(0, 0, 0);\nVec3.UNIT_X = new Vec3(1, 0, 0);\nVec3.UNIT_Y = new Vec3(0, 1, 0);\nVec3.UNIT_Z = new Vec3(0, 0, 1);\nconst Vec3_tangents_n = new Vec3();\nconst Vec3_tangents_randVec = new Vec3();\nconst antip_neg = new Vec3();\n\n/**\n * Axis aligned bounding box class.\n */\nclass AABB {\n  /**\n   * The lower bound of the bounding box\n   */\n\n  /**\n   * The upper bound of the bounding box\n   */\n  constructor(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.lowerBound = new Vec3();\n    this.upperBound = new Vec3();\n\n    if (options.lowerBound) {\n      this.lowerBound.copy(options.lowerBound);\n    }\n\n    if (options.upperBound) {\n      this.upperBound.copy(options.upperBound);\n    }\n  }\n  /**\n   * Set the AABB bounds from a set of points.\n   * @param points An array of Vec3's.\n   * @return The self object\n   */\n\n\n  setFromPoints(points, position, quaternion, skinSize) {\n    const l = this.lowerBound;\n    const u = this.upperBound;\n    const q = quaternion; // Set to the first point\n\n    l.copy(points[0]);\n\n    if (q) {\n      q.vmult(l, l);\n    }\n\n    u.copy(l);\n\n    for (let i = 1; i < points.length; i++) {\n      let p = points[i];\n\n      if (q) {\n        q.vmult(p, tmp$1);\n        p = tmp$1;\n      }\n\n      if (p.x > u.x) {\n        u.x = p.x;\n      }\n\n      if (p.x < l.x) {\n        l.x = p.x;\n      }\n\n      if (p.y > u.y) {\n        u.y = p.y;\n      }\n\n      if (p.y < l.y) {\n        l.y = p.y;\n      }\n\n      if (p.z > u.z) {\n        u.z = p.z;\n      }\n\n      if (p.z < l.z) {\n        l.z = p.z;\n      }\n    } // Add offset\n\n\n    if (position) {\n      position.vadd(l, l);\n      position.vadd(u, u);\n    }\n\n    if (skinSize) {\n      l.x -= skinSize;\n      l.y -= skinSize;\n      l.z -= skinSize;\n      u.x += skinSize;\n      u.y += skinSize;\n      u.z += skinSize;\n    }\n\n    return this;\n  }\n  /**\n   * Copy bounds from an AABB to this AABB\n   * @param aabb Source to copy from\n   * @return The this object, for chainability\n   */\n\n\n  copy(aabb) {\n    this.lowerBound.copy(aabb.lowerBound);\n    this.upperBound.copy(aabb.upperBound);\n    return this;\n  }\n  /**\n   * Clone an AABB\n   */\n\n\n  clone() {\n    return new AABB().copy(this);\n  }\n  /**\n   * Extend this AABB so that it covers the given AABB too.\n   */\n\n\n  extend(aabb) {\n    this.lowerBound.x = Math.min(this.lowerBound.x, aabb.lowerBound.x);\n    this.upperBound.x = Math.max(this.upperBound.x, aabb.upperBound.x);\n    this.lowerBound.y = Math.min(this.lowerBound.y, aabb.lowerBound.y);\n    this.upperBound.y = Math.max(this.upperBound.y, aabb.upperBound.y);\n    this.lowerBound.z = Math.min(this.lowerBound.z, aabb.lowerBound.z);\n    this.upperBound.z = Math.max(this.upperBound.z, aabb.upperBound.z);\n  }\n  /**\n   * Returns true if the given AABB overlaps this AABB.\n   */\n\n\n  overlaps(aabb) {\n    const l1 = this.lowerBound;\n    const u1 = this.upperBound;\n    const l2 = aabb.lowerBound;\n    const u2 = aabb.upperBound; //      l2        u2\n    //      |---------|\n    // |--------|\n    // l1       u1\n\n    const overlapsX = l2.x <= u1.x && u1.x <= u2.x || l1.x <= u2.x && u2.x <= u1.x;\n    const overlapsY = l2.y <= u1.y && u1.y <= u2.y || l1.y <= u2.y && u2.y <= u1.y;\n    const overlapsZ = l2.z <= u1.z && u1.z <= u2.z || l1.z <= u2.z && u2.z <= u1.z;\n    return overlapsX && overlapsY && overlapsZ;\n  } // Mostly for debugging\n\n\n  volume() {\n    const l = this.lowerBound;\n    const u = this.upperBound;\n    return (u.x - l.x) * (u.y - l.y) * (u.z - l.z);\n  }\n  /**\n   * Returns true if the given AABB is fully contained in this AABB.\n   */\n\n\n  contains(aabb) {\n    const l1 = this.lowerBound;\n    const u1 = this.upperBound;\n    const l2 = aabb.lowerBound;\n    const u2 = aabb.upperBound; //      l2        u2\n    //      |---------|\n    // |---------------|\n    // l1              u1\n\n    return l1.x <= l2.x && u1.x >= u2.x && l1.y <= l2.y && u1.y >= u2.y && l1.z <= l2.z && u1.z >= u2.z;\n  }\n\n  getCorners(a, b, c, d, e, f, g, h) {\n    const l = this.lowerBound;\n    const u = this.upperBound;\n    a.copy(l);\n    b.set(u.x, l.y, l.z);\n    c.set(u.x, u.y, l.z);\n    d.set(l.x, u.y, u.z);\n    e.set(u.x, l.y, u.z);\n    f.set(l.x, u.y, l.z);\n    g.set(l.x, l.y, u.z);\n    h.copy(u);\n  }\n  /**\n   * Get the representation of an AABB in another frame.\n   * @return The \"target\" AABB object.\n   */\n\n\n  toLocalFrame(frame, target) {\n    const corners = transformIntoFrame_corners;\n    const a = corners[0];\n    const b = corners[1];\n    const c = corners[2];\n    const d = corners[3];\n    const e = corners[4];\n    const f = corners[5];\n    const g = corners[6];\n    const h = corners[7]; // Get corners in current frame\n\n    this.getCorners(a, b, c, d, e, f, g, h); // Transform them to new local frame\n\n    for (let i = 0; i !== 8; i++) {\n      const corner = corners[i];\n      frame.pointToLocal(corner, corner);\n    }\n\n    return target.setFromPoints(corners);\n  }\n  /**\n   * Get the representation of an AABB in the global frame.\n   * @return The \"target\" AABB object.\n   */\n\n\n  toWorldFrame(frame, target) {\n    const corners = transformIntoFrame_corners;\n    const a = corners[0];\n    const b = corners[1];\n    const c = corners[2];\n    const d = corners[3];\n    const e = corners[4];\n    const f = corners[5];\n    const g = corners[6];\n    const h = corners[7]; // Get corners in current frame\n\n    this.getCorners(a, b, c, d, e, f, g, h); // Transform them to new local frame\n\n    for (let i = 0; i !== 8; i++) {\n      const corner = corners[i];\n      frame.pointToWorld(corner, corner);\n    }\n\n    return target.setFromPoints(corners);\n  }\n  /**\n   * Check if the AABB is hit by a ray.\n   */\n\n\n  overlapsRay(ray) {\n    const {\n      direction,\n      from\n    } = ray; // const t = 0\n    // ray.direction is unit direction vector of ray\n\n    const dirFracX = 1 / direction.x;\n    const dirFracY = 1 / direction.y;\n    const dirFracZ = 1 / direction.z; // this.lowerBound is the corner of AABB with minimal coordinates - left bottom, rt is maximal corner\n\n    const t1 = (this.lowerBound.x - from.x) * dirFracX;\n    const t2 = (this.upperBound.x - from.x) * dirFracX;\n    const t3 = (this.lowerBound.y - from.y) * dirFracY;\n    const t4 = (this.upperBound.y - from.y) * dirFracY;\n    const t5 = (this.lowerBound.z - from.z) * dirFracZ;\n    const t6 = (this.upperBound.z - from.z) * dirFracZ; // const tmin = Math.max(Math.max(Math.min(t1, t2), Math.min(t3, t4)));\n    // const tmax = Math.min(Math.min(Math.max(t1, t2), Math.max(t3, t4)));\n\n    const tmin = Math.max(Math.max(Math.min(t1, t2), Math.min(t3, t4)), Math.min(t5, t6));\n    const tmax = Math.min(Math.min(Math.max(t1, t2), Math.max(t3, t4)), Math.max(t5, t6)); // if tmax < 0, ray (line) is intersecting AABB, but whole AABB is behing us\n\n    if (tmax < 0) {\n      //t = tmax;\n      return false;\n    } // if tmin > tmax, ray doesn't intersect AABB\n\n\n    if (tmin > tmax) {\n      //t = tmax;\n      return false;\n    }\n\n    return true;\n  }\n\n}\nconst tmp$1 = new Vec3();\nconst transformIntoFrame_corners = [new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3()];\n\n/**\n * Collision \"matrix\".\n * It's actually a triangular-shaped array of whether two bodies are touching this step, for reference next step\n */\nclass ArrayCollisionMatrix {\n  /**\n   * The matrix storage.\n   */\n  constructor() {\n    this.matrix = [];\n  }\n  /**\n   * Get an element\n   */\n\n\n  get(bi, bj) {\n    let {\n      index: i\n    } = bi;\n    let {\n      index: j\n    } = bj;\n\n    if (j > i) {\n      const temp = j;\n      j = i;\n      i = temp;\n    }\n\n    return this.matrix[(i * (i + 1) >> 1) + j - 1];\n  }\n  /**\n   * Set an element\n   */\n\n\n  set(bi, bj, value) {\n    let {\n      index: i\n    } = bi;\n    let {\n      index: j\n    } = bj;\n\n    if (j > i) {\n      const temp = j;\n      j = i;\n      i = temp;\n    }\n\n    this.matrix[(i * (i + 1) >> 1) + j - 1] = value ? 1 : 0;\n  }\n  /**\n   * Sets all elements to zero\n   */\n\n\n  reset() {\n    for (let i = 0, l = this.matrix.length; i !== l; i++) {\n      this.matrix[i] = 0;\n    }\n  }\n  /**\n   * Sets the max number of objects\n   */\n\n\n  setNumObjects(n) {\n    this.matrix.length = n * (n - 1) >> 1;\n  }\n\n}\n\n/**\n * Base class for objects that dispatches events.\n */\nclass EventTarget {\n  /**\n   * Add an event listener\n   * @return The self object, for chainability.\n   */\n  addEventListener(type, listener) {\n    if (this._listeners === undefined) {\n      this._listeners = {};\n    }\n\n    const listeners = this._listeners;\n\n    if (listeners[type] === undefined) {\n      listeners[type] = [];\n    }\n\n    if (!listeners[type].includes(listener)) {\n      listeners[type].push(listener);\n    }\n\n    return this;\n  }\n  /**\n   * Check if an event listener is added\n   */\n\n\n  hasEventListener(type, listener) {\n    if (this._listeners === undefined) {\n      return false;\n    }\n\n    const listeners = this._listeners;\n\n    if (listeners[type] !== undefined && listeners[type].includes(listener)) {\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Check if any event listener of the given type is added\n   */\n\n\n  hasAnyEventListener(type) {\n    if (this._listeners === undefined) {\n      return false;\n    }\n\n    const listeners = this._listeners;\n    return listeners[type] !== undefined;\n  }\n  /**\n   * Remove an event listener\n   * @return The self object, for chainability.\n   */\n\n\n  removeEventListener(type, listener) {\n    if (this._listeners === undefined) {\n      return this;\n    }\n\n    const listeners = this._listeners;\n\n    if (listeners[type] === undefined) {\n      return this;\n    }\n\n    const index = listeners[type].indexOf(listener);\n\n    if (index !== -1) {\n      listeners[type].splice(index, 1);\n    }\n\n    return this;\n  }\n  /**\n   * Emit an event.\n   * @return The self object, for chainability.\n   */\n\n\n  dispatchEvent(event) {\n    if (this._listeners === undefined) {\n      return this;\n    }\n\n    const listeners = this._listeners;\n    const listenerArray = listeners[event.type];\n\n    if (listenerArray !== undefined) {\n      event.target = this;\n\n      for (let i = 0, l = listenerArray.length; i < l; i++) {\n        listenerArray[i].call(this, event);\n      }\n    }\n\n    return this;\n  }\n\n}\n\n/**\n * A Quaternion describes a rotation in 3D space. The Quaternion is mathematically defined as Q = x*i + y*j + z*k + w, where (i,j,k) are imaginary basis vectors. (x,y,z) can be seen as a vector related to the axis of rotation, while the real multiplier, w, is related to the amount of rotation.\n * @param x Multiplier of the imaginary basis vector i.\n * @param y Multiplier of the imaginary basis vector j.\n * @param z Multiplier of the imaginary basis vector k.\n * @param w Multiplier of the real part.\n * @see http://en.wikipedia.org/wiki/Quaternion\n */\n\nclass Quaternion {\n  constructor(x, y, z, w) {\n    if (x === void 0) {\n      x = 0;\n    }\n\n    if (y === void 0) {\n      y = 0;\n    }\n\n    if (z === void 0) {\n      z = 0;\n    }\n\n    if (w === void 0) {\n      w = 1;\n    }\n\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n  }\n  /**\n   * Set the value of the quaternion.\n   */\n\n\n  set(x, y, z, w) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n    return this;\n  }\n  /**\n   * Convert to a readable format\n   * @return \"x,y,z,w\"\n   */\n\n\n  toString() {\n    return `${this.x},${this.y},${this.z},${this.w}`;\n  }\n  /**\n   * Convert to an Array\n   * @return [x, y, z, w]\n   */\n\n\n  toArray() {\n    return [this.x, this.y, this.z, this.w];\n  }\n  /**\n   * Set the quaternion components given an axis and an angle in radians.\n   */\n\n\n  setFromAxisAngle(vector, angle) {\n    const s = Math.sin(angle * 0.5);\n    this.x = vector.x * s;\n    this.y = vector.y * s;\n    this.z = vector.z * s;\n    this.w = Math.cos(angle * 0.5);\n    return this;\n  }\n  /**\n   * Converts the quaternion to [ axis, angle ] representation.\n   * @param targetAxis A vector object to reuse for storing the axis.\n   * @return An array, first element is the axis and the second is the angle in radians.\n   */\n\n\n  toAxisAngle(targetAxis) {\n    if (targetAxis === void 0) {\n      targetAxis = new Vec3();\n    }\n\n    this.normalize(); // if w>1 acos and sqrt will produce errors, this cant happen if quaternion is normalised\n\n    const angle = 2 * Math.acos(this.w);\n    const s = Math.sqrt(1 - this.w * this.w); // assuming quaternion normalised then w is less than 1, so term always positive.\n\n    if (s < 0.001) {\n      // test to avoid divide by zero, s is always positive due to sqrt\n      // if s close to zero then direction of axis not important\n      targetAxis.x = this.x; // if it is important that axis is normalised then replace with x=1; y=z=0;\n\n      targetAxis.y = this.y;\n      targetAxis.z = this.z;\n    } else {\n      targetAxis.x = this.x / s; // normalise axis\n\n      targetAxis.y = this.y / s;\n      targetAxis.z = this.z / s;\n    }\n\n    return [targetAxis, angle];\n  }\n  /**\n   * Set the quaternion value given two vectors. The resulting rotation will be the needed rotation to rotate u to v.\n   */\n\n\n  setFromVectors(u, v) {\n    if (u.isAntiparallelTo(v)) {\n      const t1 = sfv_t1;\n      const t2 = sfv_t2;\n      u.tangents(t1, t2);\n      this.setFromAxisAngle(t1, Math.PI);\n    } else {\n      const a = u.cross(v);\n      this.x = a.x;\n      this.y = a.y;\n      this.z = a.z;\n      this.w = Math.sqrt(u.length() ** 2 * v.length() ** 2) + u.dot(v);\n      this.normalize();\n    }\n\n    return this;\n  }\n  /**\n   * Multiply the quaternion with an other quaternion.\n   */\n\n\n  mult(quat, target) {\n    if (target === void 0) {\n      target = new Quaternion();\n    }\n\n    const ax = this.x;\n    const ay = this.y;\n    const az = this.z;\n    const aw = this.w;\n    const bx = quat.x;\n    const by = quat.y;\n    const bz = quat.z;\n    const bw = quat.w;\n    target.x = ax * bw + aw * bx + ay * bz - az * by;\n    target.y = ay * bw + aw * by + az * bx - ax * bz;\n    target.z = az * bw + aw * bz + ax * by - ay * bx;\n    target.w = aw * bw - ax * bx - ay * by - az * bz;\n    return target;\n  }\n  /**\n   * Get the inverse quaternion rotation.\n   */\n\n\n  inverse(target) {\n    if (target === void 0) {\n      target = new Quaternion();\n    }\n\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    const w = this.w;\n    this.conjugate(target);\n    const inorm2 = 1 / (x * x + y * y + z * z + w * w);\n    target.x *= inorm2;\n    target.y *= inorm2;\n    target.z *= inorm2;\n    target.w *= inorm2;\n    return target;\n  }\n  /**\n   * Get the quaternion conjugate\n   */\n\n\n  conjugate(target) {\n    if (target === void 0) {\n      target = new Quaternion();\n    }\n\n    target.x = -this.x;\n    target.y = -this.y;\n    target.z = -this.z;\n    target.w = this.w;\n    return target;\n  }\n  /**\n   * Normalize the quaternion. Note that this changes the values of the quaternion.\n   */\n\n\n  normalize() {\n    let l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n\n    if (l === 0) {\n      this.x = 0;\n      this.y = 0;\n      this.z = 0;\n      this.w = 0;\n    } else {\n      l = 1 / l;\n      this.x *= l;\n      this.y *= l;\n      this.z *= l;\n      this.w *= l;\n    }\n\n    return this;\n  }\n  /**\n   * Approximation of quaternion normalization. Works best when quat is already almost-normalized.\n   * @author unphased, https://github.com/unphased\n   */\n\n\n  normalizeFast() {\n    const f = (3.0 - (this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w)) / 2.0;\n\n    if (f === 0) {\n      this.x = 0;\n      this.y = 0;\n      this.z = 0;\n      this.w = 0;\n    } else {\n      this.x *= f;\n      this.y *= f;\n      this.z *= f;\n      this.w *= f;\n    }\n\n    return this;\n  }\n  /**\n   * Multiply the quaternion by a vector\n   */\n\n\n  vmult(v, target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n\n    const x = v.x;\n    const y = v.y;\n    const z = v.z;\n    const qx = this.x;\n    const qy = this.y;\n    const qz = this.z;\n    const qw = this.w; // q*v\n\n    const ix = qw * x + qy * z - qz * y;\n    const iy = qw * y + qz * x - qx * z;\n    const iz = qw * z + qx * y - qy * x;\n    const iw = -qx * x - qy * y - qz * z;\n    target.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    target.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    target.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n    return target;\n  }\n  /**\n   * Copies value of source to this quaternion.\n   * @return this\n   */\n\n\n  copy(quat) {\n    this.x = quat.x;\n    this.y = quat.y;\n    this.z = quat.z;\n    this.w = quat.w;\n    return this;\n  }\n  /**\n   * Convert the quaternion to euler angle representation. Order: YZX, as this page describes: https://www.euclideanspace.com/maths/standards/index.htm\n   * @param order Three-character string, defaults to \"YZX\"\n   */\n\n\n  toEuler(target, order) {\n    if (order === void 0) {\n      order = 'YZX';\n    }\n\n    let heading;\n    let attitude;\n    let bank;\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    const w = this.w;\n\n    switch (order) {\n      case 'YZX':\n        const test = x * y + z * w;\n\n        if (test > 0.499) {\n          // singularity at north pole\n          heading = 2 * Math.atan2(x, w);\n          attitude = Math.PI / 2;\n          bank = 0;\n        }\n\n        if (test < -0.499) {\n          // singularity at south pole\n          heading = -2 * Math.atan2(x, w);\n          attitude = -Math.PI / 2;\n          bank = 0;\n        }\n\n        if (heading === undefined) {\n          const sqx = x * x;\n          const sqy = y * y;\n          const sqz = z * z;\n          heading = Math.atan2(2 * y * w - 2 * x * z, 1 - 2 * sqy - 2 * sqz); // Heading\n\n          attitude = Math.asin(2 * test); // attitude\n\n          bank = Math.atan2(2 * x * w - 2 * y * z, 1 - 2 * sqx - 2 * sqz); // bank\n        }\n\n        break;\n\n      default:\n        throw new Error(`Euler order ${order} not supported yet.`);\n    }\n\n    target.y = heading;\n    target.z = attitude;\n    target.x = bank;\n  }\n  /**\n   * Set the quaternion components given Euler angle representation.\n   *\n   * @param order The order to apply angles: 'XYZ' or 'YXZ' or any other combination.\n   *\n   * See {@link https://www.mathworks.com/matlabcentral/fileexchange/20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors MathWorks} reference\n   */\n\n\n  setFromEuler(x, y, z, order) {\n    if (order === void 0) {\n      order = 'XYZ';\n    }\n\n    const c1 = Math.cos(x / 2);\n    const c2 = Math.cos(y / 2);\n    const c3 = Math.cos(z / 2);\n    const s1 = Math.sin(x / 2);\n    const s2 = Math.sin(y / 2);\n    const s3 = Math.sin(z / 2);\n\n    if (order === 'XYZ') {\n      this.x = s1 * c2 * c3 + c1 * s2 * s3;\n      this.y = c1 * s2 * c3 - s1 * c2 * s3;\n      this.z = c1 * c2 * s3 + s1 * s2 * c3;\n      this.w = c1 * c2 * c3 - s1 * s2 * s3;\n    } else if (order === 'YXZ') {\n      this.x = s1 * c2 * c3 + c1 * s2 * s3;\n      this.y = c1 * s2 * c3 - s1 * c2 * s3;\n      this.z = c1 * c2 * s3 - s1 * s2 * c3;\n      this.w = c1 * c2 * c3 + s1 * s2 * s3;\n    } else if (order === 'ZXY') {\n      this.x = s1 * c2 * c3 - c1 * s2 * s3;\n      this.y = c1 * s2 * c3 + s1 * c2 * s3;\n      this.z = c1 * c2 * s3 + s1 * s2 * c3;\n      this.w = c1 * c2 * c3 - s1 * s2 * s3;\n    } else if (order === 'ZYX') {\n      this.x = s1 * c2 * c3 - c1 * s2 * s3;\n      this.y = c1 * s2 * c3 + s1 * c2 * s3;\n      this.z = c1 * c2 * s3 - s1 * s2 * c3;\n      this.w = c1 * c2 * c3 + s1 * s2 * s3;\n    } else if (order === 'YZX') {\n      this.x = s1 * c2 * c3 + c1 * s2 * s3;\n      this.y = c1 * s2 * c3 + s1 * c2 * s3;\n      this.z = c1 * c2 * s3 - s1 * s2 * c3;\n      this.w = c1 * c2 * c3 - s1 * s2 * s3;\n    } else if (order === 'XZY') {\n      this.x = s1 * c2 * c3 - c1 * s2 * s3;\n      this.y = c1 * s2 * c3 - s1 * c2 * s3;\n      this.z = c1 * c2 * s3 + s1 * s2 * c3;\n      this.w = c1 * c2 * c3 + s1 * s2 * s3;\n    }\n\n    return this;\n  }\n\n  clone() {\n    return new Quaternion(this.x, this.y, this.z, this.w);\n  }\n  /**\n   * Performs a spherical linear interpolation between two quat\n   *\n   * @param toQuat second operand\n   * @param t interpolation amount between the self quaternion and toQuat\n   * @param target A quaternion to store the result in. If not provided, a new one will be created.\n   * @returns {Quaternion} The \"target\" object\n   */\n\n\n  slerp(toQuat, t, target) {\n    if (target === void 0) {\n      target = new Quaternion();\n    }\n\n    const ax = this.x;\n    const ay = this.y;\n    const az = this.z;\n    const aw = this.w;\n    let bx = toQuat.x;\n    let by = toQuat.y;\n    let bz = toQuat.z;\n    let bw = toQuat.w;\n    let omega;\n    let cosom;\n    let sinom;\n    let scale0;\n    let scale1; // calc cosine\n\n    cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n    if (cosom < 0.0) {\n      cosom = -cosom;\n      bx = -bx;\n      by = -by;\n      bz = -bz;\n      bw = -bw;\n    } // calculate coefficients\n\n\n    if (1.0 - cosom > 0.000001) {\n      // standard case (slerp)\n      omega = Math.acos(cosom);\n      sinom = Math.sin(omega);\n      scale0 = Math.sin((1.0 - t) * omega) / sinom;\n      scale1 = Math.sin(t * omega) / sinom;\n    } else {\n      // \"from\" and \"to\" quaternions are very close\n      //  ... so we can do a linear interpolation\n      scale0 = 1.0 - t;\n      scale1 = t;\n    } // calculate final values\n\n\n    target.x = scale0 * ax + scale1 * bx;\n    target.y = scale0 * ay + scale1 * by;\n    target.z = scale0 * az + scale1 * bz;\n    target.w = scale0 * aw + scale1 * bw;\n    return target;\n  }\n  /**\n   * Rotate an absolute orientation quaternion given an angular velocity and a time step.\n   */\n\n\n  integrate(angularVelocity, dt, angularFactor, target) {\n    if (target === void 0) {\n      target = new Quaternion();\n    }\n\n    const ax = angularVelocity.x * angularFactor.x,\n          ay = angularVelocity.y * angularFactor.y,\n          az = angularVelocity.z * angularFactor.z,\n          bx = this.x,\n          by = this.y,\n          bz = this.z,\n          bw = this.w;\n    const half_dt = dt * 0.5;\n    target.x += half_dt * (ax * bw + ay * bz - az * by);\n    target.y += half_dt * (ay * bw + az * bx - ax * bz);\n    target.z += half_dt * (az * bw + ax * by - ay * bx);\n    target.w += half_dt * (-ax * bx - ay * by - az * bz);\n    return target;\n  }\n\n}\nconst sfv_t1 = new Vec3();\nconst sfv_t2 = new Vec3();\n\n/**\n * The available shape types.\n */\nconst SHAPE_TYPES = {\n  /** SPHERE */\n  SPHERE: 1,\n\n  /** PLANE */\n  PLANE: 2,\n\n  /** BOX */\n  BOX: 4,\n\n  /** COMPOUND */\n  COMPOUND: 8,\n\n  /** CONVEXPOLYHEDRON */\n  CONVEXPOLYHEDRON: 16,\n\n  /** HEIGHTFIELD */\n  HEIGHTFIELD: 32,\n\n  /** PARTICLE */\n  PARTICLE: 64,\n\n  /** CYLINDER */\n  CYLINDER: 128,\n\n  /** TRIMESH */\n  TRIMESH: 256\n};\n/**\n * ShapeType\n */\n\n/**\n * Base class for shapes\n */\nclass Shape {\n  /**\n   * Identifier of the Shape.\n   */\n\n  /**\n   * The type of this shape. Must be set to an int > 0 by subclasses.\n   */\n\n  /**\n   * The local bounding sphere radius of this shape.\n   */\n\n  /**\n   * Whether to produce contact forces when in contact with other bodies. Note that contacts will be generated, but they will be disabled.\n   * @default true\n   */\n\n  /**\n   * @default 1\n   */\n\n  /**\n   * @default -1\n   */\n\n  /**\n   * Optional material of the shape that regulates contact properties.\n   */\n\n  /**\n   * The body to which the shape is added to.\n   */\n\n  /**\n   * All the Shape types.\n   */\n  constructor(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.id = Shape.idCounter++;\n    this.type = options.type || 0;\n    this.boundingSphereRadius = 0;\n    this.collisionResponse = options.collisionResponse ? options.collisionResponse : true;\n    this.collisionFilterGroup = options.collisionFilterGroup !== undefined ? options.collisionFilterGroup : 1;\n    this.collisionFilterMask = options.collisionFilterMask !== undefined ? options.collisionFilterMask : -1;\n    this.material = options.material ? options.material : null;\n    this.body = null;\n  }\n  /**\n   * Computes the bounding sphere radius.\n   * The result is stored in the property `.boundingSphereRadius`\n   */\n\n\n  updateBoundingSphereRadius() {\n    throw `computeBoundingSphereRadius() not implemented for shape type ${this.type}`;\n  }\n  /**\n   * Get the volume of this shape\n   */\n\n\n  volume() {\n    throw `volume() not implemented for shape type ${this.type}`;\n  }\n  /**\n   * Calculates the inertia in the local frame for this shape.\n   * @see http://en.wikipedia.org/wiki/List_of_moments_of_inertia\n   */\n\n\n  calculateLocalInertia(mass, target) {\n    throw `calculateLocalInertia() not implemented for shape type ${this.type}`;\n  }\n  /**\n   * @todo use abstract for these kind of methods\n   */\n\n\n  calculateWorldAABB(pos, quat, min, max) {\n    throw `calculateWorldAABB() not implemented for shape type ${this.type}`;\n  }\n\n}\nShape.idCounter = 0;\nShape.types = SHAPE_TYPES;\n\n/**\n * Transformation utilities.\n */\nclass Transform {\n  /**\n   * position\n   */\n\n  /**\n   * quaternion\n   */\n  constructor(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.position = new Vec3();\n    this.quaternion = new Quaternion();\n\n    if (options.position) {\n      this.position.copy(options.position);\n    }\n\n    if (options.quaternion) {\n      this.quaternion.copy(options.quaternion);\n    }\n  }\n  /**\n   * Get a global point in local transform coordinates.\n   */\n\n\n  pointToLocal(worldPoint, result) {\n    return Transform.pointToLocalFrame(this.position, this.quaternion, worldPoint, result);\n  }\n  /**\n   * Get a local point in global transform coordinates.\n   */\n\n\n  pointToWorld(localPoint, result) {\n    return Transform.pointToWorldFrame(this.position, this.quaternion, localPoint, result);\n  }\n  /**\n   * vectorToWorldFrame\n   */\n\n\n  vectorToWorldFrame(localVector, result) {\n    if (result === void 0) {\n      result = new Vec3();\n    }\n\n    this.quaternion.vmult(localVector, result);\n    return result;\n  }\n  /**\n   * pointToLocalFrame\n   */\n\n\n  static pointToLocalFrame(position, quaternion, worldPoint, result) {\n    if (result === void 0) {\n      result = new Vec3();\n    }\n\n    worldPoint.vsub(position, result);\n    quaternion.conjugate(tmpQuat$1);\n    tmpQuat$1.vmult(result, result);\n    return result;\n  }\n  /**\n   * pointToWorldFrame\n   */\n\n\n  static pointToWorldFrame(position, quaternion, localPoint, result) {\n    if (result === void 0) {\n      result = new Vec3();\n    }\n\n    quaternion.vmult(localPoint, result);\n    result.vadd(position, result);\n    return result;\n  }\n  /**\n   * vectorToWorldFrame\n   */\n\n\n  static vectorToWorldFrame(quaternion, localVector, result) {\n    if (result === void 0) {\n      result = new Vec3();\n    }\n\n    quaternion.vmult(localVector, result);\n    return result;\n  }\n  /**\n   * vectorToLocalFrame\n   */\n\n\n  static vectorToLocalFrame(position, quaternion, worldVector, result) {\n    if (result === void 0) {\n      result = new Vec3();\n    }\n\n    quaternion.w *= -1;\n    quaternion.vmult(worldVector, result);\n    quaternion.w *= -1;\n    return result;\n  }\n\n}\nconst tmpQuat$1 = new Quaternion();\n\n/**\n * A set of polygons describing a convex shape.\n *\n * The shape MUST be convex for the code to work properly. No polygons may be coplanar (contained\n * in the same 3D plane), instead these should be merged into one polygon.\n *\n * @author qiao / https://github.com/qiao (original author, see https://github.com/qiao/three.js/commit/85026f0c769e4000148a67d45a9e9b9c5108836f)\n * @author schteppe / https://github.com/schteppe\n * @see https://www.altdevblogaday.com/2011/05/13/contact-generation-between-3d-convex-meshes/\n *\n * @todo Move the clipping functions to ContactGenerator?\n * @todo Automatically merge coplanar polygons in constructor.\n * @example\n *     const convexShape = new CANNON.ConvexPolyhedron({ vertices, faces })\n *     const convexBody = new CANNON.Body({ mass: 1, shape: convexShape })\n *     world.addBody(convexBody)\n */\nclass ConvexPolyhedron extends Shape {\n  /** vertices */\n\n  /**\n   * Array of integer arrays, indicating which vertices each face consists of\n   */\n\n  /** faceNormals */\n\n  /** worldVertices */\n\n  /** worldVerticesNeedsUpdate */\n\n  /** worldFaceNormals */\n\n  /** worldFaceNormalsNeedsUpdate */\n\n  /**\n   * If given, these locally defined, normalized axes are the only ones being checked when doing separating axis check.\n   */\n\n  /** uniqueEdges */\n\n  /**\n   * @param vertices An array of Vec3's\n   * @param faces Array of integer arrays, describing which vertices that is included in each face.\n   */\n  constructor(props) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    const {\n      vertices = [],\n      faces = [],\n      normals = [],\n      axes,\n      boundingSphereRadius\n    } = props;\n    super({\n      type: Shape.types.CONVEXPOLYHEDRON\n    });\n    this.vertices = vertices;\n    this.faces = faces;\n    this.faceNormals = normals;\n\n    if (this.faceNormals.length === 0) {\n      this.computeNormals();\n    }\n\n    if (!boundingSphereRadius) {\n      this.updateBoundingSphereRadius();\n    } else {\n      this.boundingSphereRadius = boundingSphereRadius;\n    }\n\n    this.worldVertices = []; // World transformed version of .vertices\n\n    this.worldVerticesNeedsUpdate = true;\n    this.worldFaceNormals = []; // World transformed version of .faceNormals\n\n    this.worldFaceNormalsNeedsUpdate = true;\n    this.uniqueAxes = axes ? axes.slice() : null;\n    this.uniqueEdges = [];\n    this.computeEdges();\n  }\n  /**\n   * Computes uniqueEdges\n   */\n\n\n  computeEdges() {\n    const faces = this.faces;\n    const vertices = this.vertices;\n    const edges = this.uniqueEdges;\n    edges.length = 0;\n    const edge = new Vec3();\n\n    for (let i = 0; i !== faces.length; i++) {\n      const face = faces[i];\n      const numVertices = face.length;\n\n      for (let j = 0; j !== numVertices; j++) {\n        const k = (j + 1) % numVertices;\n        vertices[face[j]].vsub(vertices[face[k]], edge);\n        edge.normalize();\n        let found = false;\n\n        for (let p = 0; p !== edges.length; p++) {\n          if (edges[p].almostEquals(edge) || edges[p].almostEquals(edge)) {\n            found = true;\n            break;\n          }\n        }\n\n        if (!found) {\n          edges.push(edge.clone());\n        }\n      }\n    }\n  }\n  /**\n   * Compute the normals of the faces.\n   * Will reuse existing Vec3 objects in the `faceNormals` array if they exist.\n   */\n\n\n  computeNormals() {\n    this.faceNormals.length = this.faces.length; // Generate normals\n\n    for (let i = 0; i < this.faces.length; i++) {\n      // Check so all vertices exists for this face\n      for (let j = 0; j < this.faces[i].length; j++) {\n        if (!this.vertices[this.faces[i][j]]) {\n          throw new Error(`Vertex ${this.faces[i][j]} not found!`);\n        }\n      }\n\n      const n = this.faceNormals[i] || new Vec3();\n      this.getFaceNormal(i, n);\n      n.negate(n);\n      this.faceNormals[i] = n;\n      const vertex = this.vertices[this.faces[i][0]];\n\n      if (n.dot(vertex) < 0) {\n        console.error(`.faceNormals[${i}] = Vec3(${n.toString()}) looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.`);\n\n        for (let j = 0; j < this.faces[i].length; j++) {\n          console.warn(`.vertices[${this.faces[i][j]}] = Vec3(${this.vertices[this.faces[i][j]].toString()})`);\n        }\n      }\n    }\n  }\n  /**\n   * Compute the normal of a face from its vertices\n   */\n\n\n  getFaceNormal(i, target) {\n    const f = this.faces[i];\n    const va = this.vertices[f[0]];\n    const vb = this.vertices[f[1]];\n    const vc = this.vertices[f[2]];\n    ConvexPolyhedron.computeNormal(va, vb, vc, target);\n  }\n  /**\n   * Get face normal given 3 vertices\n   */\n\n\n  static computeNormal(va, vb, vc, target) {\n    const cb = new Vec3();\n    const ab = new Vec3();\n    vb.vsub(va, ab);\n    vc.vsub(vb, cb);\n    cb.cross(ab, target);\n\n    if (!target.isZero()) {\n      target.normalize();\n    }\n  }\n  /**\n   * @param minDist Clamp distance\n   * @param result The an array of contact point objects, see clipFaceAgainstHull\n   */\n\n\n  clipAgainstHull(posA, quatA, hullB, posB, quatB, separatingNormal, minDist, maxDist, result) {\n    const WorldNormal = new Vec3();\n    let closestFaceB = -1;\n    let dmax = -Number.MAX_VALUE;\n\n    for (let face = 0; face < hullB.faces.length; face++) {\n      WorldNormal.copy(hullB.faceNormals[face]);\n      quatB.vmult(WorldNormal, WorldNormal);\n      const d = WorldNormal.dot(separatingNormal);\n\n      if (d > dmax) {\n        dmax = d;\n        closestFaceB = face;\n      }\n    }\n\n    const worldVertsB1 = [];\n\n    for (let i = 0; i < hullB.faces[closestFaceB].length; i++) {\n      const b = hullB.vertices[hullB.faces[closestFaceB][i]];\n      const worldb = new Vec3();\n      worldb.copy(b);\n      quatB.vmult(worldb, worldb);\n      posB.vadd(worldb, worldb);\n      worldVertsB1.push(worldb);\n    }\n\n    if (closestFaceB >= 0) {\n      this.clipFaceAgainstHull(separatingNormal, posA, quatA, worldVertsB1, minDist, maxDist, result);\n    }\n  }\n  /**\n   * Find the separating axis between this hull and another\n   * @param target The target vector to save the axis in\n   * @return Returns false if a separation is found, else true\n   */\n\n\n  findSeparatingAxis(hullB, posA, quatA, posB, quatB, target, faceListA, faceListB) {\n    const faceANormalWS3 = new Vec3();\n    const Worldnormal1 = new Vec3();\n    const deltaC = new Vec3();\n    const worldEdge0 = new Vec3();\n    const worldEdge1 = new Vec3();\n    const Cross = new Vec3();\n    let dmin = Number.MAX_VALUE;\n    const hullA = this;\n\n    if (!hullA.uniqueAxes) {\n      const numFacesA = faceListA ? faceListA.length : hullA.faces.length; // Test face normals from hullA\n\n      for (let i = 0; i < numFacesA; i++) {\n        const fi = faceListA ? faceListA[i] : i; // Get world face normal\n\n        faceANormalWS3.copy(hullA.faceNormals[fi]);\n        quatA.vmult(faceANormalWS3, faceANormalWS3);\n        const d = hullA.testSepAxis(faceANormalWS3, hullB, posA, quatA, posB, quatB);\n\n        if (d === false) {\n          return false;\n        }\n\n        if (d < dmin) {\n          dmin = d;\n          target.copy(faceANormalWS3);\n        }\n      }\n    } else {\n      // Test unique axes\n      for (let i = 0; i !== hullA.uniqueAxes.length; i++) {\n        // Get world axis\n        quatA.vmult(hullA.uniqueAxes[i], faceANormalWS3);\n        const d = hullA.testSepAxis(faceANormalWS3, hullB, posA, quatA, posB, quatB);\n\n        if (d === false) {\n          return false;\n        }\n\n        if (d < dmin) {\n          dmin = d;\n          target.copy(faceANormalWS3);\n        }\n      }\n    }\n\n    if (!hullB.uniqueAxes) {\n      // Test face normals from hullB\n      const numFacesB = faceListB ? faceListB.length : hullB.faces.length;\n\n      for (let i = 0; i < numFacesB; i++) {\n        const fi = faceListB ? faceListB[i] : i;\n        Worldnormal1.copy(hullB.faceNormals[fi]);\n        quatB.vmult(Worldnormal1, Worldnormal1);\n        const d = hullA.testSepAxis(Worldnormal1, hullB, posA, quatA, posB, quatB);\n\n        if (d === false) {\n          return false;\n        }\n\n        if (d < dmin) {\n          dmin = d;\n          target.copy(Worldnormal1);\n        }\n      }\n    } else {\n      // Test unique axes in B\n      for (let i = 0; i !== hullB.uniqueAxes.length; i++) {\n        quatB.vmult(hullB.uniqueAxes[i], Worldnormal1);\n        const d = hullA.testSepAxis(Worldnormal1, hullB, posA, quatA, posB, quatB);\n\n        if (d === false) {\n          return false;\n        }\n\n        if (d < dmin) {\n          dmin = d;\n          target.copy(Worldnormal1);\n        }\n      }\n    } // Test edges\n\n\n    for (let e0 = 0; e0 !== hullA.uniqueEdges.length; e0++) {\n      // Get world edge\n      quatA.vmult(hullA.uniqueEdges[e0], worldEdge0);\n\n      for (let e1 = 0; e1 !== hullB.uniqueEdges.length; e1++) {\n        // Get world edge 2\n        quatB.vmult(hullB.uniqueEdges[e1], worldEdge1);\n        worldEdge0.cross(worldEdge1, Cross);\n\n        if (!Cross.almostZero()) {\n          Cross.normalize();\n          const dist = hullA.testSepAxis(Cross, hullB, posA, quatA, posB, quatB);\n\n          if (dist === false) {\n            return false;\n          }\n\n          if (dist < dmin) {\n            dmin = dist;\n            target.copy(Cross);\n          }\n        }\n      }\n    }\n\n    posB.vsub(posA, deltaC);\n\n    if (deltaC.dot(target) > 0.0) {\n      target.negate(target);\n    }\n\n    return true;\n  }\n  /**\n   * Test separating axis against two hulls. Both hulls are projected onto the axis and the overlap size is returned if there is one.\n   * @return The overlap depth, or FALSE if no penetration.\n   */\n\n\n  testSepAxis(axis, hullB, posA, quatA, posB, quatB) {\n    const hullA = this;\n    ConvexPolyhedron.project(hullA, axis, posA, quatA, maxminA);\n    ConvexPolyhedron.project(hullB, axis, posB, quatB, maxminB);\n    const maxA = maxminA[0];\n    const minA = maxminA[1];\n    const maxB = maxminB[0];\n    const minB = maxminB[1];\n\n    if (maxA < minB || maxB < minA) {\n      return false; // Separated\n    }\n\n    const d0 = maxA - minB;\n    const d1 = maxB - minA;\n    const depth = d0 < d1 ? d0 : d1;\n    return depth;\n  }\n  /**\n   * calculateLocalInertia\n   */\n\n\n  calculateLocalInertia(mass, target) {\n    // Approximate with box inertia\n    // Exact inertia calculation is overkill, but see http://geometrictools.com/Documentation/PolyhedralMassProperties.pdf for the correct way to do it\n    const aabbmax = new Vec3();\n    const aabbmin = new Vec3();\n    this.computeLocalAABB(aabbmin, aabbmax);\n    const x = aabbmax.x - aabbmin.x;\n    const y = aabbmax.y - aabbmin.y;\n    const z = aabbmax.z - aabbmin.z;\n    target.x = 1.0 / 12.0 * mass * (2 * y * 2 * y + 2 * z * 2 * z);\n    target.y = 1.0 / 12.0 * mass * (2 * x * 2 * x + 2 * z * 2 * z);\n    target.z = 1.0 / 12.0 * mass * (2 * y * 2 * y + 2 * x * 2 * x);\n  }\n  /**\n   * @param face_i Index of the face\n   */\n\n\n  getPlaneConstantOfFace(face_i) {\n    const f = this.faces[face_i];\n    const n = this.faceNormals[face_i];\n    const v = this.vertices[f[0]];\n    const c = -n.dot(v);\n    return c;\n  }\n  /**\n   * Clip a face against a hull.\n   * @param worldVertsB1 An array of Vec3 with vertices in the world frame.\n   * @param minDist Distance clamping\n   * @param Array result Array to store resulting contact points in. Will be objects with properties: point, depth, normal. These are represented in world coordinates.\n   */\n\n\n  clipFaceAgainstHull(separatingNormal, posA, quatA, worldVertsB1, minDist, maxDist, result) {\n    const faceANormalWS = new Vec3();\n    const edge0 = new Vec3();\n    const WorldEdge0 = new Vec3();\n    const worldPlaneAnormal1 = new Vec3();\n    const planeNormalWS1 = new Vec3();\n    const worldA1 = new Vec3();\n    const localPlaneNormal = new Vec3();\n    const planeNormalWS = new Vec3();\n    const hullA = this;\n    const worldVertsB2 = [];\n    const pVtxIn = worldVertsB1;\n    const pVtxOut = worldVertsB2;\n    let closestFaceA = -1;\n    let dmin = Number.MAX_VALUE; // Find the face with normal closest to the separating axis\n\n    for (let face = 0; face < hullA.faces.length; face++) {\n      faceANormalWS.copy(hullA.faceNormals[face]);\n      quatA.vmult(faceANormalWS, faceANormalWS);\n      const d = faceANormalWS.dot(separatingNormal);\n\n      if (d < dmin) {\n        dmin = d;\n        closestFaceA = face;\n      }\n    }\n\n    if (closestFaceA < 0) {\n      return;\n    } // Get the face and construct connected faces\n\n\n    const polyA = hullA.faces[closestFaceA];\n    polyA.connectedFaces = [];\n\n    for (let i = 0; i < hullA.faces.length; i++) {\n      for (let j = 0; j < hullA.faces[i].length; j++) {\n        if (\n        /* Sharing a vertex*/\n        polyA.indexOf(hullA.faces[i][j]) !== -1 &&\n        /* Not the one we are looking for connections from */\n        i !== closestFaceA &&\n        /* Not already added */\n        polyA.connectedFaces.indexOf(i) === -1) {\n          polyA.connectedFaces.push(i);\n        }\n      }\n    } // Clip the polygon to the back of the planes of all faces of hull A,\n    // that are adjacent to the witness face\n\n\n    const numVerticesA = polyA.length;\n\n    for (let i = 0; i < numVerticesA; i++) {\n      const a = hullA.vertices[polyA[i]];\n      const b = hullA.vertices[polyA[(i + 1) % numVerticesA]];\n      a.vsub(b, edge0);\n      WorldEdge0.copy(edge0);\n      quatA.vmult(WorldEdge0, WorldEdge0);\n      posA.vadd(WorldEdge0, WorldEdge0);\n      worldPlaneAnormal1.copy(this.faceNormals[closestFaceA]);\n      quatA.vmult(worldPlaneAnormal1, worldPlaneAnormal1);\n      posA.vadd(worldPlaneAnormal1, worldPlaneAnormal1);\n      WorldEdge0.cross(worldPlaneAnormal1, planeNormalWS1);\n      planeNormalWS1.negate(planeNormalWS1);\n      worldA1.copy(a);\n      quatA.vmult(worldA1, worldA1);\n      posA.vadd(worldA1, worldA1);\n      const otherFace = polyA.connectedFaces[i];\n      localPlaneNormal.copy(this.faceNormals[otherFace]);\n      const localPlaneEq = this.getPlaneConstantOfFace(otherFace);\n      planeNormalWS.copy(localPlaneNormal);\n      quatA.vmult(planeNormalWS, planeNormalWS);\n      const planeEqWS = localPlaneEq - planeNormalWS.dot(posA); // Clip face against our constructed plane\n\n      this.clipFaceAgainstPlane(pVtxIn, pVtxOut, planeNormalWS, planeEqWS); // Throw away all clipped points, but save the remaining until next clip\n\n      while (pVtxIn.length) {\n        pVtxIn.shift();\n      }\n\n      while (pVtxOut.length) {\n        pVtxIn.push(pVtxOut.shift());\n      }\n    } // only keep contact points that are behind the witness face\n\n\n    localPlaneNormal.copy(this.faceNormals[closestFaceA]);\n    const localPlaneEq = this.getPlaneConstantOfFace(closestFaceA);\n    planeNormalWS.copy(localPlaneNormal);\n    quatA.vmult(planeNormalWS, planeNormalWS);\n    const planeEqWS = localPlaneEq - planeNormalWS.dot(posA);\n\n    for (let i = 0; i < pVtxIn.length; i++) {\n      let depth = planeNormalWS.dot(pVtxIn[i]) + planeEqWS; // ???\n\n      if (depth <= minDist) {\n        console.log(`clamped: depth=${depth} to minDist=${minDist}`);\n        depth = minDist;\n      }\n\n      if (depth <= maxDist) {\n        const point = pVtxIn[i];\n\n        if (depth <= 1e-6) {\n          const p = {\n            point,\n            normal: planeNormalWS,\n            depth\n          };\n          result.push(p);\n        }\n      }\n    }\n  }\n  /**\n   * Clip a face in a hull against the back of a plane.\n   * @param planeConstant The constant in the mathematical plane equation\n   */\n\n\n  clipFaceAgainstPlane(inVertices, outVertices, planeNormal, planeConstant) {\n    let n_dot_first;\n    let n_dot_last;\n    const numVerts = inVertices.length;\n\n    if (numVerts < 2) {\n      return outVertices;\n    }\n\n    let firstVertex = inVertices[inVertices.length - 1];\n    let lastVertex = inVertices[0];\n    n_dot_first = planeNormal.dot(firstVertex) + planeConstant;\n\n    for (let vi = 0; vi < numVerts; vi++) {\n      lastVertex = inVertices[vi];\n      n_dot_last = planeNormal.dot(lastVertex) + planeConstant;\n\n      if (n_dot_first < 0) {\n        if (n_dot_last < 0) {\n          // Start < 0, end < 0, so output lastVertex\n          const newv = new Vec3();\n          newv.copy(lastVertex);\n          outVertices.push(newv);\n        } else {\n          // Start < 0, end >= 0, so output intersection\n          const newv = new Vec3();\n          firstVertex.lerp(lastVertex, n_dot_first / (n_dot_first - n_dot_last), newv);\n          outVertices.push(newv);\n        }\n      } else {\n        if (n_dot_last < 0) {\n          // Start >= 0, end < 0 so output intersection and end\n          const newv = new Vec3();\n          firstVertex.lerp(lastVertex, n_dot_first / (n_dot_first - n_dot_last), newv);\n          outVertices.push(newv);\n          outVertices.push(lastVertex);\n        }\n      }\n\n      firstVertex = lastVertex;\n      n_dot_first = n_dot_last;\n    }\n\n    return outVertices;\n  }\n  /**\n   * Updates `.worldVertices` and sets `.worldVerticesNeedsUpdate` to false.\n   */\n\n\n  computeWorldVertices(position, quat) {\n    while (this.worldVertices.length < this.vertices.length) {\n      this.worldVertices.push(new Vec3());\n    }\n\n    const verts = this.vertices;\n    const worldVerts = this.worldVertices;\n\n    for (let i = 0; i !== this.vertices.length; i++) {\n      quat.vmult(verts[i], worldVerts[i]);\n      position.vadd(worldVerts[i], worldVerts[i]);\n    }\n\n    this.worldVerticesNeedsUpdate = false;\n  }\n\n  computeLocalAABB(aabbmin, aabbmax) {\n    const vertices = this.vertices;\n    aabbmin.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n    aabbmax.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n\n    for (let i = 0; i < this.vertices.length; i++) {\n      const v = vertices[i];\n\n      if (v.x < aabbmin.x) {\n        aabbmin.x = v.x;\n      } else if (v.x > aabbmax.x) {\n        aabbmax.x = v.x;\n      }\n\n      if (v.y < aabbmin.y) {\n        aabbmin.y = v.y;\n      } else if (v.y > aabbmax.y) {\n        aabbmax.y = v.y;\n      }\n\n      if (v.z < aabbmin.z) {\n        aabbmin.z = v.z;\n      } else if (v.z > aabbmax.z) {\n        aabbmax.z = v.z;\n      }\n    }\n  }\n  /**\n   * Updates `worldVertices` and sets `worldVerticesNeedsUpdate` to false.\n   */\n\n\n  computeWorldFaceNormals(quat) {\n    const N = this.faceNormals.length;\n\n    while (this.worldFaceNormals.length < N) {\n      this.worldFaceNormals.push(new Vec3());\n    }\n\n    const normals = this.faceNormals;\n    const worldNormals = this.worldFaceNormals;\n\n    for (let i = 0; i !== N; i++) {\n      quat.vmult(normals[i], worldNormals[i]);\n    }\n\n    this.worldFaceNormalsNeedsUpdate = false;\n  }\n  /**\n   * updateBoundingSphereRadius\n   */\n\n\n  updateBoundingSphereRadius() {\n    // Assume points are distributed with local (0,0,0) as center\n    let max2 = 0;\n    const verts = this.vertices;\n\n    for (let i = 0; i !== verts.length; i++) {\n      const norm2 = verts[i].lengthSquared();\n\n      if (norm2 > max2) {\n        max2 = norm2;\n      }\n    }\n\n    this.boundingSphereRadius = Math.sqrt(max2);\n  }\n  /**\n   * calculateWorldAABB\n   */\n\n\n  calculateWorldAABB(pos, quat, min, max) {\n    const verts = this.vertices;\n    let minx;\n    let miny;\n    let minz;\n    let maxx;\n    let maxy;\n    let maxz;\n    let tempWorldVertex = new Vec3();\n\n    for (let i = 0; i < verts.length; i++) {\n      tempWorldVertex.copy(verts[i]);\n      quat.vmult(tempWorldVertex, tempWorldVertex);\n      pos.vadd(tempWorldVertex, tempWorldVertex);\n      const v = tempWorldVertex;\n\n      if (minx === undefined || v.x < minx) {\n        minx = v.x;\n      }\n\n      if (maxx === undefined || v.x > maxx) {\n        maxx = v.x;\n      }\n\n      if (miny === undefined || v.y < miny) {\n        miny = v.y;\n      }\n\n      if (maxy === undefined || v.y > maxy) {\n        maxy = v.y;\n      }\n\n      if (minz === undefined || v.z < minz) {\n        minz = v.z;\n      }\n\n      if (maxz === undefined || v.z > maxz) {\n        maxz = v.z;\n      }\n    }\n\n    min.set(minx, miny, minz);\n    max.set(maxx, maxy, maxz);\n  }\n  /**\n   * Get approximate convex volume\n   */\n\n\n  volume() {\n    return 4.0 * Math.PI * this.boundingSphereRadius / 3.0;\n  }\n  /**\n   * Get an average of all the vertices positions\n   */\n\n\n  getAveragePointLocal(target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n\n    const verts = this.vertices;\n\n    for (let i = 0; i < verts.length; i++) {\n      target.vadd(verts[i], target);\n    }\n\n    target.scale(1 / verts.length, target);\n    return target;\n  }\n  /**\n   * Transform all local points. Will change the .vertices\n   */\n\n\n  transformAllPoints(offset, quat) {\n    const n = this.vertices.length;\n    const verts = this.vertices; // Apply rotation\n\n    if (quat) {\n      // Rotate vertices\n      for (let i = 0; i < n; i++) {\n        const v = verts[i];\n        quat.vmult(v, v);\n      } // Rotate face normals\n\n\n      for (let i = 0; i < this.faceNormals.length; i++) {\n        const v = this.faceNormals[i];\n        quat.vmult(v, v);\n      }\n      /*\n            // Rotate edges\n            for(let i=0; i<this.uniqueEdges.length; i++){\n                const v = this.uniqueEdges[i];\n                quat.vmult(v,v);\n            }*/\n\n    } // Apply offset\n\n\n    if (offset) {\n      for (let i = 0; i < n; i++) {\n        const v = verts[i];\n        v.vadd(offset, v);\n      }\n    }\n  }\n  /**\n   * Checks whether p is inside the polyhedra. Must be in local coords.\n   * The point lies outside of the convex hull of the other points if and only if the direction\n   * of all the vectors from it to those other points are on less than one half of a sphere around it.\n   * @param p A point given in local coordinates\n   */\n\n\n  pointIsInside(p) {\n    const verts = this.vertices;\n    const faces = this.faces;\n    const normals = this.faceNormals;\n    const positiveResult = null;\n    const pointInside = new Vec3();\n    this.getAveragePointLocal(pointInside);\n\n    for (let i = 0; i < this.faces.length; i++) {\n      let n = normals[i];\n      const v = verts[faces[i][0]]; // We only need one point in the face\n      // This dot product determines which side of the edge the point is\n\n      const vToP = new Vec3();\n      p.vsub(v, vToP);\n      const r1 = n.dot(vToP);\n      const vToPointInside = new Vec3();\n      pointInside.vsub(v, vToPointInside);\n      const r2 = n.dot(vToPointInside);\n\n      if (r1 < 0 && r2 > 0 || r1 > 0 && r2 < 0) {\n        return false; // Encountered some other sign. Exit.\n      }\n    } // If we got here, all dot products were of the same sign.\n\n\n    return positiveResult ? 1 : -1;\n  }\n  /**\n   * Get max and min dot product of a convex hull at position (pos,quat) projected onto an axis.\n   * Results are saved in the array maxmin.\n   * @param result result[0] and result[1] will be set to maximum and minimum, respectively.\n   */\n\n\n  static project(shape, axis, pos, quat, result) {\n    const n = shape.vertices.length;\n    project_worldVertex;\n    const localAxis = project_localAxis;\n    let max = 0;\n    let min = 0;\n    const localOrigin = project_localOrigin;\n    const vs = shape.vertices;\n    localOrigin.setZero(); // Transform the axis to local\n\n    Transform.vectorToLocalFrame(pos, quat, axis, localAxis);\n    Transform.pointToLocalFrame(pos, quat, localOrigin, localOrigin);\n    const add = localOrigin.dot(localAxis);\n    min = max = vs[0].dot(localAxis);\n\n    for (let i = 1; i < n; i++) {\n      const val = vs[i].dot(localAxis);\n\n      if (val > max) {\n        max = val;\n      }\n\n      if (val < min) {\n        min = val;\n      }\n    }\n\n    min -= add;\n    max -= add;\n\n    if (min > max) {\n      // Inconsistent - swap\n      const temp = min;\n      min = max;\n      max = temp;\n    } // Output\n\n\n    result[0] = max;\n    result[1] = min;\n  }\n\n}\nconst maxminA = [];\nconst maxminB = [];\nconst project_worldVertex = new Vec3();\nconst project_localAxis = new Vec3();\nconst project_localOrigin = new Vec3();\n\n/**\n * A 3d box shape.\n * @example\n *     const size = 1\n *     const halfExtents = new CANNON.Vec3(size, size, size)\n *     const boxShape = new CANNON.Box(halfExtents)\n *     const boxBody = new CANNON.Body({ mass: 1, shape: boxShape })\n *     world.addBody(boxBody)\n */\nclass Box extends Shape {\n  /**\n   * The half extents of the box.\n   */\n\n  /**\n   * Used by the contact generator to make contacts with other convex polyhedra for example.\n   */\n  constructor(halfExtents) {\n    super({\n      type: Shape.types.BOX\n    });\n    this.halfExtents = halfExtents;\n    this.convexPolyhedronRepresentation = null;\n    this.updateConvexPolyhedronRepresentation();\n    this.updateBoundingSphereRadius();\n  }\n  /**\n   * Updates the local convex polyhedron representation used for some collisions.\n   */\n\n\n  updateConvexPolyhedronRepresentation() {\n    const sx = this.halfExtents.x;\n    const sy = this.halfExtents.y;\n    const sz = this.halfExtents.z;\n    const V = Vec3;\n    const vertices = [new V(-sx, -sy, -sz), new V(sx, -sy, -sz), new V(sx, sy, -sz), new V(-sx, sy, -sz), new V(-sx, -sy, sz), new V(sx, -sy, sz), new V(sx, sy, sz), new V(-sx, sy, sz)];\n    const faces = [[3, 2, 1, 0], // -z\n    [4, 5, 6, 7], // +z\n    [5, 4, 0, 1], // -y\n    [2, 3, 7, 6], // +y\n    [0, 4, 7, 3], // -x\n    [1, 2, 6, 5] // +x\n    ];\n    const axes = [new V(0, 0, 1), new V(0, 1, 0), new V(1, 0, 0)];\n    const h = new ConvexPolyhedron({\n      vertices,\n      faces,\n      axes\n    });\n    this.convexPolyhedronRepresentation = h;\n    h.material = this.material;\n  }\n  /**\n   * Calculate the inertia of the box.\n   */\n\n\n  calculateLocalInertia(mass, target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n\n    Box.calculateInertia(this.halfExtents, mass, target);\n    return target;\n  }\n\n  static calculateInertia(halfExtents, mass, target) {\n    const e = halfExtents;\n    target.x = 1.0 / 12.0 * mass * (2 * e.y * 2 * e.y + 2 * e.z * 2 * e.z);\n    target.y = 1.0 / 12.0 * mass * (2 * e.x * 2 * e.x + 2 * e.z * 2 * e.z);\n    target.z = 1.0 / 12.0 * mass * (2 * e.y * 2 * e.y + 2 * e.x * 2 * e.x);\n  }\n  /**\n   * Get the box 6 side normals\n   * @param sixTargetVectors An array of 6 vectors, to store the resulting side normals in.\n   * @param quat Orientation to apply to the normal vectors. If not provided, the vectors will be in respect to the local frame.\n   */\n\n\n  getSideNormals(sixTargetVectors, quat) {\n    const sides = sixTargetVectors;\n    const ex = this.halfExtents;\n    sides[0].set(ex.x, 0, 0);\n    sides[1].set(0, ex.y, 0);\n    sides[2].set(0, 0, ex.z);\n    sides[3].set(-ex.x, 0, 0);\n    sides[4].set(0, -ex.y, 0);\n    sides[5].set(0, 0, -ex.z);\n\n    if (quat !== undefined) {\n      for (let i = 0; i !== sides.length; i++) {\n        quat.vmult(sides[i], sides[i]);\n      }\n    }\n\n    return sides;\n  }\n  /**\n   * Returns the volume of the box.\n   */\n\n\n  volume() {\n    return 8.0 * this.halfExtents.x * this.halfExtents.y * this.halfExtents.z;\n  }\n  /**\n   * updateBoundingSphereRadius\n   */\n\n\n  updateBoundingSphereRadius() {\n    this.boundingSphereRadius = this.halfExtents.length();\n  }\n  /**\n   * forEachWorldCorner\n   */\n\n\n  forEachWorldCorner(pos, quat, callback) {\n    const e = this.halfExtents;\n    const corners = [[e.x, e.y, e.z], [-e.x, e.y, e.z], [-e.x, -e.y, e.z], [-e.x, -e.y, -e.z], [e.x, -e.y, -e.z], [e.x, e.y, -e.z], [-e.x, e.y, -e.z], [e.x, -e.y, e.z]];\n\n    for (let i = 0; i < corners.length; i++) {\n      worldCornerTempPos.set(corners[i][0], corners[i][1], corners[i][2]);\n      quat.vmult(worldCornerTempPos, worldCornerTempPos);\n      pos.vadd(worldCornerTempPos, worldCornerTempPos);\n      callback(worldCornerTempPos.x, worldCornerTempPos.y, worldCornerTempPos.z);\n    }\n  }\n  /**\n   * calculateWorldAABB\n   */\n\n\n  calculateWorldAABB(pos, quat, min, max) {\n    const e = this.halfExtents;\n    worldCornersTemp[0].set(e.x, e.y, e.z);\n    worldCornersTemp[1].set(-e.x, e.y, e.z);\n    worldCornersTemp[2].set(-e.x, -e.y, e.z);\n    worldCornersTemp[3].set(-e.x, -e.y, -e.z);\n    worldCornersTemp[4].set(e.x, -e.y, -e.z);\n    worldCornersTemp[5].set(e.x, e.y, -e.z);\n    worldCornersTemp[6].set(-e.x, e.y, -e.z);\n    worldCornersTemp[7].set(e.x, -e.y, e.z);\n    const wc = worldCornersTemp[0];\n    quat.vmult(wc, wc);\n    pos.vadd(wc, wc);\n    max.copy(wc);\n    min.copy(wc);\n\n    for (let i = 1; i < 8; i++) {\n      const wc = worldCornersTemp[i];\n      quat.vmult(wc, wc);\n      pos.vadd(wc, wc);\n      const x = wc.x;\n      const y = wc.y;\n      const z = wc.z;\n\n      if (x > max.x) {\n        max.x = x;\n      }\n\n      if (y > max.y) {\n        max.y = y;\n      }\n\n      if (z > max.z) {\n        max.z = z;\n      }\n\n      if (x < min.x) {\n        min.x = x;\n      }\n\n      if (y < min.y) {\n        min.y = y;\n      }\n\n      if (z < min.z) {\n        min.z = z;\n      }\n    } // Get each axis max\n    // min.set(Infinity,Infinity,Infinity);\n    // max.set(-Infinity,-Infinity,-Infinity);\n    // this.forEachWorldCorner(pos,quat,function(x,y,z){\n    //     if(x > max.x){\n    //         max.x = x;\n    //     }\n    //     if(y > max.y){\n    //         max.y = y;\n    //     }\n    //     if(z > max.z){\n    //         max.z = z;\n    //     }\n    //     if(x < min.x){\n    //         min.x = x;\n    //     }\n    //     if(y < min.y){\n    //         min.y = y;\n    //     }\n    //     if(z < min.z){\n    //         min.z = z;\n    //     }\n    // });\n\n  }\n\n}\nconst worldCornerTempPos = new Vec3();\nconst worldCornersTemp = [new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3()];\n\n/**\n * BODY_TYPES\n */\nconst BODY_TYPES = {\n  /** DYNAMIC */\n  DYNAMIC: 1,\n\n  /** STATIC */\n  STATIC: 2,\n\n  /** KINEMATIC */\n  KINEMATIC: 4\n};\n/**\n * BodyType\n */\n\n/**\n * BODY_SLEEP_STATES\n */\nconst BODY_SLEEP_STATES = {\n  /** AWAKE */\n  AWAKE: 0,\n\n  /** SLEEPY */\n  SLEEPY: 1,\n\n  /** SLEEPING */\n  SLEEPING: 2\n};\n/**\n * BodySleepState\n */\n\n/**\n * Base class for all body types.\n * @example\n *     const shape = new CANNON.Sphere(1)\n *     const body = new CANNON.Body({\n *       mass: 1,\n *       shape,\n *     })\n *     world.addBody(body)\n */\nclass Body extends EventTarget {\n  /**\n   * Dispatched after two bodies collide. This event is dispatched on each\n   * of the two bodies involved in the collision.\n   * @event collide\n   * @param body The body that was involved in the collision.\n   * @param contact The details of the collision.\n   */\n\n  /**\n   * A dynamic body is fully simulated. Can be moved manually by the user, but normally they move according to forces. A dynamic body can collide with all body types. A dynamic body always has finite, non-zero mass.\n   */\n\n  /**\n   * A static body does not move during simulation and behaves as if it has infinite mass. Static bodies can be moved manually by setting the position of the body. The velocity of a static body is always zero. Static bodies do not collide with other static or kinematic bodies.\n   */\n\n  /**\n   * A kinematic body moves under simulation according to its velocity. They do not respond to forces. They can be moved manually, but normally a kinematic body is moved by setting its velocity. A kinematic body behaves as if it has infinite mass. Kinematic bodies do not collide with other static or kinematic bodies.\n   */\n\n  /**\n   * AWAKE\n   */\n\n  /**\n   * SLEEPY\n   */\n\n  /**\n   * SLEEPING\n   */\n\n  /**\n   * Dispatched after a sleeping body has woken up.\n   * @event wakeup\n   */\n\n  /**\n   * Dispatched after a body has gone in to the sleepy state.\n   * @event sleepy\n   */\n\n  /**\n   * Dispatched after a body has fallen asleep.\n   * @event sleep\n   */\n  constructor(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    super();\n    this.id = Body.idCounter++;\n    this.index = -1;\n    this.world = null;\n    this.vlambda = new Vec3();\n    this.collisionFilterGroup = typeof options.collisionFilterGroup === 'number' ? options.collisionFilterGroup : 1;\n    this.collisionFilterMask = typeof options.collisionFilterMask === 'number' ? options.collisionFilterMask : -1;\n    this.collisionResponse = typeof options.collisionResponse === 'boolean' ? options.collisionResponse : true;\n    this.position = new Vec3();\n    this.previousPosition = new Vec3();\n    this.interpolatedPosition = new Vec3();\n    this.initPosition = new Vec3();\n\n    if (options.position) {\n      this.position.copy(options.position);\n      this.previousPosition.copy(options.position);\n      this.interpolatedPosition.copy(options.position);\n      this.initPosition.copy(options.position);\n    }\n\n    this.velocity = new Vec3();\n\n    if (options.velocity) {\n      this.velocity.copy(options.velocity);\n    }\n\n    this.initVelocity = new Vec3();\n    this.force = new Vec3();\n    const mass = typeof options.mass === 'number' ? options.mass : 0;\n    this.mass = mass;\n    this.invMass = mass > 0 ? 1.0 / mass : 0;\n    this.material = options.material || null;\n    this.linearDamping = typeof options.linearDamping === 'number' ? options.linearDamping : 0.01;\n    this.type = mass <= 0.0 ? Body.STATIC : Body.DYNAMIC;\n\n    if (typeof options.type === typeof Body.STATIC) {\n      this.type = options.type;\n    }\n\n    this.allowSleep = typeof options.allowSleep !== 'undefined' ? options.allowSleep : true;\n    this.sleepState = Body.AWAKE;\n    this.sleepSpeedLimit = typeof options.sleepSpeedLimit !== 'undefined' ? options.sleepSpeedLimit : 0.1;\n    this.sleepTimeLimit = typeof options.sleepTimeLimit !== 'undefined' ? options.sleepTimeLimit : 1;\n    this.timeLastSleepy = 0;\n    this.wakeUpAfterNarrowphase = false;\n    this.torque = new Vec3();\n    this.quaternion = new Quaternion();\n    this.initQuaternion = new Quaternion();\n    this.previousQuaternion = new Quaternion();\n    this.interpolatedQuaternion = new Quaternion();\n\n    if (options.quaternion) {\n      this.quaternion.copy(options.quaternion);\n      this.initQuaternion.copy(options.quaternion);\n      this.previousQuaternion.copy(options.quaternion);\n      this.interpolatedQuaternion.copy(options.quaternion);\n    }\n\n    this.angularVelocity = new Vec3();\n\n    if (options.angularVelocity) {\n      this.angularVelocity.copy(options.angularVelocity);\n    }\n\n    this.initAngularVelocity = new Vec3();\n    this.shapes = [];\n    this.shapeOffsets = [];\n    this.shapeOrientations = [];\n    this.inertia = new Vec3();\n    this.invInertia = new Vec3();\n    this.invInertiaWorld = new Mat3();\n    this.invMassSolve = 0;\n    this.invInertiaSolve = new Vec3();\n    this.invInertiaWorldSolve = new Mat3();\n    this.fixedRotation = typeof options.fixedRotation !== 'undefined' ? options.fixedRotation : false;\n    this.angularDamping = typeof options.angularDamping !== 'undefined' ? options.angularDamping : 0.01;\n    this.linearFactor = new Vec3(1, 1, 1);\n\n    if (options.linearFactor) {\n      this.linearFactor.copy(options.linearFactor);\n    }\n\n    this.angularFactor = new Vec3(1, 1, 1);\n\n    if (options.angularFactor) {\n      this.angularFactor.copy(options.angularFactor);\n    }\n\n    this.aabb = new AABB();\n    this.aabbNeedsUpdate = true;\n    this.boundingRadius = 0;\n    this.wlambda = new Vec3();\n    this.isTrigger = Boolean(options.isTrigger);\n\n    if (options.shape) {\n      this.addShape(options.shape);\n    }\n\n    this.updateMassProperties();\n  }\n  /**\n   * Wake the body up.\n   */\n\n\n  wakeUp() {\n    const prevState = this.sleepState;\n    this.sleepState = Body.AWAKE;\n    this.wakeUpAfterNarrowphase = false;\n\n    if (prevState === Body.SLEEPING) {\n      this.dispatchEvent(Body.wakeupEvent);\n    }\n  }\n  /**\n   * Force body sleep\n   */\n\n\n  sleep() {\n    this.sleepState = Body.SLEEPING;\n    this.velocity.set(0, 0, 0);\n    this.angularVelocity.set(0, 0, 0);\n    this.wakeUpAfterNarrowphase = false;\n  }\n  /**\n   * Called every timestep to update internal sleep timer and change sleep state if needed.\n   * @param time The world time in seconds\n   */\n\n\n  sleepTick(time) {\n    if (this.allowSleep) {\n      const sleepState = this.sleepState;\n      const speedSquared = this.velocity.lengthSquared() + this.angularVelocity.lengthSquared();\n      const speedLimitSquared = this.sleepSpeedLimit ** 2;\n\n      if (sleepState === Body.AWAKE && speedSquared < speedLimitSquared) {\n        this.sleepState = Body.SLEEPY; // Sleepy\n\n        this.timeLastSleepy = time;\n        this.dispatchEvent(Body.sleepyEvent);\n      } else if (sleepState === Body.SLEEPY && speedSquared > speedLimitSquared) {\n        this.wakeUp(); // Wake up\n      } else if (sleepState === Body.SLEEPY && time - this.timeLastSleepy > this.sleepTimeLimit) {\n        this.sleep(); // Sleeping\n\n        this.dispatchEvent(Body.sleepEvent);\n      }\n    }\n  }\n  /**\n   * If the body is sleeping, it should be immovable / have infinite mass during solve. We solve it by having a separate \"solve mass\".\n   */\n\n\n  updateSolveMassProperties() {\n    if (this.sleepState === Body.SLEEPING || this.type === Body.KINEMATIC) {\n      this.invMassSolve = 0;\n      this.invInertiaSolve.setZero();\n      this.invInertiaWorldSolve.setZero();\n    } else {\n      this.invMassSolve = this.invMass;\n      this.invInertiaSolve.copy(this.invInertia);\n      this.invInertiaWorldSolve.copy(this.invInertiaWorld);\n    }\n  }\n  /**\n   * Convert a world point to local body frame.\n   */\n\n\n  pointToLocalFrame(worldPoint, result) {\n    if (result === void 0) {\n      result = new Vec3();\n    }\n\n    worldPoint.vsub(this.position, result);\n    this.quaternion.conjugate().vmult(result, result);\n    return result;\n  }\n  /**\n   * Convert a world vector to local body frame.\n   */\n\n\n  vectorToLocalFrame(worldVector, result) {\n    if (result === void 0) {\n      result = new Vec3();\n    }\n\n    this.quaternion.conjugate().vmult(worldVector, result);\n    return result;\n  }\n  /**\n   * Convert a local body point to world frame.\n   */\n\n\n  pointToWorldFrame(localPoint, result) {\n    if (result === void 0) {\n      result = new Vec3();\n    }\n\n    this.quaternion.vmult(localPoint, result);\n    result.vadd(this.position, result);\n    return result;\n  }\n  /**\n   * Convert a local body point to world frame.\n   */\n\n\n  vectorToWorldFrame(localVector, result) {\n    if (result === void 0) {\n      result = new Vec3();\n    }\n\n    this.quaternion.vmult(localVector, result);\n    return result;\n  }\n  /**\n   * Add a shape to the body with a local offset and orientation.\n   * @return The body object, for chainability.\n   */\n\n\n  addShape(shape, _offset, _orientation) {\n    const offset = new Vec3();\n    const orientation = new Quaternion();\n\n    if (_offset) {\n      offset.copy(_offset);\n    }\n\n    if (_orientation) {\n      orientation.copy(_orientation);\n    }\n\n    this.shapes.push(shape);\n    this.shapeOffsets.push(offset);\n    this.shapeOrientations.push(orientation);\n    this.updateMassProperties();\n    this.updateBoundingRadius();\n    this.aabbNeedsUpdate = true;\n    shape.body = this;\n    return this;\n  }\n  /**\n   * Remove a shape from the body.\n   * @return The body object, for chainability.\n   */\n\n\n  removeShape(shape) {\n    const index = this.shapes.indexOf(shape);\n\n    if (index === -1) {\n      console.warn('Shape does not belong to the body');\n      return this;\n    }\n\n    this.shapes.splice(index, 1);\n    this.shapeOffsets.splice(index, 1);\n    this.shapeOrientations.splice(index, 1);\n    this.updateMassProperties();\n    this.updateBoundingRadius();\n    this.aabbNeedsUpdate = true;\n    shape.body = null;\n    return this;\n  }\n  /**\n   * Update the bounding radius of the body. Should be done if any of the shapes are changed.\n   */\n\n\n  updateBoundingRadius() {\n    const shapes = this.shapes;\n    const shapeOffsets = this.shapeOffsets;\n    const N = shapes.length;\n    let radius = 0;\n\n    for (let i = 0; i !== N; i++) {\n      const shape = shapes[i];\n      shape.updateBoundingSphereRadius();\n      const offset = shapeOffsets[i].length();\n      const r = shape.boundingSphereRadius;\n\n      if (offset + r > radius) {\n        radius = offset + r;\n      }\n    }\n\n    this.boundingRadius = radius;\n  }\n  /**\n   * Updates the .aabb\n   */\n\n\n  updateAABB() {\n    const shapes = this.shapes;\n    const shapeOffsets = this.shapeOffsets;\n    const shapeOrientations = this.shapeOrientations;\n    const N = shapes.length;\n    const offset = tmpVec;\n    const orientation = tmpQuat;\n    const bodyQuat = this.quaternion;\n    const aabb = this.aabb;\n    const shapeAABB = updateAABB_shapeAABB;\n\n    for (let i = 0; i !== N; i++) {\n      const shape = shapes[i]; // Get shape world position\n\n      bodyQuat.vmult(shapeOffsets[i], offset);\n      offset.vadd(this.position, offset); // Get shape world quaternion\n\n      bodyQuat.mult(shapeOrientations[i], orientation); // Get shape AABB\n\n      shape.calculateWorldAABB(offset, orientation, shapeAABB.lowerBound, shapeAABB.upperBound);\n\n      if (i === 0) {\n        aabb.copy(shapeAABB);\n      } else {\n        aabb.extend(shapeAABB);\n      }\n    }\n\n    this.aabbNeedsUpdate = false;\n  }\n  /**\n   * Update `.inertiaWorld` and `.invInertiaWorld`\n   */\n\n\n  updateInertiaWorld(force) {\n    const I = this.invInertia;\n\n    if (I.x === I.y && I.y === I.z && !force) ; else {\n      const m1 = uiw_m1;\n      const m2 = uiw_m2;\n      uiw_m3;\n      m1.setRotationFromQuaternion(this.quaternion);\n      m1.transpose(m2);\n      m1.scale(I, m1);\n      m1.mmult(m2, this.invInertiaWorld);\n    }\n  }\n  /**\n   * Apply force to a point of the body. This could for example be a point on the Body surface.\n   * Applying force this way will add to Body.force and Body.torque.\n   * @param force The amount of force to add.\n   * @param relativePoint A point relative to the center of mass to apply the force on.\n   */\n\n\n  applyForce(force, relativePoint) {\n    if (relativePoint === void 0) {\n      relativePoint = new Vec3();\n    }\n\n    // Needed?\n    if (this.type !== Body.DYNAMIC) {\n      return;\n    }\n\n    if (this.sleepState === Body.SLEEPING) {\n      this.wakeUp();\n    } // Compute produced rotational force\n\n\n    const rotForce = Body_applyForce_rotForce;\n    relativePoint.cross(force, rotForce); // Add linear force\n\n    this.force.vadd(force, this.force); // Add rotational force\n\n    this.torque.vadd(rotForce, this.torque);\n  }\n  /**\n   * Apply force to a local point in the body.\n   * @param force The force vector to apply, defined locally in the body frame.\n   * @param localPoint A local point in the body to apply the force on.\n   */\n\n\n  applyLocalForce(localForce, localPoint) {\n    if (localPoint === void 0) {\n      localPoint = new Vec3();\n    }\n\n    if (this.type !== Body.DYNAMIC) {\n      return;\n    }\n\n    const worldForce = Body_applyLocalForce_worldForce;\n    const relativePointWorld = Body_applyLocalForce_relativePointWorld; // Transform the force vector to world space\n\n    this.vectorToWorldFrame(localForce, worldForce);\n    this.vectorToWorldFrame(localPoint, relativePointWorld);\n    this.applyForce(worldForce, relativePointWorld);\n  }\n  /**\n   * Apply torque to the body.\n   * @param torque The amount of torque to add.\n   */\n\n\n  applyTorque(torque) {\n    if (this.type !== Body.DYNAMIC) {\n      return;\n    }\n\n    if (this.sleepState === Body.SLEEPING) {\n      this.wakeUp();\n    } // Add rotational force\n\n\n    this.torque.vadd(torque, this.torque);\n  }\n  /**\n   * Apply impulse to a point of the body. This could for example be a point on the Body surface.\n   * An impulse is a force added to a body during a short period of time (impulse = force * time).\n   * Impulses will be added to Body.velocity and Body.angularVelocity.\n   * @param impulse The amount of impulse to add.\n   * @param relativePoint A point relative to the center of mass to apply the force on.\n   */\n\n\n  applyImpulse(impulse, relativePoint) {\n    if (relativePoint === void 0) {\n      relativePoint = new Vec3();\n    }\n\n    if (this.type !== Body.DYNAMIC) {\n      return;\n    }\n\n    if (this.sleepState === Body.SLEEPING) {\n      this.wakeUp();\n    } // Compute point position relative to the body center\n\n\n    const r = relativePoint; // Compute produced central impulse velocity\n\n    const velo = Body_applyImpulse_velo;\n    velo.copy(impulse);\n    velo.scale(this.invMass, velo); // Add linear impulse\n\n    this.velocity.vadd(velo, this.velocity); // Compute produced rotational impulse velocity\n\n    const rotVelo = Body_applyImpulse_rotVelo;\n    r.cross(impulse, rotVelo);\n    /*\n     rotVelo.x *= this.invInertia.x;\n     rotVelo.y *= this.invInertia.y;\n     rotVelo.z *= this.invInertia.z;\n     */\n\n    this.invInertiaWorld.vmult(rotVelo, rotVelo); // Add rotational Impulse\n\n    this.angularVelocity.vadd(rotVelo, this.angularVelocity);\n  }\n  /**\n   * Apply locally-defined impulse to a local point in the body.\n   * @param force The force vector to apply, defined locally in the body frame.\n   * @param localPoint A local point in the body to apply the force on.\n   */\n\n\n  applyLocalImpulse(localImpulse, localPoint) {\n    if (localPoint === void 0) {\n      localPoint = new Vec3();\n    }\n\n    if (this.type !== Body.DYNAMIC) {\n      return;\n    }\n\n    const worldImpulse = Body_applyLocalImpulse_worldImpulse;\n    const relativePointWorld = Body_applyLocalImpulse_relativePoint; // Transform the force vector to world space\n\n    this.vectorToWorldFrame(localImpulse, worldImpulse);\n    this.vectorToWorldFrame(localPoint, relativePointWorld);\n    this.applyImpulse(worldImpulse, relativePointWorld);\n  }\n  /**\n   * Should be called whenever you change the body shape or mass.\n   */\n\n\n  updateMassProperties() {\n    const halfExtents = Body_updateMassProperties_halfExtents;\n    this.invMass = this.mass > 0 ? 1.0 / this.mass : 0;\n    const I = this.inertia;\n    const fixed = this.fixedRotation; // Approximate with AABB box\n\n    this.updateAABB();\n    halfExtents.set((this.aabb.upperBound.x - this.aabb.lowerBound.x) / 2, (this.aabb.upperBound.y - this.aabb.lowerBound.y) / 2, (this.aabb.upperBound.z - this.aabb.lowerBound.z) / 2);\n    Box.calculateInertia(halfExtents, this.mass, I);\n    this.invInertia.set(I.x > 0 && !fixed ? 1.0 / I.x : 0, I.y > 0 && !fixed ? 1.0 / I.y : 0, I.z > 0 && !fixed ? 1.0 / I.z : 0);\n    this.updateInertiaWorld(true);\n  }\n  /**\n   * Get world velocity of a point in the body.\n   * @param worldPoint\n   * @param result\n   * @return The result vector.\n   */\n\n\n  getVelocityAtWorldPoint(worldPoint, result) {\n    const r = new Vec3();\n    worldPoint.vsub(this.position, r);\n    this.angularVelocity.cross(r, result);\n    this.velocity.vadd(result, result);\n    return result;\n  }\n  /**\n   * Move the body forward in time.\n   * @param dt Time step\n   * @param quatNormalize Set to true to normalize the body quaternion\n   * @param quatNormalizeFast If the quaternion should be normalized using \"fast\" quaternion normalization\n   */\n\n\n  integrate(dt, quatNormalize, quatNormalizeFast) {\n    // Save previous position\n    this.previousPosition.copy(this.position);\n    this.previousQuaternion.copy(this.quaternion);\n\n    if (!(this.type === Body.DYNAMIC || this.type === Body.KINEMATIC) || this.sleepState === Body.SLEEPING) {\n      // Only for dynamic\n      return;\n    }\n\n    const velo = this.velocity;\n    const angularVelo = this.angularVelocity;\n    const pos = this.position;\n    const force = this.force;\n    const torque = this.torque;\n    const quat = this.quaternion;\n    const invMass = this.invMass;\n    const invInertia = this.invInertiaWorld;\n    const linearFactor = this.linearFactor;\n    const iMdt = invMass * dt;\n    velo.x += force.x * iMdt * linearFactor.x;\n    velo.y += force.y * iMdt * linearFactor.y;\n    velo.z += force.z * iMdt * linearFactor.z;\n    const e = invInertia.elements;\n    const angularFactor = this.angularFactor;\n    const tx = torque.x * angularFactor.x;\n    const ty = torque.y * angularFactor.y;\n    const tz = torque.z * angularFactor.z;\n    angularVelo.x += dt * (e[0] * tx + e[1] * ty + e[2] * tz);\n    angularVelo.y += dt * (e[3] * tx + e[4] * ty + e[5] * tz);\n    angularVelo.z += dt * (e[6] * tx + e[7] * ty + e[8] * tz); // Use new velocity  - leap frog\n\n    pos.x += velo.x * dt;\n    pos.y += velo.y * dt;\n    pos.z += velo.z * dt;\n    quat.integrate(this.angularVelocity, dt, this.angularFactor, quat);\n\n    if (quatNormalize) {\n      if (quatNormalizeFast) {\n        quat.normalizeFast();\n      } else {\n        quat.normalize();\n      }\n    }\n\n    this.aabbNeedsUpdate = true; // Update world inertia\n\n    this.updateInertiaWorld();\n  }\n\n}\nBody.idCounter = 0;\nBody.COLLIDE_EVENT_NAME = 'collide';\nBody.DYNAMIC = BODY_TYPES.DYNAMIC;\nBody.STATIC = BODY_TYPES.STATIC;\nBody.KINEMATIC = BODY_TYPES.KINEMATIC;\nBody.AWAKE = BODY_SLEEP_STATES.AWAKE;\nBody.SLEEPY = BODY_SLEEP_STATES.SLEEPY;\nBody.SLEEPING = BODY_SLEEP_STATES.SLEEPING;\nBody.wakeupEvent = {\n  type: 'wakeup'\n};\nBody.sleepyEvent = {\n  type: 'sleepy'\n};\nBody.sleepEvent = {\n  type: 'sleep'\n};\nconst tmpVec = new Vec3();\nconst tmpQuat = new Quaternion();\nconst updateAABB_shapeAABB = new AABB();\nconst uiw_m1 = new Mat3();\nconst uiw_m2 = new Mat3();\nconst uiw_m3 = new Mat3();\nconst Body_applyForce_rotForce = new Vec3();\nconst Body_applyLocalForce_worldForce = new Vec3();\nconst Body_applyLocalForce_relativePointWorld = new Vec3();\nconst Body_applyImpulse_velo = new Vec3();\nconst Body_applyImpulse_rotVelo = new Vec3();\nconst Body_applyLocalImpulse_worldImpulse = new Vec3();\nconst Body_applyLocalImpulse_relativePoint = new Vec3();\nconst Body_updateMassProperties_halfExtents = new Vec3();\n\n/**\n * Base class for broadphase implementations\n * @author schteppe\n */\nclass Broadphase {\n  /**\n   * The world to search for collisions in.\n   */\n\n  /**\n   * If set to true, the broadphase uses bounding boxes for intersection tests, else it uses bounding spheres.\n   */\n\n  /**\n   * Set to true if the objects in the world moved.\n   */\n  constructor() {\n    this.world = null;\n    this.useBoundingBoxes = false;\n    this.dirty = true;\n  }\n  /**\n   * Get the collision pairs from the world\n   * @param world The world to search in\n   * @param p1 Empty array to be filled with body objects\n   * @param p2 Empty array to be filled with body objects\n   */\n\n\n  collisionPairs(world, p1, p2) {\n    throw new Error('collisionPairs not implemented for this BroadPhase class!');\n  }\n  /**\n   * Check if a body pair needs to be intersection tested at all.\n   */\n\n\n  needBroadphaseCollision(bodyA, bodyB) {\n    // Check collision filter masks\n    if ((bodyA.collisionFilterGroup & bodyB.collisionFilterMask) === 0 || (bodyB.collisionFilterGroup & bodyA.collisionFilterMask) === 0) {\n      return false;\n    } // Check types\n\n\n    if (((bodyA.type & Body.STATIC) !== 0 || bodyA.sleepState === Body.SLEEPING) && ((bodyB.type & Body.STATIC) !== 0 || bodyB.sleepState === Body.SLEEPING)) {\n      // Both bodies are static or sleeping. Skip.\n      return false;\n    }\n\n    return true;\n  }\n  /**\n   * Check if the bounding volumes of two bodies intersect.\n   */\n\n\n  intersectionTest(bodyA, bodyB, pairs1, pairs2) {\n    if (this.useBoundingBoxes) {\n      this.doBoundingBoxBroadphase(bodyA, bodyB, pairs1, pairs2);\n    } else {\n      this.doBoundingSphereBroadphase(bodyA, bodyB, pairs1, pairs2);\n    }\n  }\n  /**\n   * Check if the bounding spheres of two bodies are intersecting.\n   * @param pairs1 bodyA is appended to this array if intersection\n   * @param pairs2 bodyB is appended to this array if intersection\n   */\n\n\n  doBoundingSphereBroadphase(bodyA, bodyB, pairs1, pairs2) {\n    const r = Broadphase_collisionPairs_r;\n    bodyB.position.vsub(bodyA.position, r);\n    const boundingRadiusSum2 = (bodyA.boundingRadius + bodyB.boundingRadius) ** 2;\n    const norm2 = r.lengthSquared();\n\n    if (norm2 < boundingRadiusSum2) {\n      pairs1.push(bodyA);\n      pairs2.push(bodyB);\n    }\n  }\n  /**\n   * Check if the bounding boxes of two bodies are intersecting.\n   */\n\n\n  doBoundingBoxBroadphase(bodyA, bodyB, pairs1, pairs2) {\n    if (bodyA.aabbNeedsUpdate) {\n      bodyA.updateAABB();\n    }\n\n    if (bodyB.aabbNeedsUpdate) {\n      bodyB.updateAABB();\n    } // Check AABB / AABB\n\n\n    if (bodyA.aabb.overlaps(bodyB.aabb)) {\n      pairs1.push(bodyA);\n      pairs2.push(bodyB);\n    }\n  }\n  /**\n   * Removes duplicate pairs from the pair arrays.\n   */\n\n\n  makePairsUnique(pairs1, pairs2) {\n    const t = Broadphase_makePairsUnique_temp;\n    const p1 = Broadphase_makePairsUnique_p1;\n    const p2 = Broadphase_makePairsUnique_p2;\n    const N = pairs1.length;\n\n    for (let i = 0; i !== N; i++) {\n      p1[i] = pairs1[i];\n      p2[i] = pairs2[i];\n    }\n\n    pairs1.length = 0;\n    pairs2.length = 0;\n\n    for (let i = 0; i !== N; i++) {\n      const id1 = p1[i].id;\n      const id2 = p2[i].id;\n      const key = id1 < id2 ? `${id1},${id2}` : `${id2},${id1}`;\n      t[key] = i;\n      t.keys.push(key);\n    }\n\n    for (let i = 0; i !== t.keys.length; i++) {\n      const key = t.keys.pop();\n      const pairIndex = t[key];\n      pairs1.push(p1[pairIndex]);\n      pairs2.push(p2[pairIndex]);\n      delete t[key];\n    }\n  }\n  /**\n   * To be implemented by subcasses\n   */\n\n\n  setWorld(world) {}\n  /**\n   * Check if the bounding spheres of two bodies overlap.\n   */\n\n\n  static boundingSphereCheck(bodyA, bodyB) {\n    const dist = new Vec3(); // bsc_dist;\n\n    bodyA.position.vsub(bodyB.position, dist);\n    const sa = bodyA.shapes[0];\n    const sb = bodyB.shapes[0];\n    return Math.pow(sa.boundingSphereRadius + sb.boundingSphereRadius, 2) > dist.lengthSquared();\n  }\n  /**\n   * Returns all the bodies within the AABB.\n   */\n\n\n  aabbQuery(world, aabb, result) {\n    console.warn('.aabbQuery is not implemented in this Broadphase subclass.');\n    return [];\n  }\n\n} // Temp objects\n\nconst Broadphase_collisionPairs_r = new Vec3();\nnew Vec3();\nnew Quaternion();\nnew Vec3();\nconst Broadphase_makePairsUnique_temp = {\n  keys: []\n};\nconst Broadphase_makePairsUnique_p1 = [];\nconst Broadphase_makePairsUnique_p2 = [];\nnew Vec3();\n\n/**\n * Axis aligned uniform grid broadphase.\n * @todo Needs support for more than just planes and spheres.\n */\nclass GridBroadphase extends Broadphase {\n  /**\n   * Number of boxes along x\n   */\n\n  /**\n   * Number of boxes along y\n   */\n\n  /**\n   * Number of boxes along z\n   */\n\n  /**\n   * aabbMin\n   */\n\n  /**\n   * aabbMax\n   */\n\n  /**\n   * bins\n   */\n\n  /**\n   * binLengths\n   */\n\n  /**\n   * @param nx Number of boxes along x.\n   * @param ny Number of boxes along y.\n   * @param nz Number of boxes along z.\n   */\n  constructor(aabbMin, aabbMax, nx, ny, nz) {\n    if (aabbMin === void 0) {\n      aabbMin = new Vec3(100, 100, 100);\n    }\n\n    if (aabbMax === void 0) {\n      aabbMax = new Vec3(-100, -100, -100);\n    }\n\n    if (nx === void 0) {\n      nx = 10;\n    }\n\n    if (ny === void 0) {\n      ny = 10;\n    }\n\n    if (nz === void 0) {\n      nz = 10;\n    }\n\n    super();\n    this.nx = nx;\n    this.ny = ny;\n    this.nz = nz;\n    this.aabbMin = aabbMin;\n    this.aabbMax = aabbMax;\n    const nbins = this.nx * this.ny * this.nz;\n\n    if (nbins <= 0) {\n      throw \"GridBroadphase: Each dimension's n must be >0\";\n    }\n\n    this.bins = [];\n    this.binLengths = []; // Rather than continually resizing arrays (thrashing the memory), just record length and allow them to grow\n\n    this.bins.length = nbins;\n    this.binLengths.length = nbins;\n\n    for (let i = 0; i < nbins; i++) {\n      this.bins[i] = [];\n      this.binLengths[i] = 0;\n    }\n  }\n  /**\n   * Get all the collision pairs in the physics world\n   */\n\n\n  collisionPairs(world, pairs1, pairs2) {\n    const N = world.bodies.length;\n    const bodies = world.bodies;\n    const max = this.aabbMax;\n    const min = this.aabbMin;\n    const nx = this.nx;\n    const ny = this.ny;\n    const nz = this.nz;\n    const xstep = ny * nz;\n    const ystep = nz;\n    const zstep = 1;\n    const xmax = max.x;\n    const ymax = max.y;\n    const zmax = max.z;\n    const xmin = min.x;\n    const ymin = min.y;\n    const zmin = min.z;\n    const xmult = nx / (xmax - xmin);\n    const ymult = ny / (ymax - ymin);\n    const zmult = nz / (zmax - zmin);\n    const binsizeX = (xmax - xmin) / nx;\n    const binsizeY = (ymax - ymin) / ny;\n    const binsizeZ = (zmax - zmin) / nz;\n    const binRadius = Math.sqrt(binsizeX * binsizeX + binsizeY * binsizeY + binsizeZ * binsizeZ) * 0.5;\n    const types = Shape.types;\n    const SPHERE = types.SPHERE;\n    const PLANE = types.PLANE;\n    types.BOX;\n    types.COMPOUND;\n    types.CONVEXPOLYHEDRON;\n    const bins = this.bins;\n    const binLengths = this.binLengths;\n    const Nbins = this.bins.length; // Reset bins\n\n    for (let i = 0; i !== Nbins; i++) {\n      binLengths[i] = 0;\n    }\n\n    const ceil = Math.ceil;\n\n    function addBoxToBins(x0, y0, z0, x1, y1, z1, bi) {\n      let xoff0 = (x0 - xmin) * xmult | 0;\n      let yoff0 = (y0 - ymin) * ymult | 0;\n      let zoff0 = (z0 - zmin) * zmult | 0;\n      let xoff1 = ceil((x1 - xmin) * xmult);\n      let yoff1 = ceil((y1 - ymin) * ymult);\n      let zoff1 = ceil((z1 - zmin) * zmult);\n\n      if (xoff0 < 0) {\n        xoff0 = 0;\n      } else if (xoff0 >= nx) {\n        xoff0 = nx - 1;\n      }\n\n      if (yoff0 < 0) {\n        yoff0 = 0;\n      } else if (yoff0 >= ny) {\n        yoff0 = ny - 1;\n      }\n\n      if (zoff0 < 0) {\n        zoff0 = 0;\n      } else if (zoff0 >= nz) {\n        zoff0 = nz - 1;\n      }\n\n      if (xoff1 < 0) {\n        xoff1 = 0;\n      } else if (xoff1 >= nx) {\n        xoff1 = nx - 1;\n      }\n\n      if (yoff1 < 0) {\n        yoff1 = 0;\n      } else if (yoff1 >= ny) {\n        yoff1 = ny - 1;\n      }\n\n      if (zoff1 < 0) {\n        zoff1 = 0;\n      } else if (zoff1 >= nz) {\n        zoff1 = nz - 1;\n      }\n\n      xoff0 *= xstep;\n      yoff0 *= ystep;\n      zoff0 *= zstep;\n      xoff1 *= xstep;\n      yoff1 *= ystep;\n      zoff1 *= zstep;\n\n      for (let xoff = xoff0; xoff <= xoff1; xoff += xstep) {\n        for (let yoff = yoff0; yoff <= yoff1; yoff += ystep) {\n          for (let zoff = zoff0; zoff <= zoff1; zoff += zstep) {\n            const idx = xoff + yoff + zoff;\n            bins[idx][binLengths[idx]++] = bi;\n          }\n        }\n      }\n    } // Put all bodies into the bins\n\n\n    for (let i = 0; i !== N; i++) {\n      const bi = bodies[i];\n      const si = bi.shapes[0];\n\n      switch (si.type) {\n        case SPHERE:\n          {\n            const shape = si; // Put in bin\n            // check if overlap with other bins\n\n            const x = bi.position.x;\n            const y = bi.position.y;\n            const z = bi.position.z;\n            const r = shape.radius;\n            addBoxToBins(x - r, y - r, z - r, x + r, y + r, z + r, bi);\n            break;\n          }\n\n        case PLANE:\n          {\n            const shape = si;\n\n            if (shape.worldNormalNeedsUpdate) {\n              shape.computeWorldNormal(bi.quaternion);\n            }\n\n            const planeNormal = shape.worldNormal; //Relative position from origin of plane object to the first bin\n            //Incremented as we iterate through the bins\n\n            const xreset = xmin + binsizeX * 0.5 - bi.position.x;\n            const yreset = ymin + binsizeY * 0.5 - bi.position.y;\n            const zreset = zmin + binsizeZ * 0.5 - bi.position.z;\n            const d = GridBroadphase_collisionPairs_d;\n            d.set(xreset, yreset, zreset);\n\n            for (let xi = 0, xoff = 0; xi !== nx; xi++, xoff += xstep, d.y = yreset, d.x += binsizeX) {\n              for (let yi = 0, yoff = 0; yi !== ny; yi++, yoff += ystep, d.z = zreset, d.y += binsizeY) {\n                for (let zi = 0, zoff = 0; zi !== nz; zi++, zoff += zstep, d.z += binsizeZ) {\n                  if (d.dot(planeNormal) < binRadius) {\n                    const idx = xoff + yoff + zoff;\n                    bins[idx][binLengths[idx]++] = bi;\n                  }\n                }\n              }\n            }\n\n            break;\n          }\n\n        default:\n          {\n            if (bi.aabbNeedsUpdate) {\n              bi.updateAABB();\n            }\n\n            addBoxToBins(bi.aabb.lowerBound.x, bi.aabb.lowerBound.y, bi.aabb.lowerBound.z, bi.aabb.upperBound.x, bi.aabb.upperBound.y, bi.aabb.upperBound.z, bi);\n            break;\n          }\n      }\n    } // Check each bin\n\n\n    for (let i = 0; i !== Nbins; i++) {\n      const binLength = binLengths[i]; //Skip bins with no potential collisions\n\n      if (binLength > 1) {\n        const bin = bins[i]; // Do N^2 broadphase inside\n\n        for (let xi = 0; xi !== binLength; xi++) {\n          const bi = bin[xi];\n\n          for (let yi = 0; yi !== xi; yi++) {\n            const bj = bin[yi];\n\n            if (this.needBroadphaseCollision(bi, bj)) {\n              this.intersectionTest(bi, bj, pairs1, pairs2);\n            }\n          }\n        }\n      }\n    } //\tfor (let zi = 0, zoff=0; zi < nz; zi++, zoff+= zstep) {\n    //\t\tconsole.log(\"layer \"+zi);\n    //\t\tfor (let yi = 0, yoff=0; yi < ny; yi++, yoff += ystep) {\n    //\t\t\tconst row = '';\n    //\t\t\tfor (let xi = 0, xoff=0; xi < nx; xi++, xoff += xstep) {\n    //\t\t\t\tconst idx = xoff + yoff + zoff;\n    //\t\t\t\trow += ' ' + binLengths[idx];\n    //\t\t\t}\n    //\t\t\tconsole.log(row);\n    //\t\t}\n    //\t}\n\n\n    this.makePairsUnique(pairs1, pairs2);\n  }\n\n}\nconst GridBroadphase_collisionPairs_d = new Vec3();\nnew Vec3();\n\n/**\n * Naive broadphase implementation, used in lack of better ones.\n *\n * The naive broadphase looks at all possible pairs without restriction, therefore it has complexity N^2 _(which is bad)_\n */\nclass NaiveBroadphase extends Broadphase {\n  /**\n   * @todo Remove useless constructor\n   */\n  constructor() {\n    super();\n  }\n  /**\n   * Get all the collision pairs in the physics world\n   */\n\n\n  collisionPairs(world, pairs1, pairs2) {\n    const bodies = world.bodies;\n    const n = bodies.length;\n    let bi;\n    let bj; // Naive N^2 ftw!\n\n    for (let i = 0; i !== n; i++) {\n      for (let j = 0; j !== i; j++) {\n        bi = bodies[i];\n        bj = bodies[j];\n\n        if (!this.needBroadphaseCollision(bi, bj)) {\n          continue;\n        }\n\n        this.intersectionTest(bi, bj, pairs1, pairs2);\n      }\n    }\n  }\n  /**\n   * Returns all the bodies within an AABB.\n   * @param result An array to store resulting bodies in.\n   */\n\n\n  aabbQuery(world, aabb, result) {\n    if (result === void 0) {\n      result = [];\n    }\n\n    for (let i = 0; i < world.bodies.length; i++) {\n      const b = world.bodies[i];\n\n      if (b.aabbNeedsUpdate) {\n        b.updateAABB();\n      } // Ugly hack until Body gets aabb\n\n\n      if (b.aabb.overlaps(aabb)) {\n        result.push(b);\n      }\n    }\n\n    return result;\n  }\n\n}\n\n/**\n * Storage for Ray casting data\n */\nclass RaycastResult {\n  /**\n   * rayFromWorld\n   */\n\n  /**\n   * rayToWorld\n   */\n\n  /**\n   * hitNormalWorld\n   */\n\n  /**\n   * hitPointWorld\n   */\n\n  /**\n   * hasHit\n   */\n\n  /**\n   * shape\n   */\n\n  /**\n   * body\n   */\n\n  /**\n   * The index of the hit triangle, if the hit shape was a trimesh\n   */\n\n  /**\n   * Distance to the hit. Will be set to -1 if there was no hit\n   */\n\n  /**\n   * If the ray should stop traversing the bodies\n   */\n  constructor() {\n    this.rayFromWorld = new Vec3();\n    this.rayToWorld = new Vec3();\n    this.hitNormalWorld = new Vec3();\n    this.hitPointWorld = new Vec3();\n    this.hasHit = false;\n    this.shape = null;\n    this.body = null;\n    this.hitFaceIndex = -1;\n    this.distance = -1;\n    this.shouldStop = false;\n  }\n  /**\n   * Reset all result data.\n   */\n\n\n  reset() {\n    this.rayFromWorld.setZero();\n    this.rayToWorld.setZero();\n    this.hitNormalWorld.setZero();\n    this.hitPointWorld.setZero();\n    this.hasHit = false;\n    this.shape = null;\n    this.body = null;\n    this.hitFaceIndex = -1;\n    this.distance = -1;\n    this.shouldStop = false;\n  }\n  /**\n   * abort\n   */\n\n\n  abort() {\n    this.shouldStop = true;\n  }\n  /**\n   * Set result data.\n   */\n\n\n  set(rayFromWorld, rayToWorld, hitNormalWorld, hitPointWorld, shape, body, distance) {\n    this.rayFromWorld.copy(rayFromWorld);\n    this.rayToWorld.copy(rayToWorld);\n    this.hitNormalWorld.copy(hitNormalWorld);\n    this.hitPointWorld.copy(hitPointWorld);\n    this.shape = shape;\n    this.body = body;\n    this.distance = distance;\n  }\n\n}\n\nlet _Shape$types$SPHERE, _Shape$types$PLANE, _Shape$types$BOX, _Shape$types$CYLINDER, _Shape$types$CONVEXPO, _Shape$types$HEIGHTFI, _Shape$types$TRIMESH;\n\n/**\n * RAY_MODES\n */\nconst RAY_MODES = {\n  /** CLOSEST */\n  CLOSEST: 1,\n\n  /** ANY */\n  ANY: 2,\n\n  /** ALL */\n  ALL: 4\n};\n/**\n * RayMode\n */\n\n_Shape$types$SPHERE = Shape.types.SPHERE;\n_Shape$types$PLANE = Shape.types.PLANE;\n_Shape$types$BOX = Shape.types.BOX;\n_Shape$types$CYLINDER = Shape.types.CYLINDER;\n_Shape$types$CONVEXPO = Shape.types.CONVEXPOLYHEDRON;\n_Shape$types$HEIGHTFI = Shape.types.HEIGHTFIELD;\n_Shape$types$TRIMESH = Shape.types.TRIMESH;\n\n/**\n * A line in 3D space that intersects bodies and return points.\n */\nclass Ray {\n  /**\n   * from\n   */\n\n  /**\n   * to\n   */\n\n  /**\n   * direction\n   */\n\n  /**\n   * The precision of the ray. Used when checking parallelity etc.\n   * @default 0.0001\n   */\n\n  /**\n   * Set to `false` if you don't want the Ray to take `collisionResponse` flags into account on bodies and shapes.\n   * @default true\n   */\n\n  /**\n   * If set to `true`, the ray skips any hits with normal.dot(rayDirection) < 0.\n   * @default false\n   */\n\n  /**\n   * collisionFilterMask\n   * @default -1\n   */\n\n  /**\n   * collisionFilterGroup\n   * @default -1\n   */\n\n  /**\n   * The intersection mode. Should be Ray.ANY, Ray.ALL or Ray.CLOSEST.\n   * @default RAY.ANY\n   */\n\n  /**\n   * Current result object.\n   */\n\n  /**\n   * Will be set to `true` during intersectWorld() if the ray hit anything.\n   */\n\n  /**\n   * User-provided result callback. Will be used if mode is Ray.ALL.\n   */\n\n  /**\n   * CLOSEST\n   */\n\n  /**\n   * ANY\n   */\n\n  /**\n   * ALL\n   */\n  get [_Shape$types$SPHERE]() {\n    return this._intersectSphere;\n  }\n\n  get [_Shape$types$PLANE]() {\n    return this._intersectPlane;\n  }\n\n  get [_Shape$types$BOX]() {\n    return this._intersectBox;\n  }\n\n  get [_Shape$types$CYLINDER]() {\n    return this._intersectConvex;\n  }\n\n  get [_Shape$types$CONVEXPO]() {\n    return this._intersectConvex;\n  }\n\n  get [_Shape$types$HEIGHTFI]() {\n    return this._intersectHeightfield;\n  }\n\n  get [_Shape$types$TRIMESH]() {\n    return this._intersectTrimesh;\n  }\n\n  constructor(from, to) {\n    if (from === void 0) {\n      from = new Vec3();\n    }\n\n    if (to === void 0) {\n      to = new Vec3();\n    }\n\n    this.from = from.clone();\n    this.to = to.clone();\n    this.direction = new Vec3();\n    this.precision = 0.0001;\n    this.checkCollisionResponse = true;\n    this.skipBackfaces = false;\n    this.collisionFilterMask = -1;\n    this.collisionFilterGroup = -1;\n    this.mode = Ray.ANY;\n    this.result = new RaycastResult();\n    this.hasHit = false;\n\n    this.callback = result => {};\n  }\n  /**\n   * Do itersection against all bodies in the given World.\n   * @return True if the ray hit anything, otherwise false.\n   */\n\n\n  intersectWorld(world, options) {\n    this.mode = options.mode || Ray.ANY;\n    this.result = options.result || new RaycastResult();\n    this.skipBackfaces = !!options.skipBackfaces;\n    this.collisionFilterMask = typeof options.collisionFilterMask !== 'undefined' ? options.collisionFilterMask : -1;\n    this.collisionFilterGroup = typeof options.collisionFilterGroup !== 'undefined' ? options.collisionFilterGroup : -1;\n    this.checkCollisionResponse = typeof options.checkCollisionResponse !== 'undefined' ? options.checkCollisionResponse : true;\n\n    if (options.from) {\n      this.from.copy(options.from);\n    }\n\n    if (options.to) {\n      this.to.copy(options.to);\n    }\n\n    this.callback = options.callback || (() => {});\n\n    this.hasHit = false;\n    this.result.reset();\n    this.updateDirection();\n    this.getAABB(tmpAABB$1);\n    tmpArray.length = 0;\n    world.broadphase.aabbQuery(world, tmpAABB$1, tmpArray);\n    this.intersectBodies(tmpArray);\n    return this.hasHit;\n  }\n  /**\n   * Shoot a ray at a body, get back information about the hit.\n   * @deprecated @param result set the result property of the Ray instead.\n   */\n\n\n  intersectBody(body, result) {\n    if (result) {\n      this.result = result;\n      this.updateDirection();\n    }\n\n    const checkCollisionResponse = this.checkCollisionResponse;\n\n    if (checkCollisionResponse && !body.collisionResponse) {\n      return;\n    }\n\n    if ((this.collisionFilterGroup & body.collisionFilterMask) === 0 || (body.collisionFilterGroup & this.collisionFilterMask) === 0) {\n      return;\n    }\n\n    const xi = intersectBody_xi;\n    const qi = intersectBody_qi;\n\n    for (let i = 0, N = body.shapes.length; i < N; i++) {\n      const shape = body.shapes[i];\n\n      if (checkCollisionResponse && !shape.collisionResponse) {\n        continue; // Skip\n      }\n\n      body.quaternion.mult(body.shapeOrientations[i], qi);\n      body.quaternion.vmult(body.shapeOffsets[i], xi);\n      xi.vadd(body.position, xi);\n      this.intersectShape(shape, qi, xi, body);\n\n      if (this.result.shouldStop) {\n        break;\n      }\n    }\n  }\n  /**\n   * Shoot a ray at an array bodies, get back information about the hit.\n   * @param bodies An array of Body objects.\n   * @deprecated @param result set the result property of the Ray instead.\n   *\n   */\n\n\n  intersectBodies(bodies, result) {\n    if (result) {\n      this.result = result;\n      this.updateDirection();\n    }\n\n    for (let i = 0, l = bodies.length; !this.result.shouldStop && i < l; i++) {\n      this.intersectBody(bodies[i]);\n    }\n  }\n  /**\n   * Updates the direction vector.\n   */\n\n\n  updateDirection() {\n    this.to.vsub(this.from, this.direction);\n    this.direction.normalize();\n  }\n\n  intersectShape(shape, quat, position, body) {\n    const from = this.from; // Checking boundingSphere\n\n    const distance = distanceFromIntersection(from, this.direction, position);\n\n    if (distance > shape.boundingSphereRadius) {\n      return;\n    }\n\n    const intersectMethod = this[shape.type];\n\n    if (intersectMethod) {\n      intersectMethod.call(this, shape, quat, position, body, shape);\n    }\n  }\n\n  _intersectBox(box, quat, position, body, reportedShape) {\n    return this._intersectConvex(box.convexPolyhedronRepresentation, quat, position, body, reportedShape);\n  }\n\n  _intersectPlane(shape, quat, position, body, reportedShape) {\n    const from = this.from;\n    const to = this.to;\n    const direction = this.direction; // Get plane normal\n\n    const worldNormal = new Vec3(0, 0, 1);\n    quat.vmult(worldNormal, worldNormal);\n    const len = new Vec3();\n    from.vsub(position, len);\n    const planeToFrom = len.dot(worldNormal);\n    to.vsub(position, len);\n    const planeToTo = len.dot(worldNormal);\n\n    if (planeToFrom * planeToTo > 0) {\n      // \"from\" and \"to\" are on the same side of the plane... bail out\n      return;\n    }\n\n    if (from.distanceTo(to) < planeToFrom) {\n      return;\n    }\n\n    const n_dot_dir = worldNormal.dot(direction);\n\n    if (Math.abs(n_dot_dir) < this.precision) {\n      // No intersection\n      return;\n    }\n\n    const planePointToFrom = new Vec3();\n    const dir_scaled_with_t = new Vec3();\n    const hitPointWorld = new Vec3();\n    from.vsub(position, planePointToFrom);\n    const t = -worldNormal.dot(planePointToFrom) / n_dot_dir;\n    direction.scale(t, dir_scaled_with_t);\n    from.vadd(dir_scaled_with_t, hitPointWorld);\n    this.reportIntersection(worldNormal, hitPointWorld, reportedShape, body, -1);\n  }\n  /**\n   * Get the world AABB of the ray.\n   */\n\n\n  getAABB(aabb) {\n    const {\n      lowerBound,\n      upperBound\n    } = aabb;\n    const to = this.to;\n    const from = this.from;\n    lowerBound.x = Math.min(to.x, from.x);\n    lowerBound.y = Math.min(to.y, from.y);\n    lowerBound.z = Math.min(to.z, from.z);\n    upperBound.x = Math.max(to.x, from.x);\n    upperBound.y = Math.max(to.y, from.y);\n    upperBound.z = Math.max(to.z, from.z);\n  }\n\n  _intersectHeightfield(shape, quat, position, body, reportedShape) {\n    shape.data;\n    shape.elementSize; // Convert the ray to local heightfield coordinates\n\n    const localRay = intersectHeightfield_localRay; //new Ray(this.from, this.to);\n\n    localRay.from.copy(this.from);\n    localRay.to.copy(this.to);\n    Transform.pointToLocalFrame(position, quat, localRay.from, localRay.from);\n    Transform.pointToLocalFrame(position, quat, localRay.to, localRay.to);\n    localRay.updateDirection(); // Get the index of the data points to test against\n\n    const index = intersectHeightfield_index;\n    let iMinX;\n    let iMinY;\n    let iMaxX;\n    let iMaxY; // Set to max\n\n    iMinX = iMinY = 0;\n    iMaxX = iMaxY = shape.data.length - 1;\n    const aabb = new AABB();\n    localRay.getAABB(aabb);\n    shape.getIndexOfPosition(aabb.lowerBound.x, aabb.lowerBound.y, index, true);\n    iMinX = Math.max(iMinX, index[0]);\n    iMinY = Math.max(iMinY, index[1]);\n    shape.getIndexOfPosition(aabb.upperBound.x, aabb.upperBound.y, index, true);\n    iMaxX = Math.min(iMaxX, index[0] + 1);\n    iMaxY = Math.min(iMaxY, index[1] + 1);\n\n    for (let i = iMinX; i < iMaxX; i++) {\n      for (let j = iMinY; j < iMaxY; j++) {\n        if (this.result.shouldStop) {\n          return;\n        }\n\n        shape.getAabbAtIndex(i, j, aabb);\n\n        if (!aabb.overlapsRay(localRay)) {\n          continue;\n        } // Lower triangle\n\n\n        shape.getConvexTrianglePillar(i, j, false);\n        Transform.pointToWorldFrame(position, quat, shape.pillarOffset, worldPillarOffset);\n\n        this._intersectConvex(shape.pillarConvex, quat, worldPillarOffset, body, reportedShape, intersectConvexOptions);\n\n        if (this.result.shouldStop) {\n          return;\n        } // Upper triangle\n\n\n        shape.getConvexTrianglePillar(i, j, true);\n        Transform.pointToWorldFrame(position, quat, shape.pillarOffset, worldPillarOffset);\n\n        this._intersectConvex(shape.pillarConvex, quat, worldPillarOffset, body, reportedShape, intersectConvexOptions);\n      }\n    }\n  }\n\n  _intersectSphere(sphere, quat, position, body, reportedShape) {\n    const from = this.from;\n    const to = this.to;\n    const r = sphere.radius;\n    const a = (to.x - from.x) ** 2 + (to.y - from.y) ** 2 + (to.z - from.z) ** 2;\n    const b = 2 * ((to.x - from.x) * (from.x - position.x) + (to.y - from.y) * (from.y - position.y) + (to.z - from.z) * (from.z - position.z));\n    const c = (from.x - position.x) ** 2 + (from.y - position.y) ** 2 + (from.z - position.z) ** 2 - r ** 2;\n    const delta = b ** 2 - 4 * a * c;\n    const intersectionPoint = Ray_intersectSphere_intersectionPoint;\n    const normal = Ray_intersectSphere_normal;\n\n    if (delta < 0) {\n      // No intersection\n      return;\n    } else if (delta === 0) {\n      // single intersection point\n      from.lerp(to, delta, intersectionPoint);\n      intersectionPoint.vsub(position, normal);\n      normal.normalize();\n      this.reportIntersection(normal, intersectionPoint, reportedShape, body, -1);\n    } else {\n      const d1 = (-b - Math.sqrt(delta)) / (2 * a);\n      const d2 = (-b + Math.sqrt(delta)) / (2 * a);\n\n      if (d1 >= 0 && d1 <= 1) {\n        from.lerp(to, d1, intersectionPoint);\n        intersectionPoint.vsub(position, normal);\n        normal.normalize();\n        this.reportIntersection(normal, intersectionPoint, reportedShape, body, -1);\n      }\n\n      if (this.result.shouldStop) {\n        return;\n      }\n\n      if (d2 >= 0 && d2 <= 1) {\n        from.lerp(to, d2, intersectionPoint);\n        intersectionPoint.vsub(position, normal);\n        normal.normalize();\n        this.reportIntersection(normal, intersectionPoint, reportedShape, body, -1);\n      }\n    }\n  }\n\n  _intersectConvex(shape, quat, position, body, reportedShape, options) {\n    intersectConvex_minDistNormal;\n    const normal = intersectConvex_normal;\n    const vector = intersectConvex_vector;\n    intersectConvex_minDistIntersect;\n    const faceList = options && options.faceList || null; // Checking faces\n\n    const faces = shape.faces;\n    const vertices = shape.vertices;\n    const normals = shape.faceNormals;\n    const direction = this.direction;\n    const from = this.from;\n    const to = this.to;\n    const fromToDistance = from.distanceTo(to);\n    const Nfaces = faceList ? faceList.length : faces.length;\n    const result = this.result;\n\n    for (let j = 0; !result.shouldStop && j < Nfaces; j++) {\n      const fi = faceList ? faceList[j] : j;\n      const face = faces[fi];\n      const faceNormal = normals[fi];\n      const q = quat;\n      const x = position; // determine if ray intersects the plane of the face\n      // note: this works regardless of the direction of the face normal\n      // Get plane point in world coordinates...\n\n      vector.copy(vertices[face[0]]);\n      q.vmult(vector, vector);\n      vector.vadd(x, vector); // ...but make it relative to the ray from. We'll fix this later.\n\n      vector.vsub(from, vector); // Get plane normal\n\n      q.vmult(faceNormal, normal); // If this dot product is negative, we have something interesting\n\n      const dot = direction.dot(normal); // Bail out if ray and plane are parallel\n\n      if (Math.abs(dot) < this.precision) {\n        continue;\n      } // calc distance to plane\n\n\n      const scalar = normal.dot(vector) / dot; // if negative distance, then plane is behind ray\n\n      if (scalar < 0) {\n        continue;\n      } // if (dot < 0) {\n      // Intersection point is from + direction * scalar\n\n\n      direction.scale(scalar, intersectPoint);\n      intersectPoint.vadd(from, intersectPoint); // a is the point we compare points b and c with.\n\n      a.copy(vertices[face[0]]);\n      q.vmult(a, a);\n      x.vadd(a, a);\n\n      for (let i = 1; !result.shouldStop && i < face.length - 1; i++) {\n        // Transform 3 vertices to world coords\n        b.copy(vertices[face[i]]);\n        c.copy(vertices[face[i + 1]]);\n        q.vmult(b, b);\n        q.vmult(c, c);\n        x.vadd(b, b);\n        x.vadd(c, c);\n        const distance = intersectPoint.distanceTo(from);\n\n        if (!(Ray.pointInTriangle(intersectPoint, a, b, c) || Ray.pointInTriangle(intersectPoint, b, a, c)) || distance > fromToDistance) {\n          continue;\n        }\n\n        this.reportIntersection(normal, intersectPoint, reportedShape, body, fi);\n      } // }\n\n    }\n  }\n  /**\n   * @todo Optimize by transforming the world to local space first.\n   * @todo Use Octree lookup\n   */\n\n\n  _intersectTrimesh(mesh, quat, position, body, reportedShape, options) {\n    const normal = intersectTrimesh_normal;\n    const triangles = intersectTrimesh_triangles;\n    const treeTransform = intersectTrimesh_treeTransform;\n    const vector = intersectConvex_vector;\n    const localDirection = intersectTrimesh_localDirection;\n    const localFrom = intersectTrimesh_localFrom;\n    const localTo = intersectTrimesh_localTo;\n    const worldIntersectPoint = intersectTrimesh_worldIntersectPoint;\n    const worldNormal = intersectTrimesh_worldNormal; // Checking faces\n\n    const indices = mesh.indices;\n    mesh.vertices; // const normals = mesh.faceNormals\n\n    const from = this.from;\n    const to = this.to;\n    const direction = this.direction;\n    treeTransform.position.copy(position);\n    treeTransform.quaternion.copy(quat); // Transform ray to local space!\n\n    Transform.vectorToLocalFrame(position, quat, direction, localDirection);\n    Transform.pointToLocalFrame(position, quat, from, localFrom);\n    Transform.pointToLocalFrame(position, quat, to, localTo);\n    localTo.x *= mesh.scale.x;\n    localTo.y *= mesh.scale.y;\n    localTo.z *= mesh.scale.z;\n    localFrom.x *= mesh.scale.x;\n    localFrom.y *= mesh.scale.y;\n    localFrom.z *= mesh.scale.z;\n    localTo.vsub(localFrom, localDirection);\n    localDirection.normalize();\n    const fromToDistanceSquared = localFrom.distanceSquared(localTo);\n    mesh.tree.rayQuery(this, treeTransform, triangles);\n\n    for (let i = 0, N = triangles.length; !this.result.shouldStop && i !== N; i++) {\n      const trianglesIndex = triangles[i];\n      mesh.getNormal(trianglesIndex, normal); // determine if ray intersects the plane of the face\n      // note: this works regardless of the direction of the face normal\n      // Get plane point in world coordinates...\n\n      mesh.getVertex(indices[trianglesIndex * 3], a); // ...but make it relative to the ray from. We'll fix this later.\n\n      a.vsub(localFrom, vector); // If this dot product is negative, we have something interesting\n\n      const dot = localDirection.dot(normal); // Bail out if ray and plane are parallel\n      // if (Math.abs( dot ) < this.precision){\n      //     continue;\n      // }\n      // calc distance to plane\n\n      const scalar = normal.dot(vector) / dot; // if negative distance, then plane is behind ray\n\n      if (scalar < 0) {\n        continue;\n      } // Intersection point is from + direction * scalar\n\n\n      localDirection.scale(scalar, intersectPoint);\n      intersectPoint.vadd(localFrom, intersectPoint); // Get triangle vertices\n\n      mesh.getVertex(indices[trianglesIndex * 3 + 1], b);\n      mesh.getVertex(indices[trianglesIndex * 3 + 2], c);\n      const squaredDistance = intersectPoint.distanceSquared(localFrom);\n\n      if (!(Ray.pointInTriangle(intersectPoint, b, a, c) || Ray.pointInTriangle(intersectPoint, a, b, c)) || squaredDistance > fromToDistanceSquared) {\n        continue;\n      } // transform intersectpoint and normal to world\n\n\n      Transform.vectorToWorldFrame(quat, normal, worldNormal);\n      Transform.pointToWorldFrame(position, quat, intersectPoint, worldIntersectPoint);\n      this.reportIntersection(worldNormal, worldIntersectPoint, reportedShape, body, trianglesIndex);\n    }\n\n    triangles.length = 0;\n  }\n  /**\n   * @return True if the intersections should continue\n   */\n\n\n  reportIntersection(normal, hitPointWorld, shape, body, hitFaceIndex) {\n    const from = this.from;\n    const to = this.to;\n    const distance = from.distanceTo(hitPointWorld);\n    const result = this.result; // Skip back faces?\n\n    if (this.skipBackfaces && normal.dot(this.direction) > 0) {\n      return;\n    }\n\n    result.hitFaceIndex = typeof hitFaceIndex !== 'undefined' ? hitFaceIndex : -1;\n\n    switch (this.mode) {\n      case Ray.ALL:\n        this.hasHit = true;\n        result.set(from, to, normal, hitPointWorld, shape, body, distance);\n        result.hasHit = true;\n        this.callback(result);\n        break;\n\n      case Ray.CLOSEST:\n        // Store if closer than current closest\n        if (distance < result.distance || !result.hasHit) {\n          this.hasHit = true;\n          result.hasHit = true;\n          result.set(from, to, normal, hitPointWorld, shape, body, distance);\n        }\n\n        break;\n\n      case Ray.ANY:\n        // Report and stop.\n        this.hasHit = true;\n        result.hasHit = true;\n        result.set(from, to, normal, hitPointWorld, shape, body, distance);\n        result.shouldStop = true;\n        break;\n    }\n  }\n  /**\n   * As per \"Barycentric Technique\" as named\n   * {@link https://www.blackpawn.com/texts/pointinpoly/default.html here} but without the division\n   */\n\n\n  static pointInTriangle(p, a, b, c) {\n    c.vsub(a, v0);\n    b.vsub(a, v1);\n    p.vsub(a, v2);\n    const dot00 = v0.dot(v0);\n    const dot01 = v0.dot(v1);\n    const dot02 = v0.dot(v2);\n    const dot11 = v1.dot(v1);\n    const dot12 = v1.dot(v2);\n    let u;\n    let v;\n    return (u = dot11 * dot02 - dot01 * dot12) >= 0 && (v = dot00 * dot12 - dot01 * dot02) >= 0 && u + v < dot00 * dot11 - dot01 * dot01;\n  }\n\n}\nRay.CLOSEST = RAY_MODES.CLOSEST;\nRay.ANY = RAY_MODES.ANY;\nRay.ALL = RAY_MODES.ALL;\nconst tmpAABB$1 = new AABB();\nconst tmpArray = [];\nconst v1 = new Vec3();\nconst v2 = new Vec3();\nconst intersectBody_xi = new Vec3();\nconst intersectBody_qi = new Quaternion();\nconst intersectPoint = new Vec3();\nconst a = new Vec3();\nconst b = new Vec3();\nconst c = new Vec3();\nnew Vec3();\nnew RaycastResult();\nconst intersectConvexOptions = {\n  faceList: [0]\n};\nconst worldPillarOffset = new Vec3();\nconst intersectHeightfield_localRay = new Ray();\nconst intersectHeightfield_index = [];\nconst Ray_intersectSphere_intersectionPoint = new Vec3();\nconst Ray_intersectSphere_normal = new Vec3();\nconst intersectConvex_normal = new Vec3();\nconst intersectConvex_minDistNormal = new Vec3();\nconst intersectConvex_minDistIntersect = new Vec3();\nconst intersectConvex_vector = new Vec3();\nconst intersectTrimesh_normal = new Vec3();\nconst intersectTrimesh_localDirection = new Vec3();\nconst intersectTrimesh_localFrom = new Vec3();\nconst intersectTrimesh_localTo = new Vec3();\nconst intersectTrimesh_worldNormal = new Vec3();\nconst intersectTrimesh_worldIntersectPoint = new Vec3();\nnew AABB();\nconst intersectTrimesh_triangles = [];\nconst intersectTrimesh_treeTransform = new Transform();\nconst v0 = new Vec3();\nconst intersect = new Vec3();\n\nfunction distanceFromIntersection(from, direction, position) {\n  // v0 is vector from from to position\n  position.vsub(from, v0);\n  const dot = v0.dot(direction); // intersect = direction*dot + from\n\n  direction.scale(dot, intersect);\n  intersect.vadd(from, intersect);\n  const distance = position.distanceTo(intersect);\n  return distance;\n}\n\n/**\n * Sweep and prune broadphase along one axis.\n */\nclass SAPBroadphase extends Broadphase {\n  /**\n   * List of bodies currently in the broadphase.\n   */\n\n  /**\n   * The world to search in.\n   */\n\n  /**\n   * Axis to sort the bodies along.\n   * Set to 0 for x axis, and 1 for y axis.\n   * For best performance, pick the axis where bodies are most distributed.\n   */\n\n  /**\n   * Check if the bounds of two bodies overlap, along the given SAP axis.\n   */\n  static checkBounds(bi, bj, axisIndex) {\n    let biPos;\n    let bjPos;\n\n    if (axisIndex === 0) {\n      biPos = bi.position.x;\n      bjPos = bj.position.x;\n    } else if (axisIndex === 1) {\n      biPos = bi.position.y;\n      bjPos = bj.position.y;\n    } else if (axisIndex === 2) {\n      biPos = bi.position.z;\n      bjPos = bj.position.z;\n    }\n\n    const ri = bi.boundingRadius,\n          rj = bj.boundingRadius,\n          boundA2 = biPos + ri,\n          boundB1 = bjPos - rj;\n    return boundB1 < boundA2;\n  } // Note: these are identical, save for x/y/z lowerbound\n\n  /**\n   * insertionSortX\n   */\n\n\n  static insertionSortX(a) {\n    for (let i = 1, l = a.length; i < l; i++) {\n      const v = a[i];\n      let j;\n\n      for (j = i - 1; j >= 0; j--) {\n        if (a[j].aabb.lowerBound.x <= v.aabb.lowerBound.x) {\n          break;\n        }\n\n        a[j + 1] = a[j];\n      }\n\n      a[j + 1] = v;\n    }\n\n    return a;\n  }\n  /**\n   * insertionSortY\n   */\n\n\n  static insertionSortY(a) {\n    for (let i = 1, l = a.length; i < l; i++) {\n      const v = a[i];\n      let j;\n\n      for (j = i - 1; j >= 0; j--) {\n        if (a[j].aabb.lowerBound.y <= v.aabb.lowerBound.y) {\n          break;\n        }\n\n        a[j + 1] = a[j];\n      }\n\n      a[j + 1] = v;\n    }\n\n    return a;\n  }\n  /**\n   * insertionSortZ\n   */\n\n\n  static insertionSortZ(a) {\n    for (let i = 1, l = a.length; i < l; i++) {\n      const v = a[i];\n      let j;\n\n      for (j = i - 1; j >= 0; j--) {\n        if (a[j].aabb.lowerBound.z <= v.aabb.lowerBound.z) {\n          break;\n        }\n\n        a[j + 1] = a[j];\n      }\n\n      a[j + 1] = v;\n    }\n\n    return a;\n  }\n\n  constructor(world) {\n    super();\n    this.axisList = [];\n    this.world = null;\n    this.axisIndex = 0;\n    const axisList = this.axisList;\n\n    this._addBodyHandler = event => {\n      axisList.push(event.body);\n    };\n\n    this._removeBodyHandler = event => {\n      const idx = axisList.indexOf(event.body);\n\n      if (idx !== -1) {\n        axisList.splice(idx, 1);\n      }\n    };\n\n    if (world) {\n      this.setWorld(world);\n    }\n  }\n  /**\n   * Change the world\n   */\n\n\n  setWorld(world) {\n    // Clear the old axis array\n    this.axisList.length = 0; // Add all bodies from the new world\n\n    for (let i = 0; i < world.bodies.length; i++) {\n      this.axisList.push(world.bodies[i]);\n    } // Remove old handlers, if any\n\n\n    world.removeEventListener('addBody', this._addBodyHandler);\n    world.removeEventListener('removeBody', this._removeBodyHandler); // Add handlers to update the list of bodies.\n\n    world.addEventListener('addBody', this._addBodyHandler);\n    world.addEventListener('removeBody', this._removeBodyHandler);\n    this.world = world;\n    this.dirty = true;\n  }\n  /**\n   * Collect all collision pairs\n   */\n\n\n  collisionPairs(world, p1, p2) {\n    const bodies = this.axisList;\n    const N = bodies.length;\n    const axisIndex = this.axisIndex;\n    let i;\n    let j;\n\n    if (this.dirty) {\n      this.sortList();\n      this.dirty = false;\n    } // Look through the list\n\n\n    for (i = 0; i !== N; i++) {\n      const bi = bodies[i];\n\n      for (j = i + 1; j < N; j++) {\n        const bj = bodies[j];\n\n        if (!this.needBroadphaseCollision(bi, bj)) {\n          continue;\n        }\n\n        if (!SAPBroadphase.checkBounds(bi, bj, axisIndex)) {\n          break;\n        }\n\n        this.intersectionTest(bi, bj, p1, p2);\n      }\n    }\n  }\n\n  sortList() {\n    const axisList = this.axisList;\n    const axisIndex = this.axisIndex;\n    const N = axisList.length; // Update AABBs\n\n    for (let i = 0; i !== N; i++) {\n      const bi = axisList[i];\n\n      if (bi.aabbNeedsUpdate) {\n        bi.updateAABB();\n      }\n    } // Sort the list\n\n\n    if (axisIndex === 0) {\n      SAPBroadphase.insertionSortX(axisList);\n    } else if (axisIndex === 1) {\n      SAPBroadphase.insertionSortY(axisList);\n    } else if (axisIndex === 2) {\n      SAPBroadphase.insertionSortZ(axisList);\n    }\n  }\n  /**\n   * Computes the variance of the body positions and estimates the best axis to use.\n   * Will automatically set property `axisIndex`.\n   */\n\n\n  autoDetectAxis() {\n    let sumX = 0;\n    let sumX2 = 0;\n    let sumY = 0;\n    let sumY2 = 0;\n    let sumZ = 0;\n    let sumZ2 = 0;\n    const bodies = this.axisList;\n    const N = bodies.length;\n    const invN = 1 / N;\n\n    for (let i = 0; i !== N; i++) {\n      const b = bodies[i];\n      const centerX = b.position.x;\n      sumX += centerX;\n      sumX2 += centerX * centerX;\n      const centerY = b.position.y;\n      sumY += centerY;\n      sumY2 += centerY * centerY;\n      const centerZ = b.position.z;\n      sumZ += centerZ;\n      sumZ2 += centerZ * centerZ;\n    }\n\n    const varianceX = sumX2 - sumX * sumX * invN;\n    const varianceY = sumY2 - sumY * sumY * invN;\n    const varianceZ = sumZ2 - sumZ * sumZ * invN;\n\n    if (varianceX > varianceY) {\n      if (varianceX > varianceZ) {\n        this.axisIndex = 0;\n      } else {\n        this.axisIndex = 2;\n      }\n    } else if (varianceY > varianceZ) {\n      this.axisIndex = 1;\n    } else {\n      this.axisIndex = 2;\n    }\n  }\n  /**\n   * Returns all the bodies within an AABB.\n   * @param result An array to store resulting bodies in.\n   */\n\n\n  aabbQuery(world, aabb, result) {\n    if (result === void 0) {\n      result = [];\n    }\n\n    if (this.dirty) {\n      this.sortList();\n      this.dirty = false;\n    }\n\n    const axisIndex = this.axisIndex;\n    let axis = 'x';\n\n    if (axisIndex === 1) {\n      axis = 'y';\n    }\n\n    if (axisIndex === 2) {\n      axis = 'z';\n    }\n\n    const axisList = this.axisList;\n    aabb.lowerBound[axis];\n    aabb.upperBound[axis];\n\n    for (let i = 0; i < axisList.length; i++) {\n      const b = axisList[i];\n\n      if (b.aabbNeedsUpdate) {\n        b.updateAABB();\n      }\n\n      if (b.aabb.overlaps(aabb)) {\n        result.push(b);\n      }\n    }\n\n    return result;\n  }\n\n}\n\nclass Utils {\n  /**\n   * Extend an options object with default values.\n   * @param options The options object. May be falsy: in this case, a new object is created and returned.\n   * @param defaults An object containing default values.\n   * @return The modified options object.\n   */\n  static defaults(options, defaults) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    for (let key in defaults) {\n      if (!(key in options)) {\n        options[key] = defaults[key];\n      }\n    }\n\n    return options;\n  }\n\n}\n\n/**\n * Constraint base class\n */\nclass Constraint {\n  /**\n   * Equations to be solved in this constraint.\n   */\n\n  /**\n   * Body A.\n   */\n\n  /**\n   * Body B.\n   */\n\n  /**\n   * Set to false if you don't want the bodies to collide when they are connected.\n   */\n  constructor(bodyA, bodyB, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    options = Utils.defaults(options, {\n      collideConnected: true,\n      wakeUpBodies: true\n    });\n    this.equations = [];\n    this.bodyA = bodyA;\n    this.bodyB = bodyB;\n    this.id = Constraint.idCounter++;\n    this.collideConnected = options.collideConnected;\n\n    if (options.wakeUpBodies) {\n      if (bodyA) {\n        bodyA.wakeUp();\n      }\n\n      if (bodyB) {\n        bodyB.wakeUp();\n      }\n    }\n  }\n  /**\n   * Update all the equations with data.\n   */\n\n\n  update() {\n    throw new Error('method update() not implmemented in this Constraint subclass!');\n  }\n  /**\n   * Enables all equations in the constraint.\n   */\n\n\n  enable() {\n    const eqs = this.equations;\n\n    for (let i = 0; i < eqs.length; i++) {\n      eqs[i].enabled = true;\n    }\n  }\n  /**\n   * Disables all equations in the constraint.\n   */\n\n\n  disable() {\n    const eqs = this.equations;\n\n    for (let i = 0; i < eqs.length; i++) {\n      eqs[i].enabled = false;\n    }\n  }\n\n}\nConstraint.idCounter = 0;\n\n/**\n * An element containing 6 entries, 3 spatial and 3 rotational degrees of freedom.\n */\n\nclass JacobianElement {\n  /**\n   * spatial\n   */\n\n  /**\n   * rotational\n   */\n  constructor() {\n    this.spatial = new Vec3();\n    this.rotational = new Vec3();\n  }\n  /**\n   * Multiply with other JacobianElement\n   */\n\n\n  multiplyElement(element) {\n    return element.spatial.dot(this.spatial) + element.rotational.dot(this.rotational);\n  }\n  /**\n   * Multiply with two vectors\n   */\n\n\n  multiplyVectors(spatial, rotational) {\n    return spatial.dot(this.spatial) + rotational.dot(this.rotational);\n  }\n\n}\n\n/**\n * Equation base class.\n *\n * `a`, `b` and `eps` are {@link https://www8.cs.umu.se/kurser/5DV058/VT15/lectures/SPOOKlabnotes.pdf SPOOK} parameters that default to `0.0`. See {@link https://github.com/schteppe/cannon.js/issues/238#issuecomment-147172327 this exchange} for more details on Cannon's physics implementation.\n */\nclass Equation {\n  /**\n   * Minimum (read: negative max) force to be applied by the constraint.\n   */\n\n  /**\n   * Maximum (read: positive max) force to be applied by the constraint.\n   */\n\n  /**\n   * SPOOK parameter\n   */\n\n  /**\n   * SPOOK parameter\n   */\n\n  /**\n   * SPOOK parameter\n   */\n\n  /**\n   * A number, proportional to the force added to the bodies.\n   */\n  constructor(bi, bj, minForce, maxForce) {\n    if (minForce === void 0) {\n      minForce = -1e6;\n    }\n\n    if (maxForce === void 0) {\n      maxForce = 1e6;\n    }\n\n    this.id = Equation.idCounter++;\n    this.minForce = minForce;\n    this.maxForce = maxForce;\n    this.bi = bi;\n    this.bj = bj;\n    this.a = 0.0; // SPOOK parameter\n\n    this.b = 0.0; // SPOOK parameter\n\n    this.eps = 0.0; // SPOOK parameter\n\n    this.jacobianElementA = new JacobianElement();\n    this.jacobianElementB = new JacobianElement();\n    this.enabled = true;\n    this.multiplier = 0;\n    this.setSpookParams(1e7, 4, 1 / 60); // Set typical spook params\n  }\n  /**\n   * Recalculates a, b, and eps.\n   *\n   * The Equation constructor sets typical SPOOK parameters as such:\n   * * `stiffness` = 1e7\n   * * `relaxation` = 4\n   * * `timeStep`= 1 / 60, _note the hardcoded refresh rate._\n   */\n\n\n  setSpookParams(stiffness, relaxation, timeStep) {\n    const d = relaxation;\n    const k = stiffness;\n    const h = timeStep;\n    this.a = 4.0 / (h * (1 + 4 * d));\n    this.b = 4.0 * d / (1 + 4 * d);\n    this.eps = 4.0 / (h * h * k * (1 + 4 * d));\n  }\n  /**\n   * Computes the right hand side of the SPOOK equation\n   */\n\n\n  computeB(a, b, h) {\n    const GW = this.computeGW();\n    const Gq = this.computeGq();\n    const GiMf = this.computeGiMf();\n    return -Gq * a - GW * b - GiMf * h;\n  }\n  /**\n   * Computes G*q, where q are the generalized body coordinates\n   */\n\n\n  computeGq() {\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB;\n    const bi = this.bi;\n    const bj = this.bj;\n    const xi = bi.position;\n    const xj = bj.position;\n    return GA.spatial.dot(xi) + GB.spatial.dot(xj);\n  }\n  /**\n   * Computes G*W, where W are the body velocities\n   */\n\n\n  computeGW() {\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB;\n    const bi = this.bi;\n    const bj = this.bj;\n    const vi = bi.velocity;\n    const vj = bj.velocity;\n    const wi = bi.angularVelocity;\n    const wj = bj.angularVelocity;\n    return GA.multiplyVectors(vi, wi) + GB.multiplyVectors(vj, wj);\n  }\n  /**\n   * Computes G*Wlambda, where W are the body velocities\n   */\n\n\n  computeGWlambda() {\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB;\n    const bi = this.bi;\n    const bj = this.bj;\n    const vi = bi.vlambda;\n    const vj = bj.vlambda;\n    const wi = bi.wlambda;\n    const wj = bj.wlambda;\n    return GA.multiplyVectors(vi, wi) + GB.multiplyVectors(vj, wj);\n  }\n  /**\n   * Computes G*inv(M)*f, where M is the mass matrix with diagonal blocks for each body, and f are the forces on the bodies.\n   */\n\n\n  computeGiMf() {\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB;\n    const bi = this.bi;\n    const bj = this.bj;\n    const fi = bi.force;\n    const ti = bi.torque;\n    const fj = bj.force;\n    const tj = bj.torque;\n    const invMassi = bi.invMassSolve;\n    const invMassj = bj.invMassSolve;\n    fi.scale(invMassi, iMfi);\n    fj.scale(invMassj, iMfj);\n    bi.invInertiaWorldSolve.vmult(ti, invIi_vmult_taui);\n    bj.invInertiaWorldSolve.vmult(tj, invIj_vmult_tauj);\n    return GA.multiplyVectors(iMfi, invIi_vmult_taui) + GB.multiplyVectors(iMfj, invIj_vmult_tauj);\n  }\n  /**\n   * Computes G*inv(M)*G'\n   */\n\n\n  computeGiMGt() {\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB;\n    const bi = this.bi;\n    const bj = this.bj;\n    const invMassi = bi.invMassSolve;\n    const invMassj = bj.invMassSolve;\n    const invIi = bi.invInertiaWorldSolve;\n    const invIj = bj.invInertiaWorldSolve;\n    let result = invMassi + invMassj;\n    invIi.vmult(GA.rotational, tmp);\n    result += tmp.dot(GA.rotational);\n    invIj.vmult(GB.rotational, tmp);\n    result += tmp.dot(GB.rotational);\n    return result;\n  }\n  /**\n   * Add constraint velocity to the bodies.\n   */\n\n\n  addToWlambda(deltalambda) {\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB;\n    const bi = this.bi;\n    const bj = this.bj;\n    const temp = addToWlambda_temp; // Add to linear velocity\n    // v_lambda += inv(M) * delta_lamba * G\n\n    bi.vlambda.addScaledVector(bi.invMassSolve * deltalambda, GA.spatial, bi.vlambda);\n    bj.vlambda.addScaledVector(bj.invMassSolve * deltalambda, GB.spatial, bj.vlambda); // Add to angular velocity\n\n    bi.invInertiaWorldSolve.vmult(GA.rotational, temp);\n    bi.wlambda.addScaledVector(deltalambda, temp, bi.wlambda);\n    bj.invInertiaWorldSolve.vmult(GB.rotational, temp);\n    bj.wlambda.addScaledVector(deltalambda, temp, bj.wlambda);\n  }\n  /**\n   * Compute the denominator part of the SPOOK equation: C = G*inv(M)*G' + eps\n   */\n\n\n  computeC() {\n    return this.computeGiMGt() + this.eps;\n  }\n\n}\nEquation.idCounter = 0;\nconst iMfi = new Vec3();\nconst iMfj = new Vec3();\nconst invIi_vmult_taui = new Vec3();\nconst invIj_vmult_tauj = new Vec3();\nconst tmp = new Vec3();\nconst addToWlambda_temp = new Vec3();\n\n/**\n * Contact/non-penetration constraint equation\n */\nclass ContactEquation extends Equation {\n  /**\n   * \"bounciness\": u1 = -e*u0\n   */\n\n  /**\n   * World-oriented vector that goes from the center of bi to the contact point.\n   */\n\n  /**\n   * World-oriented vector that starts in body j position and goes to the contact point.\n   */\n\n  /**\n   * Contact normal, pointing out of body i.\n   */\n  constructor(bodyA, bodyB, maxForce) {\n    if (maxForce === void 0) {\n      maxForce = 1e6;\n    }\n\n    super(bodyA, bodyB, 0, maxForce);\n    this.restitution = 0.0;\n    this.ri = new Vec3();\n    this.rj = new Vec3();\n    this.ni = new Vec3();\n  }\n\n  computeB(h) {\n    const a = this.a;\n    const b = this.b;\n    const bi = this.bi;\n    const bj = this.bj;\n    const ri = this.ri;\n    const rj = this.rj;\n    const rixn = ContactEquation_computeB_temp1;\n    const rjxn = ContactEquation_computeB_temp2;\n    const vi = bi.velocity;\n    const wi = bi.angularVelocity;\n    bi.force;\n    bi.torque;\n    const vj = bj.velocity;\n    const wj = bj.angularVelocity;\n    bj.force;\n    bj.torque;\n    const penetrationVec = ContactEquation_computeB_temp3;\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB;\n    const n = this.ni; // Caluclate cross products\n\n    ri.cross(n, rixn);\n    rj.cross(n, rjxn); // g = xj+rj -(xi+ri)\n    // G = [ -ni  -rixn  ni  rjxn ]\n\n    n.negate(GA.spatial);\n    rixn.negate(GA.rotational);\n    GB.spatial.copy(n);\n    GB.rotational.copy(rjxn); // Calculate the penetration vector\n\n    penetrationVec.copy(bj.position);\n    penetrationVec.vadd(rj, penetrationVec);\n    penetrationVec.vsub(bi.position, penetrationVec);\n    penetrationVec.vsub(ri, penetrationVec);\n    const g = n.dot(penetrationVec); // Compute iteration\n\n    const ePlusOne = this.restitution + 1;\n    const GW = ePlusOne * vj.dot(n) - ePlusOne * vi.dot(n) + wj.dot(rjxn) - wi.dot(rixn);\n    const GiMf = this.computeGiMf();\n    const B = -g * a - GW * b - h * GiMf;\n    return B;\n  }\n  /**\n   * Get the current relative velocity in the contact point.\n   */\n\n\n  getImpactVelocityAlongNormal() {\n    const vi = ContactEquation_getImpactVelocityAlongNormal_vi;\n    const vj = ContactEquation_getImpactVelocityAlongNormal_vj;\n    const xi = ContactEquation_getImpactVelocityAlongNormal_xi;\n    const xj = ContactEquation_getImpactVelocityAlongNormal_xj;\n    const relVel = ContactEquation_getImpactVelocityAlongNormal_relVel;\n    this.bi.position.vadd(this.ri, xi);\n    this.bj.position.vadd(this.rj, xj);\n    this.bi.getVelocityAtWorldPoint(xi, vi);\n    this.bj.getVelocityAtWorldPoint(xj, vj);\n    vi.vsub(vj, relVel);\n    return this.ni.dot(relVel);\n  }\n\n}\nconst ContactEquation_computeB_temp1 = new Vec3(); // Temp vectors\n\nconst ContactEquation_computeB_temp2 = new Vec3();\nconst ContactEquation_computeB_temp3 = new Vec3();\nconst ContactEquation_getImpactVelocityAlongNormal_vi = new Vec3();\nconst ContactEquation_getImpactVelocityAlongNormal_vj = new Vec3();\nconst ContactEquation_getImpactVelocityAlongNormal_xi = new Vec3();\nconst ContactEquation_getImpactVelocityAlongNormal_xj = new Vec3();\nconst ContactEquation_getImpactVelocityAlongNormal_relVel = new Vec3();\n\n/**\n * Connects two bodies at given offset points.\n * @example\n *     const bodyA = new Body({ mass: 1 })\n *     const bodyB = new Body({ mass: 1 })\n *     bodyA.position.set(-1, 0, 0)\n *     bodyB.position.set(1, 0, 0)\n *     bodyA.addShape(shapeA)\n *     bodyB.addShape(shapeB)\n *     world.addBody(bodyA)\n *     world.addBody(bodyB)\n *     const localPivotA = new Vec3(1, 0, 0)\n *     const localPivotB = new Vec3(-1, 0, 0)\n *     const constraint = new PointToPointConstraint(bodyA, localPivotA, bodyB, localPivotB)\n *     world.addConstraint(constraint)\n */\nclass PointToPointConstraint extends Constraint {\n  /**\n   * Pivot, defined locally in bodyA.\n   */\n\n  /**\n   * Pivot, defined locally in bodyB.\n   */\n\n  /**\n   * @param pivotA The point relative to the center of mass of bodyA which bodyA is constrained to.\n   * @param bodyB Body that will be constrained in a similar way to the same point as bodyA. We will therefore get a link between bodyA and bodyB. If not specified, bodyA will be constrained to a static point.\n   * @param pivotB The point relative to the center of mass of bodyB which bodyB is constrained to.\n   * @param maxForce The maximum force that should be applied to constrain the bodies.\n   */\n  constructor(bodyA, pivotA, bodyB, pivotB, maxForce) {\n    if (pivotA === void 0) {\n      pivotA = new Vec3();\n    }\n\n    if (pivotB === void 0) {\n      pivotB = new Vec3();\n    }\n\n    if (maxForce === void 0) {\n      maxForce = 1e6;\n    }\n\n    super(bodyA, bodyB);\n    this.pivotA = pivotA.clone();\n    this.pivotB = pivotB.clone();\n    const x = this.equationX = new ContactEquation(bodyA, bodyB);\n    const y = this.equationY = new ContactEquation(bodyA, bodyB);\n    const z = this.equationZ = new ContactEquation(bodyA, bodyB); // Equations to be fed to the solver\n\n    this.equations.push(x, y, z); // Make the equations bidirectional\n\n    x.minForce = y.minForce = z.minForce = -maxForce;\n    x.maxForce = y.maxForce = z.maxForce = maxForce;\n    x.ni.set(1, 0, 0);\n    y.ni.set(0, 1, 0);\n    z.ni.set(0, 0, 1);\n  }\n\n  update() {\n    const bodyA = this.bodyA;\n    const bodyB = this.bodyB;\n    const x = this.equationX;\n    const y = this.equationY;\n    const z = this.equationZ; // Rotate the pivots to world space\n\n    bodyA.quaternion.vmult(this.pivotA, x.ri);\n    bodyB.quaternion.vmult(this.pivotB, x.rj);\n    y.ri.copy(x.ri);\n    y.rj.copy(x.rj);\n    z.ri.copy(x.ri);\n    z.rj.copy(x.rj);\n  }\n\n}\n\n/**\n * Cone equation. Works to keep the given body world vectors aligned, or tilted within a given angle from each other.\n */\nclass ConeEquation extends Equation {\n  /**\n   * Local axis in A\n   */\n\n  /**\n   * Local axis in B\n   */\n\n  /**\n   * The \"cone angle\" to keep\n   */\n  constructor(bodyA, bodyB, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    const maxForce = typeof options.maxForce !== 'undefined' ? options.maxForce : 1e6;\n    super(bodyA, bodyB, -maxForce, maxForce);\n    this.axisA = options.axisA ? options.axisA.clone() : new Vec3(1, 0, 0);\n    this.axisB = options.axisB ? options.axisB.clone() : new Vec3(0, 1, 0);\n    this.angle = typeof options.angle !== 'undefined' ? options.angle : 0;\n  }\n\n  computeB(h) {\n    const a = this.a;\n    const b = this.b;\n    const ni = this.axisA;\n    const nj = this.axisB;\n    const nixnj = tmpVec1$2;\n    const njxni = tmpVec2$2;\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB; // Caluclate cross products\n\n    ni.cross(nj, nixnj);\n    nj.cross(ni, njxni); // The angle between two vector is:\n    // cos(theta) = a * b / (length(a) * length(b) = { len(a) = len(b) = 1 } = a * b\n    // g = a * b\n    // gdot = (b x a) * wi + (a x b) * wj\n    // G = [0 bxa 0 axb]\n    // W = [vi wi vj wj]\n\n    GA.rotational.copy(njxni);\n    GB.rotational.copy(nixnj);\n    const g = Math.cos(this.angle) - ni.dot(nj);\n    const GW = this.computeGW();\n    const GiMf = this.computeGiMf();\n    const B = -g * a - GW * b - h * GiMf;\n    return B;\n  }\n\n}\nconst tmpVec1$2 = new Vec3();\nconst tmpVec2$2 = new Vec3();\n\n/**\n * Rotational constraint. Works to keep the local vectors orthogonal to each other in world space.\n */\nclass RotationalEquation extends Equation {\n  /**\n   * World oriented rotational axis.\n   */\n\n  /**\n   * World oriented rotational axis.\n   */\n\n  /**\n   * maxAngle\n   */\n  constructor(bodyA, bodyB, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    const maxForce = typeof options.maxForce !== 'undefined' ? options.maxForce : 1e6;\n    super(bodyA, bodyB, -maxForce, maxForce);\n    this.axisA = options.axisA ? options.axisA.clone() : new Vec3(1, 0, 0);\n    this.axisB = options.axisB ? options.axisB.clone() : new Vec3(0, 1, 0);\n    this.maxAngle = Math.PI / 2;\n  }\n\n  computeB(h) {\n    const a = this.a;\n    const b = this.b;\n    const ni = this.axisA;\n    const nj = this.axisB;\n    const nixnj = tmpVec1$1;\n    const njxni = tmpVec2$1;\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB; // Caluclate cross products\n\n    ni.cross(nj, nixnj);\n    nj.cross(ni, njxni); // g = ni * nj\n    // gdot = (nj x ni) * wi + (ni x nj) * wj\n    // G = [0 njxni 0 nixnj]\n    // W = [vi wi vj wj]\n\n    GA.rotational.copy(njxni);\n    GB.rotational.copy(nixnj);\n    const g = Math.cos(this.maxAngle) - ni.dot(nj);\n    const GW = this.computeGW();\n    const GiMf = this.computeGiMf();\n    const B = -g * a - GW * b - h * GiMf;\n    return B;\n  }\n\n}\nconst tmpVec1$1 = new Vec3();\nconst tmpVec2$1 = new Vec3();\n\n/**\n * A Cone Twist constraint, useful for ragdolls.\n */\nclass ConeTwistConstraint extends PointToPointConstraint {\n  /**\n   * The axis direction for the constraint of the body A.\n   */\n\n  /**\n   * The axis direction for the constraint of the body B.\n   */\n\n  /**\n   * The aperture angle of the cone.\n   */\n\n  /**\n   * The twist angle of the joint.\n   */\n  constructor(bodyA, bodyB, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    const maxForce = typeof options.maxForce !== 'undefined' ? options.maxForce : 1e6; // Set pivot point in between\n\n    const pivotA = options.pivotA ? options.pivotA.clone() : new Vec3();\n    const pivotB = options.pivotB ? options.pivotB.clone() : new Vec3();\n    super(bodyA, pivotA, bodyB, pivotB, maxForce);\n    this.axisA = options.axisA ? options.axisA.clone() : new Vec3();\n    this.axisB = options.axisB ? options.axisB.clone() : new Vec3();\n    this.collideConnected = !!options.collideConnected;\n    this.angle = typeof options.angle !== 'undefined' ? options.angle : 0;\n    const c = this.coneEquation = new ConeEquation(bodyA, bodyB, options);\n    const t = this.twistEquation = new RotationalEquation(bodyA, bodyB, options);\n    this.twistAngle = typeof options.twistAngle !== 'undefined' ? options.twistAngle : 0; // Make the cone equation push the bodies toward the cone axis, not outward\n\n    c.maxForce = 0;\n    c.minForce = -maxForce; // Make the twist equation add torque toward the initial position\n\n    t.maxForce = 0;\n    t.minForce = -maxForce;\n    this.equations.push(c, t);\n  }\n\n  update() {\n    const bodyA = this.bodyA;\n    const bodyB = this.bodyB;\n    const cone = this.coneEquation;\n    const twist = this.twistEquation;\n    super.update(); // Update the axes to the cone constraint\n\n    bodyA.vectorToWorldFrame(this.axisA, cone.axisA);\n    bodyB.vectorToWorldFrame(this.axisB, cone.axisB); // Update the world axes in the twist constraint\n\n    this.axisA.tangents(twist.axisA, twist.axisA);\n    bodyA.vectorToWorldFrame(twist.axisA, twist.axisA);\n    this.axisB.tangents(twist.axisB, twist.axisB);\n    bodyB.vectorToWorldFrame(twist.axisB, twist.axisB);\n    cone.angle = this.angle;\n    twist.maxAngle = this.twistAngle;\n  }\n\n}\nnew Vec3();\nnew Vec3();\n\n/**\n * Constrains two bodies to be at a constant distance from each others center of mass.\n */\nclass DistanceConstraint extends Constraint {\n  /**\n   * The distance to keep. If undefined, it will be set to the current distance between bodyA and bodyB\n   */\n\n  /**\n   * @param distance The distance to keep. If undefined, it will be set to the current distance between bodyA and bodyB.\n   * @param maxForce The maximum force that should be applied to constrain the bodies.\n   */\n  constructor(bodyA, bodyB, distance, maxForce) {\n    if (maxForce === void 0) {\n      maxForce = 1e6;\n    }\n\n    super(bodyA, bodyB);\n\n    if (typeof distance === 'undefined') {\n      distance = bodyA.position.distanceTo(bodyB.position);\n    }\n\n    this.distance = distance;\n    const eq = this.distanceEquation = new ContactEquation(bodyA, bodyB);\n    this.equations.push(eq); // Make it bidirectional\n\n    eq.minForce = -maxForce;\n    eq.maxForce = maxForce;\n  }\n  /**\n   * update\n   */\n\n\n  update() {\n    const bodyA = this.bodyA;\n    const bodyB = this.bodyB;\n    const eq = this.distanceEquation;\n    const halfDist = this.distance * 0.5;\n    const normal = eq.ni;\n    bodyB.position.vsub(bodyA.position, normal);\n    normal.normalize();\n    normal.scale(halfDist, eq.ri);\n    normal.scale(-halfDist, eq.rj);\n  }\n\n}\n\n/**\n * Lock constraint. Will remove all degrees of freedom between the bodies.\n */\nclass LockConstraint extends PointToPointConstraint {\n  constructor(bodyA, bodyB, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    const maxForce = typeof options.maxForce !== 'undefined' ? options.maxForce : 1e6; // Set pivot point in between\n\n    const pivotA = new Vec3();\n    const pivotB = new Vec3();\n    const halfWay = new Vec3();\n    bodyA.position.vadd(bodyB.position, halfWay);\n    halfWay.scale(0.5, halfWay);\n    bodyB.pointToLocalFrame(halfWay, pivotB);\n    bodyA.pointToLocalFrame(halfWay, pivotA); // The point-to-point constraint will keep a point shared between the bodies\n\n    super(bodyA, pivotA, bodyB, pivotB, maxForce); // Store initial rotation of the bodies as unit vectors in the local body spaces\n\n    this.xA = bodyA.vectorToLocalFrame(Vec3.UNIT_X);\n    this.xB = bodyB.vectorToLocalFrame(Vec3.UNIT_X);\n    this.yA = bodyA.vectorToLocalFrame(Vec3.UNIT_Y);\n    this.yB = bodyB.vectorToLocalFrame(Vec3.UNIT_Y);\n    this.zA = bodyA.vectorToLocalFrame(Vec3.UNIT_Z);\n    this.zB = bodyB.vectorToLocalFrame(Vec3.UNIT_Z); // ...and the following rotational equations will keep all rotational DOF's in place\n\n    const r1 = this.rotationalEquation1 = new RotationalEquation(bodyA, bodyB, options);\n    const r2 = this.rotationalEquation2 = new RotationalEquation(bodyA, bodyB, options);\n    const r3 = this.rotationalEquation3 = new RotationalEquation(bodyA, bodyB, options);\n    this.equations.push(r1, r2, r3);\n  }\n  /**\n   * update\n   */\n\n\n  update() {\n    const bodyA = this.bodyA;\n    const bodyB = this.bodyB;\n    this.motorEquation;\n    const r1 = this.rotationalEquation1;\n    const r2 = this.rotationalEquation2;\n    const r3 = this.rotationalEquation3;\n    LockConstraint_update_tmpVec1;\n    LockConstraint_update_tmpVec2;\n    super.update(); // These vector pairs must be orthogonal\n\n    bodyA.vectorToWorldFrame(this.xA, r1.axisA);\n    bodyB.vectorToWorldFrame(this.yB, r1.axisB);\n    bodyA.vectorToWorldFrame(this.yA, r2.axisA);\n    bodyB.vectorToWorldFrame(this.zB, r2.axisB);\n    bodyA.vectorToWorldFrame(this.zA, r3.axisA);\n    bodyB.vectorToWorldFrame(this.xB, r3.axisB);\n  }\n\n}\nconst LockConstraint_update_tmpVec1 = new Vec3();\nconst LockConstraint_update_tmpVec2 = new Vec3();\n\n/**\n * Rotational motor constraint. Tries to keep the relative angular velocity of the bodies to a given value.\n */\nclass RotationalMotorEquation extends Equation {\n  /**\n   * World oriented rotational axis.\n   */\n\n  /**\n   * World oriented rotational axis.\n   */\n\n  /**\n   * Motor velocity.\n   */\n  constructor(bodyA, bodyB, maxForce) {\n    if (maxForce === void 0) {\n      maxForce = 1e6;\n    }\n\n    super(bodyA, bodyB, -maxForce, maxForce);\n    this.axisA = new Vec3();\n    this.axisB = new Vec3();\n    this.targetVelocity = 0;\n  }\n\n  computeB(h) {\n    this.a;\n    const b = this.b;\n    this.bi;\n    this.bj;\n    const axisA = this.axisA;\n    const axisB = this.axisB;\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB; // g = 0\n    // gdot = axisA * wi - axisB * wj\n    // gdot = G * W = G * [vi wi vj wj]\n    // =>\n    // G = [0 axisA 0 -axisB]\n\n    GA.rotational.copy(axisA);\n    axisB.negate(GB.rotational);\n    const GW = this.computeGW() - this.targetVelocity;\n    const GiMf = this.computeGiMf();\n    const B = -GW * b - h * GiMf;\n    return B;\n  }\n\n}\n\n/**\n * Hinge constraint. Think of it as a door hinge. It tries to keep the door in the correct place and with the correct orientation.\n */\nclass HingeConstraint extends PointToPointConstraint {\n  /**\n   * Rotation axis, defined locally in bodyA.\n   */\n\n  /**\n   * Rotation axis, defined locally in bodyB.\n   */\n  constructor(bodyA, bodyB, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    const maxForce = typeof options.maxForce !== 'undefined' ? options.maxForce : 1e6;\n    const pivotA = options.pivotA ? options.pivotA.clone() : new Vec3();\n    const pivotB = options.pivotB ? options.pivotB.clone() : new Vec3();\n    super(bodyA, pivotA, bodyB, pivotB, maxForce);\n    const axisA = this.axisA = options.axisA ? options.axisA.clone() : new Vec3(1, 0, 0);\n    axisA.normalize();\n    const axisB = this.axisB = options.axisB ? options.axisB.clone() : new Vec3(1, 0, 0);\n    axisB.normalize();\n    this.collideConnected = !!options.collideConnected;\n    const rotational1 = this.rotationalEquation1 = new RotationalEquation(bodyA, bodyB, options);\n    const rotational2 = this.rotationalEquation2 = new RotationalEquation(bodyA, bodyB, options);\n    const motor = this.motorEquation = new RotationalMotorEquation(bodyA, bodyB, maxForce);\n    motor.enabled = false; // Not enabled by default\n    // Equations to be fed to the solver\n\n    this.equations.push(rotational1, rotational2, motor);\n  }\n  /**\n   * enableMotor\n   */\n\n\n  enableMotor() {\n    this.motorEquation.enabled = true;\n  }\n  /**\n   * disableMotor\n   */\n\n\n  disableMotor() {\n    this.motorEquation.enabled = false;\n  }\n  /**\n   * setMotorSpeed\n   */\n\n\n  setMotorSpeed(speed) {\n    this.motorEquation.targetVelocity = speed;\n  }\n  /**\n   * setMotorMaxForce\n   */\n\n\n  setMotorMaxForce(maxForce) {\n    this.motorEquation.maxForce = maxForce;\n    this.motorEquation.minForce = -maxForce;\n  }\n  /**\n   * update\n   */\n\n\n  update() {\n    const bodyA = this.bodyA;\n    const bodyB = this.bodyB;\n    const motor = this.motorEquation;\n    const r1 = this.rotationalEquation1;\n    const r2 = this.rotationalEquation2;\n    const worldAxisA = HingeConstraint_update_tmpVec1;\n    const worldAxisB = HingeConstraint_update_tmpVec2;\n    const axisA = this.axisA;\n    const axisB = this.axisB;\n    super.update(); // Get world axes\n\n    bodyA.quaternion.vmult(axisA, worldAxisA);\n    bodyB.quaternion.vmult(axisB, worldAxisB);\n    worldAxisA.tangents(r1.axisA, r2.axisA);\n    r1.axisB.copy(worldAxisB);\n    r2.axisB.copy(worldAxisB);\n\n    if (this.motorEquation.enabled) {\n      bodyA.quaternion.vmult(this.axisA, motor.axisA);\n      bodyB.quaternion.vmult(this.axisB, motor.axisB);\n    }\n  }\n\n}\nconst HingeConstraint_update_tmpVec1 = new Vec3();\nconst HingeConstraint_update_tmpVec2 = new Vec3();\n\n/**\n * Constrains the slipping in a contact along a tangent\n */\nclass FrictionEquation extends Equation {\n  // Tangent\n\n  /**\n   * @param slipForce should be +-F_friction = +-mu * F_normal = +-mu * m * g\n   */\n  constructor(bodyA, bodyB, slipForce) {\n    super(bodyA, bodyB, -slipForce, slipForce);\n    this.ri = new Vec3();\n    this.rj = new Vec3();\n    this.t = new Vec3();\n  }\n\n  computeB(h) {\n    this.a;\n    const b = this.b;\n    this.bi;\n    this.bj;\n    const ri = this.ri;\n    const rj = this.rj;\n    const rixt = FrictionEquation_computeB_temp1;\n    const rjxt = FrictionEquation_computeB_temp2;\n    const t = this.t; // Caluclate cross products\n\n    ri.cross(t, rixt);\n    rj.cross(t, rjxt); // G = [-t -rixt t rjxt]\n    // And remember, this is a pure velocity constraint, g is always zero!\n\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB;\n    t.negate(GA.spatial);\n    rixt.negate(GA.rotational);\n    GB.spatial.copy(t);\n    GB.rotational.copy(rjxt);\n    const GW = this.computeGW();\n    const GiMf = this.computeGiMf();\n    const B = -GW * b - h * GiMf;\n    return B;\n  }\n\n}\nconst FrictionEquation_computeB_temp1 = new Vec3();\nconst FrictionEquation_computeB_temp2 = new Vec3();\n\n/**\n * Defines what happens when two materials meet.\n * @todo Refactor materials to materialA and materialB\n */\nclass ContactMaterial {\n  /**\n   * Identifier of this material.\n   */\n\n  /**\n   * Participating materials.\n   */\n\n  /**\n   * Friction coefficient.\n   * @default 0.3\n   */\n\n  /**\n   * Restitution coefficient.\n   * @default 0.3\n   */\n\n  /**\n   * Stiffness of the produced contact equations.\n   * @default 1e7\n   */\n\n  /**\n   * Relaxation time of the produced contact equations.\n   * @default 3\n   */\n\n  /**\n   * Stiffness of the produced friction equations.\n   * @default 1e7\n   */\n\n  /**\n   * Relaxation time of the produced friction equations\n   * @default 3\n   */\n  constructor(m1, m2, options) {\n    options = Utils.defaults(options, {\n      friction: 0.3,\n      restitution: 0.3,\n      contactEquationStiffness: 1e7,\n      contactEquationRelaxation: 3,\n      frictionEquationStiffness: 1e7,\n      frictionEquationRelaxation: 3\n    });\n    this.id = ContactMaterial.idCounter++;\n    this.materials = [m1, m2];\n    this.friction = options.friction;\n    this.restitution = options.restitution;\n    this.contactEquationStiffness = options.contactEquationStiffness;\n    this.contactEquationRelaxation = options.contactEquationRelaxation;\n    this.frictionEquationStiffness = options.frictionEquationStiffness;\n    this.frictionEquationRelaxation = options.frictionEquationRelaxation;\n  }\n\n}\nContactMaterial.idCounter = 0;\n\n/**\n * Defines a physics material.\n */\nclass Material {\n  /**\n   * Material name.\n   * If options is a string, name will be set to that string.\n   * @todo Deprecate this\n   */\n\n  /** Material id. */\n\n  /**\n   * Friction for this material.\n   * If non-negative, it will be used instead of the friction given by ContactMaterials. If there's no matching ContactMaterial, the value from `defaultContactMaterial` in the World will be used.\n   */\n\n  /**\n   * Restitution for this material.\n   * If non-negative, it will be used instead of the restitution given by ContactMaterials. If there's no matching ContactMaterial, the value from `defaultContactMaterial` in the World will be used.\n   */\n  constructor(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    let name = ''; // Backwards compatibility fix\n\n    if (typeof options === 'string') {\n      //console.warn(`Passing a string to MaterialOptions is deprecated, and has no effect`)\n      name = options;\n      options = {};\n    }\n\n    this.name = name;\n    this.id = Material.idCounter++;\n    this.friction = typeof options.friction !== 'undefined' ? options.friction : -1;\n    this.restitution = typeof options.restitution !== 'undefined' ? options.restitution : -1;\n  }\n\n}\nMaterial.idCounter = 0;\n\n/**\n * A spring, connecting two bodies.\n * @example\n *     const spring = new Spring(boxBody, sphereBody, {\n *       restLength: 0,\n *       stiffness: 50,\n *       damping: 1,\n *     })\n *\n *     // Compute the force after each step\n *     world.addEventListener('postStep', (event) => {\n *       spring.applyForce()\n *     })\n */\nclass Spring {\n  /**\n   * Rest length of the spring. A number > 0.\n   * @default 1\n   */\n\n  /**\n   * Stiffness of the spring. A number >= 0.\n   * @default 100\n   */\n\n  /**\n   * Damping of the spring. A number >= 0.\n   * @default 1\n   */\n\n  /**\n   * First connected body.\n   */\n\n  /**\n   * Second connected body.\n   */\n\n  /**\n   * Anchor for bodyA in local bodyA coordinates.\n   * Where to hook the spring to body A, in local body coordinates.\n   * @default new Vec3()\n   */\n\n  /**\n   * Anchor for bodyB in local bodyB coordinates.\n   * Where to hook the spring to body B, in local body coordinates.\n   * @default new Vec3()\n   */\n  constructor(bodyA, bodyB, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.restLength = typeof options.restLength === 'number' ? options.restLength : 1;\n    this.stiffness = options.stiffness || 100;\n    this.damping = options.damping || 1;\n    this.bodyA = bodyA;\n    this.bodyB = bodyB;\n    this.localAnchorA = new Vec3();\n    this.localAnchorB = new Vec3();\n\n    if (options.localAnchorA) {\n      this.localAnchorA.copy(options.localAnchorA);\n    }\n\n    if (options.localAnchorB) {\n      this.localAnchorB.copy(options.localAnchorB);\n    }\n\n    if (options.worldAnchorA) {\n      this.setWorldAnchorA(options.worldAnchorA);\n    }\n\n    if (options.worldAnchorB) {\n      this.setWorldAnchorB(options.worldAnchorB);\n    }\n  }\n  /**\n   * Set the anchor point on body A, using world coordinates.\n   */\n\n\n  setWorldAnchorA(worldAnchorA) {\n    this.bodyA.pointToLocalFrame(worldAnchorA, this.localAnchorA);\n  }\n  /**\n   * Set the anchor point on body B, using world coordinates.\n   */\n\n\n  setWorldAnchorB(worldAnchorB) {\n    this.bodyB.pointToLocalFrame(worldAnchorB, this.localAnchorB);\n  }\n  /**\n   * Get the anchor point on body A, in world coordinates.\n   * @param result The vector to store the result in.\n   */\n\n\n  getWorldAnchorA(result) {\n    this.bodyA.pointToWorldFrame(this.localAnchorA, result);\n  }\n  /**\n   * Get the anchor point on body B, in world coordinates.\n   * @param result The vector to store the result in.\n   */\n\n\n  getWorldAnchorB(result) {\n    this.bodyB.pointToWorldFrame(this.localAnchorB, result);\n  }\n  /**\n   * Apply the spring force to the connected bodies.\n   */\n\n\n  applyForce() {\n    const k = this.stiffness;\n    const d = this.damping;\n    const l = this.restLength;\n    const bodyA = this.bodyA;\n    const bodyB = this.bodyB;\n    const r = applyForce_r;\n    const r_unit = applyForce_r_unit;\n    const u = applyForce_u;\n    const f = applyForce_f;\n    const tmp = applyForce_tmp;\n    const worldAnchorA = applyForce_worldAnchorA;\n    const worldAnchorB = applyForce_worldAnchorB;\n    const ri = applyForce_ri;\n    const rj = applyForce_rj;\n    const ri_x_f = applyForce_ri_x_f;\n    const rj_x_f = applyForce_rj_x_f; // Get world anchors\n\n    this.getWorldAnchorA(worldAnchorA);\n    this.getWorldAnchorB(worldAnchorB); // Get offset points\n\n    worldAnchorA.vsub(bodyA.position, ri);\n    worldAnchorB.vsub(bodyB.position, rj); // Compute distance vector between world anchor points\n\n    worldAnchorB.vsub(worldAnchorA, r);\n    const rlen = r.length();\n    r_unit.copy(r);\n    r_unit.normalize(); // Compute relative velocity of the anchor points, u\n\n    bodyB.velocity.vsub(bodyA.velocity, u); // Add rotational velocity\n\n    bodyB.angularVelocity.cross(rj, tmp);\n    u.vadd(tmp, u);\n    bodyA.angularVelocity.cross(ri, tmp);\n    u.vsub(tmp, u); // F = - k * ( x - L ) - D * ( u )\n\n    r_unit.scale(-k * (rlen - l) - d * u.dot(r_unit), f); // Add forces to bodies\n\n    bodyA.force.vsub(f, bodyA.force);\n    bodyB.force.vadd(f, bodyB.force); // Angular force\n\n    ri.cross(f, ri_x_f);\n    rj.cross(f, rj_x_f);\n    bodyA.torque.vsub(ri_x_f, bodyA.torque);\n    bodyB.torque.vadd(rj_x_f, bodyB.torque);\n  }\n\n}\nconst applyForce_r = new Vec3();\nconst applyForce_r_unit = new Vec3();\nconst applyForce_u = new Vec3();\nconst applyForce_f = new Vec3();\nconst applyForce_worldAnchorA = new Vec3();\nconst applyForce_worldAnchorB = new Vec3();\nconst applyForce_ri = new Vec3();\nconst applyForce_rj = new Vec3();\nconst applyForce_ri_x_f = new Vec3();\nconst applyForce_rj_x_f = new Vec3();\nconst applyForce_tmp = new Vec3();\n\n/**\n * WheelInfo\n */\nclass WheelInfo {\n  /**\n   * Max travel distance of the suspension, in meters.\n   * @default 1\n   */\n\n  /**\n   * Speed to apply to the wheel rotation when the wheel is sliding.\n   * @default -0.1\n   */\n\n  /**\n   * If the customSlidingRotationalSpeed should be used.\n   * @default false\n   */\n\n  /**\n   * sliding\n   */\n\n  /**\n   * Connection point, defined locally in the chassis body frame.\n   */\n\n  /**\n   * chassisConnectionPointWorld\n   */\n\n  /**\n   * directionLocal\n   */\n\n  /**\n   * directionWorld\n   */\n\n  /**\n   * axleLocal\n   */\n\n  /**\n   * axleWorld\n   */\n\n  /**\n   * suspensionRestLength\n   * @default 1\n   */\n\n  /**\n   * suspensionMaxLength\n   * @default 2\n   */\n\n  /**\n   * radius\n   * @default 1\n   */\n\n  /**\n   * suspensionStiffness\n   * @default 100\n   */\n\n  /**\n   * dampingCompression\n   * @default 10\n   */\n\n  /**\n   * dampingRelaxation\n   * @default 10\n   */\n\n  /**\n   * frictionSlip\n   * @default 10.5\n   */\n\n  /** forwardAcceleration */\n\n  /** sideAcceleration */\n\n  /**\n   * steering\n   * @default 0\n   */\n\n  /**\n   * Rotation value, in radians.\n   * @default 0\n   */\n\n  /**\n   * deltaRotation\n   * @default 0\n   */\n\n  /**\n   * rollInfluence\n   * @default 0.01\n   */\n\n  /**\n   * maxSuspensionForce\n   */\n\n  /**\n   * engineForce\n   */\n\n  /**\n   * brake\n   */\n\n  /**\n   * isFrontWheel\n   * @default true\n   */\n\n  /**\n   * clippedInvContactDotSuspension\n   * @default 1\n   */\n\n  /**\n   * suspensionRelativeVelocity\n   * @default 0\n   */\n\n  /**\n   * suspensionForce\n   * @default 0\n   */\n\n  /**\n   * slipInfo\n   */\n\n  /**\n   * skidInfo\n   * @default 0\n   */\n\n  /**\n   * suspensionLength\n   * @default 0\n   */\n\n  /**\n   * sideImpulse\n   */\n\n  /**\n   * forwardImpulse\n   */\n\n  /**\n   * The result from raycasting.\n   */\n\n  /**\n   * Wheel world transform.\n   */\n\n  /**\n   * isInContact\n   */\n  constructor(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    options = Utils.defaults(options, {\n      chassisConnectionPointLocal: new Vec3(),\n      chassisConnectionPointWorld: new Vec3(),\n      directionLocal: new Vec3(),\n      directionWorld: new Vec3(),\n      axleLocal: new Vec3(),\n      axleWorld: new Vec3(),\n      suspensionRestLength: 1,\n      suspensionMaxLength: 2,\n      radius: 1,\n      suspensionStiffness: 100,\n      dampingCompression: 10,\n      dampingRelaxation: 10,\n      frictionSlip: 10.5,\n      forwardAcceleration: 1,\n      sideAcceleration: 1,\n      steering: 0,\n      rotation: 0,\n      deltaRotation: 0,\n      rollInfluence: 0.01,\n      maxSuspensionForce: Number.MAX_VALUE,\n      isFrontWheel: true,\n      clippedInvContactDotSuspension: 1,\n      suspensionRelativeVelocity: 0,\n      suspensionForce: 0,\n      slipInfo: 0,\n      skidInfo: 0,\n      suspensionLength: 0,\n      maxSuspensionTravel: 1,\n      useCustomSlidingRotationalSpeed: false,\n      customSlidingRotationalSpeed: -0.1\n    });\n    this.maxSuspensionTravel = options.maxSuspensionTravel;\n    this.customSlidingRotationalSpeed = options.customSlidingRotationalSpeed;\n    this.useCustomSlidingRotationalSpeed = options.useCustomSlidingRotationalSpeed;\n    this.sliding = false;\n    this.chassisConnectionPointLocal = options.chassisConnectionPointLocal.clone();\n    this.chassisConnectionPointWorld = options.chassisConnectionPointWorld.clone();\n    this.directionLocal = options.directionLocal.clone();\n    this.directionWorld = options.directionWorld.clone();\n    this.axleLocal = options.axleLocal.clone();\n    this.axleWorld = options.axleWorld.clone();\n    this.suspensionRestLength = options.suspensionRestLength;\n    this.suspensionMaxLength = options.suspensionMaxLength;\n    this.radius = options.radius;\n    this.suspensionStiffness = options.suspensionStiffness;\n    this.dampingCompression = options.dampingCompression;\n    this.dampingRelaxation = options.dampingRelaxation;\n    this.frictionSlip = options.frictionSlip;\n    this.forwardAcceleration = options.forwardAcceleration;\n    this.sideAcceleration = options.sideAcceleration;\n    this.steering = 0;\n    this.rotation = 0;\n    this.deltaRotation = 0;\n    this.rollInfluence = options.rollInfluence;\n    this.maxSuspensionForce = options.maxSuspensionForce;\n    this.engineForce = 0;\n    this.brake = 0;\n    this.isFrontWheel = options.isFrontWheel;\n    this.clippedInvContactDotSuspension = 1;\n    this.suspensionRelativeVelocity = 0;\n    this.suspensionForce = 0;\n    this.slipInfo = 0;\n    this.skidInfo = 0;\n    this.suspensionLength = 0;\n    this.sideImpulse = 0;\n    this.forwardImpulse = 0;\n    this.raycastResult = new RaycastResult();\n    this.worldTransform = new Transform();\n    this.isInContact = false;\n  }\n\n  updateWheel(chassis) {\n    const raycastResult = this.raycastResult;\n\n    if (this.isInContact) {\n      const project = raycastResult.hitNormalWorld.dot(raycastResult.directionWorld);\n      raycastResult.hitPointWorld.vsub(chassis.position, relpos);\n      chassis.getVelocityAtWorldPoint(relpos, chassis_velocity_at_contactPoint);\n      const projVel = raycastResult.hitNormalWorld.dot(chassis_velocity_at_contactPoint);\n\n      if (project >= -0.1) {\n        this.suspensionRelativeVelocity = 0.0;\n        this.clippedInvContactDotSuspension = 1.0 / 0.1;\n      } else {\n        const inv = -1 / project;\n        this.suspensionRelativeVelocity = projVel * inv;\n        this.clippedInvContactDotSuspension = inv;\n      }\n    } else {\n      // Not in contact : position wheel in a nice (rest length) position\n      raycastResult.suspensionLength = this.suspensionRestLength;\n      this.suspensionRelativeVelocity = 0.0;\n      raycastResult.directionWorld.scale(-1, raycastResult.hitNormalWorld);\n      this.clippedInvContactDotSuspension = 1.0;\n    }\n  }\n\n}\nconst chassis_velocity_at_contactPoint = new Vec3();\nconst relpos = new Vec3();\n\n/**\n * Vehicle helper class that casts rays from the wheel positions towards the ground and applies forces.\n */\nclass RaycastVehicle {\n  /** The car chassis body. */\n\n  /** The wheels. */\n\n  /** Will be set to true if the car is sliding. */\n\n  /** Index of the right axis. x=0, y=1, z=2 */\n\n  /** Index of the forward axis. x=0, y=1, z=2 */\n\n  /** Index of the up axis. x=0, y=1, z=2 */\n\n  /** The constraints. */\n\n  /** Optional pre-step callback. */\n\n  /** Number of wheels on the ground. */\n  constructor(options) {\n    this.chassisBody = options.chassisBody;\n    this.wheelInfos = [];\n    this.sliding = false;\n    this.world = null;\n    this.indexRightAxis = typeof options.indexRightAxis !== 'undefined' ? options.indexRightAxis : 2;\n    this.indexForwardAxis = typeof options.indexForwardAxis !== 'undefined' ? options.indexForwardAxis : 0;\n    this.indexUpAxis = typeof options.indexUpAxis !== 'undefined' ? options.indexUpAxis : 1;\n    this.constraints = [];\n\n    this.preStepCallback = () => {};\n\n    this.currentVehicleSpeedKmHour = 0;\n    this.numWheelsOnGround = 0;\n  }\n  /**\n   * Add a wheel. For information about the options, see `WheelInfo`.\n   */\n\n\n  addWheel(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    const info = new WheelInfo(options);\n    const index = this.wheelInfos.length;\n    this.wheelInfos.push(info);\n    return index;\n  }\n  /**\n   * Set the steering value of a wheel.\n   */\n\n\n  setSteeringValue(value, wheelIndex) {\n    const wheel = this.wheelInfos[wheelIndex];\n    wheel.steering = value;\n  }\n  /**\n   * Set the wheel force to apply on one of the wheels each time step\n   */\n\n\n  applyEngineForce(value, wheelIndex) {\n    this.wheelInfos[wheelIndex].engineForce = value;\n  }\n  /**\n   * Set the braking force of a wheel\n   */\n\n\n  setBrake(brake, wheelIndex) {\n    this.wheelInfos[wheelIndex].brake = brake;\n  }\n  /**\n   * Add the vehicle including its constraints to the world.\n   */\n\n\n  addToWorld(world) {\n    world.addBody(this.chassisBody);\n    const that = this;\n\n    this.preStepCallback = () => {\n      that.updateVehicle(world.dt);\n    };\n\n    world.addEventListener('preStep', this.preStepCallback);\n    this.world = world;\n  }\n  /**\n   * Get one of the wheel axles, world-oriented.\n   */\n\n\n  getVehicleAxisWorld(axisIndex, result) {\n    result.set(axisIndex === 0 ? 1 : 0, axisIndex === 1 ? 1 : 0, axisIndex === 2 ? 1 : 0);\n    this.chassisBody.vectorToWorldFrame(result, result);\n  }\n\n  updateVehicle(timeStep) {\n    const wheelInfos = this.wheelInfos;\n    const numWheels = wheelInfos.length;\n    const chassisBody = this.chassisBody;\n\n    for (let i = 0; i < numWheels; i++) {\n      this.updateWheelTransform(i);\n    }\n\n    this.currentVehicleSpeedKmHour = 3.6 * chassisBody.velocity.length();\n    const forwardWorld = new Vec3();\n    this.getVehicleAxisWorld(this.indexForwardAxis, forwardWorld);\n\n    if (forwardWorld.dot(chassisBody.velocity) < 0) {\n      this.currentVehicleSpeedKmHour *= -1;\n    } // simulate suspension\n\n\n    for (let i = 0; i < numWheels; i++) {\n      this.castRay(wheelInfos[i]);\n    }\n\n    this.updateSuspension(timeStep);\n    const impulse = new Vec3();\n    const relpos = new Vec3();\n\n    for (let i = 0; i < numWheels; i++) {\n      //apply suspension force\n      const wheel = wheelInfos[i];\n      let suspensionForce = wheel.suspensionForce;\n\n      if (suspensionForce > wheel.maxSuspensionForce) {\n        suspensionForce = wheel.maxSuspensionForce;\n      }\n\n      wheel.raycastResult.hitNormalWorld.scale(suspensionForce * timeStep, impulse);\n      wheel.raycastResult.hitPointWorld.vsub(chassisBody.position, relpos);\n      chassisBody.applyImpulse(impulse, relpos);\n    }\n\n    this.updateFriction(timeStep);\n    const hitNormalWorldScaledWithProj = new Vec3();\n    const fwd = new Vec3();\n    const vel = new Vec3();\n\n    for (let i = 0; i < numWheels; i++) {\n      const wheel = wheelInfos[i]; //const relpos = new Vec3();\n      //wheel.chassisConnectionPointWorld.vsub(chassisBody.position, relpos);\n\n      chassisBody.getVelocityAtWorldPoint(wheel.chassisConnectionPointWorld, vel); // Hack to get the rotation in the correct direction\n\n      let m = 1;\n\n      switch (this.indexUpAxis) {\n        case 1:\n          m = -1;\n          break;\n      }\n\n      if (wheel.isInContact) {\n        this.getVehicleAxisWorld(this.indexForwardAxis, fwd);\n        const proj = fwd.dot(wheel.raycastResult.hitNormalWorld);\n        wheel.raycastResult.hitNormalWorld.scale(proj, hitNormalWorldScaledWithProj);\n        fwd.vsub(hitNormalWorldScaledWithProj, fwd);\n        const proj2 = fwd.dot(vel);\n        wheel.deltaRotation = m * proj2 * timeStep / wheel.radius;\n      }\n\n      if ((wheel.sliding || !wheel.isInContact) && wheel.engineForce !== 0 && wheel.useCustomSlidingRotationalSpeed) {\n        // Apply custom rotation when accelerating and sliding\n        wheel.deltaRotation = (wheel.engineForce > 0 ? 1 : -1) * wheel.customSlidingRotationalSpeed * timeStep;\n      } // Lock wheels\n\n\n      if (Math.abs(wheel.brake) > Math.abs(wheel.engineForce)) {\n        wheel.deltaRotation = 0;\n      }\n\n      wheel.rotation += wheel.deltaRotation; // Use the old value\n\n      wheel.deltaRotation *= 0.99; // damping of rotation when not in contact\n    }\n  }\n\n  updateSuspension(deltaTime) {\n    const chassisBody = this.chassisBody;\n    const chassisMass = chassisBody.mass;\n    const wheelInfos = this.wheelInfos;\n    const numWheels = wheelInfos.length;\n\n    for (let w_it = 0; w_it < numWheels; w_it++) {\n      const wheel = wheelInfos[w_it];\n\n      if (wheel.isInContact) {\n        let force; // Spring\n\n        const susp_length = wheel.suspensionRestLength;\n        const current_length = wheel.suspensionLength;\n        const length_diff = susp_length - current_length;\n        force = wheel.suspensionStiffness * length_diff * wheel.clippedInvContactDotSuspension; // Damper\n\n        const projected_rel_vel = wheel.suspensionRelativeVelocity;\n        let susp_damping;\n\n        if (projected_rel_vel < 0) {\n          susp_damping = wheel.dampingCompression;\n        } else {\n          susp_damping = wheel.dampingRelaxation;\n        }\n\n        force -= susp_damping * projected_rel_vel;\n        wheel.suspensionForce = force * chassisMass;\n\n        if (wheel.suspensionForce < 0) {\n          wheel.suspensionForce = 0;\n        }\n      } else {\n        wheel.suspensionForce = 0;\n      }\n    }\n  }\n  /**\n   * Remove the vehicle including its constraints from the world.\n   */\n\n\n  removeFromWorld(world) {\n    this.constraints;\n    world.removeBody(this.chassisBody);\n    world.removeEventListener('preStep', this.preStepCallback);\n    this.world = null;\n  }\n\n  castRay(wheel) {\n    const rayvector = castRay_rayvector;\n    const target = castRay_target;\n    this.updateWheelTransformWorld(wheel);\n    const chassisBody = this.chassisBody;\n    let depth = -1;\n    const raylen = wheel.suspensionRestLength + wheel.radius;\n    wheel.directionWorld.scale(raylen, rayvector);\n    const source = wheel.chassisConnectionPointWorld;\n    source.vadd(rayvector, target);\n    const raycastResult = wheel.raycastResult;\n    raycastResult.reset(); // Turn off ray collision with the chassis temporarily\n\n    const oldState = chassisBody.collisionResponse;\n    chassisBody.collisionResponse = false; // Cast ray against world\n\n    this.world.rayTest(source, target, raycastResult);\n    chassisBody.collisionResponse = oldState;\n    const object = raycastResult.body;\n    wheel.raycastResult.groundObject = 0;\n\n    if (object) {\n      depth = raycastResult.distance;\n      wheel.raycastResult.hitNormalWorld = raycastResult.hitNormalWorld;\n      wheel.isInContact = true;\n      const hitDistance = raycastResult.distance;\n      wheel.suspensionLength = hitDistance - wheel.radius; // clamp on max suspension travel\n\n      const minSuspensionLength = wheel.suspensionRestLength - wheel.maxSuspensionTravel;\n      const maxSuspensionLength = wheel.suspensionRestLength + wheel.maxSuspensionTravel;\n\n      if (wheel.suspensionLength < minSuspensionLength) {\n        wheel.suspensionLength = minSuspensionLength;\n      }\n\n      if (wheel.suspensionLength > maxSuspensionLength) {\n        wheel.suspensionLength = maxSuspensionLength;\n        wheel.raycastResult.reset();\n      }\n\n      const denominator = wheel.raycastResult.hitNormalWorld.dot(wheel.directionWorld);\n      const chassis_velocity_at_contactPoint = new Vec3();\n      chassisBody.getVelocityAtWorldPoint(wheel.raycastResult.hitPointWorld, chassis_velocity_at_contactPoint);\n      const projVel = wheel.raycastResult.hitNormalWorld.dot(chassis_velocity_at_contactPoint);\n\n      if (denominator >= -0.1) {\n        wheel.suspensionRelativeVelocity = 0;\n        wheel.clippedInvContactDotSuspension = 1 / 0.1;\n      } else {\n        const inv = -1 / denominator;\n        wheel.suspensionRelativeVelocity = projVel * inv;\n        wheel.clippedInvContactDotSuspension = inv;\n      }\n    } else {\n      //put wheel info as in rest position\n      wheel.suspensionLength = wheel.suspensionRestLength + 0 * wheel.maxSuspensionTravel;\n      wheel.suspensionRelativeVelocity = 0.0;\n      wheel.directionWorld.scale(-1, wheel.raycastResult.hitNormalWorld);\n      wheel.clippedInvContactDotSuspension = 1.0;\n    }\n\n    return depth;\n  }\n\n  updateWheelTransformWorld(wheel) {\n    wheel.isInContact = false;\n    const chassisBody = this.chassisBody;\n    chassisBody.pointToWorldFrame(wheel.chassisConnectionPointLocal, wheel.chassisConnectionPointWorld);\n    chassisBody.vectorToWorldFrame(wheel.directionLocal, wheel.directionWorld);\n    chassisBody.vectorToWorldFrame(wheel.axleLocal, wheel.axleWorld);\n  }\n  /**\n   * Update one of the wheel transform.\n   * Note when rendering wheels: during each step, wheel transforms are updated BEFORE the chassis; ie. their position becomes invalid after the step. Thus when you render wheels, you must update wheel transforms before rendering them. See raycastVehicle demo for an example.\n   * @param wheelIndex The wheel index to update.\n   */\n\n\n  updateWheelTransform(wheelIndex) {\n    const up = tmpVec4;\n    const right = tmpVec5;\n    const fwd = tmpVec6;\n    const wheel = this.wheelInfos[wheelIndex];\n    this.updateWheelTransformWorld(wheel);\n    wheel.directionLocal.scale(-1, up);\n    right.copy(wheel.axleLocal);\n    up.cross(right, fwd);\n    fwd.normalize();\n    right.normalize(); // Rotate around steering over the wheelAxle\n\n    const steering = wheel.steering;\n    const steeringOrn = new Quaternion();\n    steeringOrn.setFromAxisAngle(up, steering);\n    const rotatingOrn = new Quaternion();\n    rotatingOrn.setFromAxisAngle(right, wheel.rotation); // World rotation of the wheel\n\n    const q = wheel.worldTransform.quaternion;\n    this.chassisBody.quaternion.mult(steeringOrn, q);\n    q.mult(rotatingOrn, q);\n    q.normalize(); // world position of the wheel\n\n    const p = wheel.worldTransform.position;\n    p.copy(wheel.directionWorld);\n    p.scale(wheel.suspensionLength, p);\n    p.vadd(wheel.chassisConnectionPointWorld, p);\n  }\n  /**\n   * Get the world transform of one of the wheels\n   */\n\n\n  getWheelTransformWorld(wheelIndex) {\n    return this.wheelInfos[wheelIndex].worldTransform;\n  }\n\n  updateFriction(timeStep) {\n    const surfNormalWS_scaled_proj = updateFriction_surfNormalWS_scaled_proj; //calculate the impulse, so that the wheels don't move sidewards\n\n    const wheelInfos = this.wheelInfos;\n    const numWheels = wheelInfos.length;\n    const chassisBody = this.chassisBody;\n    const forwardWS = updateFriction_forwardWS;\n    const axle = updateFriction_axle;\n    this.numWheelsOnGround = 0;\n\n    for (let i = 0; i < numWheels; i++) {\n      const wheel = wheelInfos[i];\n      const groundObject = wheel.raycastResult.body;\n\n      if (groundObject) {\n        this.numWheelsOnGround++;\n      }\n\n      wheel.sideImpulse = 0;\n      wheel.forwardImpulse = 0;\n\n      if (!forwardWS[i]) {\n        forwardWS[i] = new Vec3();\n      }\n\n      if (!axle[i]) {\n        axle[i] = new Vec3();\n      }\n    }\n\n    for (let i = 0; i < numWheels; i++) {\n      const wheel = wheelInfos[i];\n      const groundObject = wheel.raycastResult.body;\n\n      if (groundObject) {\n        const axlei = axle[i];\n        const wheelTrans = this.getWheelTransformWorld(i); // Get world axle\n\n        wheelTrans.vectorToWorldFrame(directions[this.indexRightAxis], axlei);\n        const surfNormalWS = wheel.raycastResult.hitNormalWorld;\n        const proj = axlei.dot(surfNormalWS);\n        surfNormalWS.scale(proj, surfNormalWS_scaled_proj);\n        axlei.vsub(surfNormalWS_scaled_proj, axlei);\n        axlei.normalize();\n        surfNormalWS.cross(axlei, forwardWS[i]);\n        forwardWS[i].normalize();\n        wheel.sideImpulse = resolveSingleBilateral(chassisBody, wheel.raycastResult.hitPointWorld, groundObject, wheel.raycastResult.hitPointWorld, axlei);\n        wheel.sideImpulse *= sideFrictionStiffness2;\n      }\n    }\n\n    const sideFactor = 1;\n    const fwdFactor = 0.5;\n    this.sliding = false;\n\n    for (let i = 0; i < numWheels; i++) {\n      const wheel = wheelInfos[i];\n      const groundObject = wheel.raycastResult.body;\n      let rollingFriction = 0;\n      wheel.slipInfo = 1;\n\n      if (groundObject) {\n        const defaultRollingFrictionImpulse = 0;\n        const maxImpulse = wheel.brake ? wheel.brake : defaultRollingFrictionImpulse; // btWheelContactPoint contactPt(chassisBody,groundObject,wheelInfraycastInfo.hitPointWorld,forwardWS[wheel],maxImpulse);\n        // rollingFriction = calcRollingFriction(contactPt);\n\n        rollingFriction = calcRollingFriction(chassisBody, groundObject, wheel.raycastResult.hitPointWorld, forwardWS[i], maxImpulse);\n        rollingFriction += wheel.engineForce * timeStep; // rollingFriction = 0;\n\n        const factor = maxImpulse / rollingFriction;\n        wheel.slipInfo *= factor;\n      } //switch between active rolling (throttle), braking and non-active rolling friction (nthrottle/break)\n\n\n      wheel.forwardImpulse = 0;\n      wheel.skidInfo = 1;\n\n      if (groundObject) {\n        wheel.skidInfo = 1;\n        const maximp = wheel.suspensionForce * timeStep * wheel.frictionSlip;\n        const maximpSide = maximp;\n        const maximpSquared = maximp * maximpSide;\n        wheel.forwardImpulse = rollingFriction; //wheelInfo.engineForce* timeStep;\n\n        const x = wheel.forwardImpulse * fwdFactor / wheel.forwardAcceleration;\n        const y = wheel.sideImpulse * sideFactor / wheel.sideAcceleration;\n        const impulseSquared = x * x + y * y;\n        wheel.sliding = false;\n\n        if (impulseSquared > maximpSquared) {\n          this.sliding = true;\n          wheel.sliding = true;\n          const factor = maximp / Math.sqrt(impulseSquared);\n          wheel.skidInfo *= factor;\n        }\n      }\n    }\n\n    if (this.sliding) {\n      for (let i = 0; i < numWheels; i++) {\n        const wheel = wheelInfos[i];\n\n        if (wheel.sideImpulse !== 0) {\n          if (wheel.skidInfo < 1) {\n            wheel.forwardImpulse *= wheel.skidInfo;\n            wheel.sideImpulse *= wheel.skidInfo;\n          }\n        }\n      }\n    } // apply the impulses\n\n\n    for (let i = 0; i < numWheels; i++) {\n      const wheel = wheelInfos[i];\n      const rel_pos = new Vec3();\n      wheel.raycastResult.hitPointWorld.vsub(chassisBody.position, rel_pos); // cannons applyimpulse is using world coord for the position\n      //rel_pos.copy(wheel.raycastResult.hitPointWorld);\n\n      if (wheel.forwardImpulse !== 0) {\n        const impulse = new Vec3();\n        forwardWS[i].scale(wheel.forwardImpulse, impulse);\n        chassisBody.applyImpulse(impulse, rel_pos);\n      }\n\n      if (wheel.sideImpulse !== 0) {\n        const groundObject = wheel.raycastResult.body;\n        const rel_pos2 = new Vec3();\n        wheel.raycastResult.hitPointWorld.vsub(groundObject.position, rel_pos2); //rel_pos2.copy(wheel.raycastResult.hitPointWorld);\n\n        const sideImp = new Vec3();\n        axle[i].scale(wheel.sideImpulse, sideImp); // Scale the relative position in the up direction with rollInfluence.\n        // If rollInfluence is 1, the impulse will be applied on the hitPoint (easy to roll over), if it is zero it will be applied in the same plane as the center of mass (not easy to roll over).\n\n        chassisBody.vectorToLocalFrame(rel_pos, rel_pos);\n        rel_pos['xyz'[this.indexUpAxis]] *= wheel.rollInfluence;\n        chassisBody.vectorToWorldFrame(rel_pos, rel_pos);\n        chassisBody.applyImpulse(sideImp, rel_pos); //apply friction impulse on the ground\n\n        sideImp.scale(-1, sideImp);\n        groundObject.applyImpulse(sideImp, rel_pos2);\n      }\n    }\n  }\n\n}\nnew Vec3();\nnew Vec3();\nnew Vec3();\nconst tmpVec4 = new Vec3();\nconst tmpVec5 = new Vec3();\nconst tmpVec6 = new Vec3();\nnew Ray();\nnew Vec3();\nconst castRay_rayvector = new Vec3();\nconst castRay_target = new Vec3();\nconst directions = [new Vec3(1, 0, 0), new Vec3(0, 1, 0), new Vec3(0, 0, 1)];\nconst updateFriction_surfNormalWS_scaled_proj = new Vec3();\nconst updateFriction_axle = [];\nconst updateFriction_forwardWS = [];\nconst sideFrictionStiffness2 = 1;\nconst calcRollingFriction_vel1 = new Vec3();\nconst calcRollingFriction_vel2 = new Vec3();\nconst calcRollingFriction_vel = new Vec3();\n\nfunction calcRollingFriction(body0, body1, frictionPosWorld, frictionDirectionWorld, maxImpulse) {\n  let j1 = 0;\n  const contactPosWorld = frictionPosWorld; // const rel_pos1 = new Vec3();\n  // const rel_pos2 = new Vec3();\n\n  const vel1 = calcRollingFriction_vel1;\n  const vel2 = calcRollingFriction_vel2;\n  const vel = calcRollingFriction_vel; // contactPosWorld.vsub(body0.position, rel_pos1);\n  // contactPosWorld.vsub(body1.position, rel_pos2);\n\n  body0.getVelocityAtWorldPoint(contactPosWorld, vel1);\n  body1.getVelocityAtWorldPoint(contactPosWorld, vel2);\n  vel1.vsub(vel2, vel);\n  const vrel = frictionDirectionWorld.dot(vel);\n  const denom0 = computeImpulseDenominator(body0, frictionPosWorld, frictionDirectionWorld);\n  const denom1 = computeImpulseDenominator(body1, frictionPosWorld, frictionDirectionWorld);\n  const relaxation = 1;\n  const jacDiagABInv = relaxation / (denom0 + denom1); // calculate j that moves us to zero relative velocity\n\n  j1 = -vrel * jacDiagABInv;\n\n  if (maxImpulse < j1) {\n    j1 = maxImpulse;\n  }\n\n  if (j1 < -maxImpulse) {\n    j1 = -maxImpulse;\n  }\n\n  return j1;\n}\n\nconst computeImpulseDenominator_r0 = new Vec3();\nconst computeImpulseDenominator_c0 = new Vec3();\nconst computeImpulseDenominator_vec = new Vec3();\nconst computeImpulseDenominator_m = new Vec3();\n\nfunction computeImpulseDenominator(body, pos, normal) {\n  const r0 = computeImpulseDenominator_r0;\n  const c0 = computeImpulseDenominator_c0;\n  const vec = computeImpulseDenominator_vec;\n  const m = computeImpulseDenominator_m;\n  pos.vsub(body.position, r0);\n  r0.cross(normal, c0);\n  body.invInertiaWorld.vmult(c0, m);\n  m.cross(r0, vec);\n  return body.invMass + normal.dot(vec);\n}\n\nconst resolveSingleBilateral_vel1 = new Vec3();\nconst resolveSingleBilateral_vel2 = new Vec3();\nconst resolveSingleBilateral_vel = new Vec3(); // bilateral constraint between two dynamic objects\n\nfunction resolveSingleBilateral(body1, pos1, body2, pos2, normal) {\n  const normalLenSqr = normal.lengthSquared();\n\n  if (normalLenSqr > 1.1) {\n    return 0; // no impulse\n  } // const rel_pos1 = new Vec3();\n  // const rel_pos2 = new Vec3();\n  // pos1.vsub(body1.position, rel_pos1);\n  // pos2.vsub(body2.position, rel_pos2);\n\n\n  const vel1 = resolveSingleBilateral_vel1;\n  const vel2 = resolveSingleBilateral_vel2;\n  const vel = resolveSingleBilateral_vel;\n  body1.getVelocityAtWorldPoint(pos1, vel1);\n  body2.getVelocityAtWorldPoint(pos2, vel2);\n  vel1.vsub(vel2, vel);\n  const rel_vel = normal.dot(vel);\n  const contactDamping = 0.2;\n  const massTerm = 1 / (body1.invMass + body2.invMass);\n  const impulse = -contactDamping * rel_vel * massTerm;\n  return impulse;\n}\n\n/**\n * Spherical shape\n * @example\n *     const radius = 1\n *     const sphereShape = new CANNON.Sphere(radius)\n *     const sphereBody = new CANNON.Body({ mass: 1, shape: sphereShape })\n *     world.addBody(sphereBody)\n */\nclass Sphere extends Shape {\n  /**\n   * The radius of the sphere.\n   */\n\n  /**\n   *\n   * @param radius The radius of the sphere, a non-negative number.\n   */\n  constructor(radius) {\n    super({\n      type: Shape.types.SPHERE\n    });\n    this.radius = radius !== undefined ? radius : 1.0;\n\n    if (this.radius < 0) {\n      throw new Error('The sphere radius cannot be negative.');\n    }\n\n    this.updateBoundingSphereRadius();\n  }\n  /** calculateLocalInertia */\n\n\n  calculateLocalInertia(mass, target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n\n    const I = 2.0 * mass * this.radius * this.radius / 5.0;\n    target.x = I;\n    target.y = I;\n    target.z = I;\n    return target;\n  }\n  /** volume */\n\n\n  volume() {\n    return 4.0 * Math.PI * Math.pow(this.radius, 3) / 3.0;\n  }\n\n  updateBoundingSphereRadius() {\n    this.boundingSphereRadius = this.radius;\n  }\n\n  calculateWorldAABB(pos, quat, min, max) {\n    const r = this.radius;\n    const axes = ['x', 'y', 'z'];\n\n    for (let i = 0; i < axes.length; i++) {\n      const ax = axes[i];\n      min[ax] = pos[ax] - r;\n      max[ax] = pos[ax] + r;\n    }\n  }\n\n}\n\n/**\n * Simple vehicle helper class with spherical rigid body wheels.\n */\nclass RigidVehicle {\n  /**\n   * The bodies of the wheels.\n   */\n\n  /**\n   * The chassis body.\n   */\n\n  /**\n   * The constraints.\n   */\n\n  /**\n   * The wheel axes.\n   */\n\n  /**\n   * The wheel forces.\n   */\n  constructor(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.wheelBodies = [];\n    this.coordinateSystem = typeof options.coordinateSystem !== 'undefined' ? options.coordinateSystem.clone() : new Vec3(1, 2, 3);\n\n    if (options.chassisBody) {\n      this.chassisBody = options.chassisBody;\n    } else {\n      // No chassis body given. Create it!\n      this.chassisBody = new Body({\n        mass: 1,\n        shape: new Box(new Vec3(5, 0.5, 2))\n      });\n    }\n\n    this.constraints = [];\n    this.wheelAxes = [];\n    this.wheelForces = [];\n  }\n  /**\n   * Add a wheel\n   */\n\n\n  addWheel(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    let wheelBody;\n\n    if (options.body) {\n      wheelBody = options.body;\n    } else {\n      // No wheel body given. Create it!\n      wheelBody = new Body({\n        mass: 1,\n        shape: new Sphere(1.2)\n      });\n    }\n\n    this.wheelBodies.push(wheelBody);\n    this.wheelForces.push(0); // Position constrain wheels\n\n    const position = typeof options.position !== 'undefined' ? options.position.clone() : new Vec3(); // Set position locally to the chassis\n\n    const worldPosition = new Vec3();\n    this.chassisBody.pointToWorldFrame(position, worldPosition);\n    wheelBody.position.set(worldPosition.x, worldPosition.y, worldPosition.z); // Constrain wheel\n\n    const axis = typeof options.axis !== 'undefined' ? options.axis.clone() : new Vec3(0, 0, 1);\n    this.wheelAxes.push(axis);\n    const hingeConstraint = new HingeConstraint(this.chassisBody, wheelBody, {\n      pivotA: position,\n      axisA: axis,\n      pivotB: Vec3.ZERO,\n      axisB: axis,\n      collideConnected: false\n    });\n    this.constraints.push(hingeConstraint);\n    return this.wheelBodies.length - 1;\n  }\n  /**\n   * Set the steering value of a wheel.\n   * @todo check coordinateSystem\n   */\n\n\n  setSteeringValue(value, wheelIndex) {\n    // Set angle of the hinge axis\n    const axis = this.wheelAxes[wheelIndex];\n    const c = Math.cos(value);\n    const s = Math.sin(value);\n    const x = axis.x;\n    const z = axis.z;\n    this.constraints[wheelIndex].axisA.set(-c * x + s * z, 0, s * x + c * z);\n  }\n  /**\n   * Set the target rotational speed of the hinge constraint.\n   */\n\n\n  setMotorSpeed(value, wheelIndex) {\n    const hingeConstraint = this.constraints[wheelIndex];\n    hingeConstraint.enableMotor();\n    hingeConstraint.motorTargetVelocity = value;\n  }\n  /**\n   * Set the target rotational speed of the hinge constraint.\n   */\n\n\n  disableMotor(wheelIndex) {\n    const hingeConstraint = this.constraints[wheelIndex];\n    hingeConstraint.disableMotor();\n  }\n  /**\n   * Set the wheel force to apply on one of the wheels each time step\n   */\n\n\n  setWheelForce(value, wheelIndex) {\n    this.wheelForces[wheelIndex] = value;\n  }\n  /**\n   * Apply a torque on one of the wheels.\n   */\n\n\n  applyWheelForce(value, wheelIndex) {\n    const axis = this.wheelAxes[wheelIndex];\n    const wheelBody = this.wheelBodies[wheelIndex];\n    const bodyTorque = wheelBody.torque;\n    axis.scale(value, torque);\n    wheelBody.vectorToWorldFrame(torque, torque);\n    bodyTorque.vadd(torque, bodyTorque);\n  }\n  /**\n   * Add the vehicle including its constraints to the world.\n   */\n\n\n  addToWorld(world) {\n    const constraints = this.constraints;\n    const bodies = this.wheelBodies.concat([this.chassisBody]);\n\n    for (let i = 0; i < bodies.length; i++) {\n      world.addBody(bodies[i]);\n    }\n\n    for (let i = 0; i < constraints.length; i++) {\n      world.addConstraint(constraints[i]);\n    }\n\n    world.addEventListener('preStep', this._update.bind(this));\n  }\n\n  _update() {\n    const wheelForces = this.wheelForces;\n\n    for (let i = 0; i < wheelForces.length; i++) {\n      this.applyWheelForce(wheelForces[i], i);\n    }\n  }\n  /**\n   * Remove the vehicle including its constraints from the world.\n   */\n\n\n  removeFromWorld(world) {\n    const constraints = this.constraints;\n    const bodies = this.wheelBodies.concat([this.chassisBody]);\n\n    for (let i = 0; i < bodies.length; i++) {\n      world.removeBody(bodies[i]);\n    }\n\n    for (let i = 0; i < constraints.length; i++) {\n      world.removeConstraint(constraints[i]);\n    }\n  }\n  /**\n   * Get current rotational velocity of a wheel\n   */\n\n\n  getWheelSpeed(wheelIndex) {\n    const axis = this.wheelAxes[wheelIndex];\n    const wheelBody = this.wheelBodies[wheelIndex];\n    const w = wheelBody.angularVelocity;\n    this.chassisBody.vectorToWorldFrame(axis, worldAxis);\n    return w.dot(worldAxis);\n  }\n\n}\nconst torque = new Vec3();\nconst worldAxis = new Vec3();\n\n/**\n * Smoothed-particle hydrodynamics system\n * @todo Make parameters customizable in the constructor\n */\nclass SPHSystem {\n  /**\n   * The particles array.\n   */\n\n  /**\n   * Density of the system (kg/m3).\n   * @default 1\n   */\n\n  /**\n   * Distance below which two particles are considered to be neighbors.\n   * It should be adjusted so there are about 15-20 neighbor particles within this radius.\n   * @default 1\n   */\n\n  /**\n   * @default 1\n   */\n\n  /**\n   * Viscosity of the system.\n   * @default 0.01\n   */\n\n  /**\n   * @default 0.000001\n   */\n  constructor() {\n    this.particles = [];\n    this.density = 1;\n    this.smoothingRadius = 1;\n    this.speedOfSound = 1;\n    this.viscosity = 0.01;\n    this.eps = 0.000001; // Stuff Computed per particle\n\n    this.pressures = [];\n    this.densities = [];\n    this.neighbors = [];\n  }\n  /**\n   * Add a particle to the system.\n   */\n\n\n  add(particle) {\n    this.particles.push(particle);\n\n    if (this.neighbors.length < this.particles.length) {\n      this.neighbors.push([]);\n    }\n  }\n  /**\n   * Remove a particle from the system.\n   */\n\n\n  remove(particle) {\n    const idx = this.particles.indexOf(particle);\n\n    if (idx !== -1) {\n      this.particles.splice(idx, 1);\n\n      if (this.neighbors.length > this.particles.length) {\n        this.neighbors.pop();\n      }\n    }\n  }\n  /**\n   * Get neighbors within smoothing volume, save in the array neighbors\n   */\n\n\n  getNeighbors(particle, neighbors) {\n    const N = this.particles.length;\n    const id = particle.id;\n    const R2 = this.smoothingRadius * this.smoothingRadius;\n    const dist = SPHSystem_getNeighbors_dist;\n\n    for (let i = 0; i !== N; i++) {\n      const p = this.particles[i];\n      p.position.vsub(particle.position, dist);\n\n      if (id !== p.id && dist.lengthSquared() < R2) {\n        neighbors.push(p);\n      }\n    }\n  }\n\n  update() {\n    const N = this.particles.length;\n    const dist = SPHSystem_update_dist;\n    const cs = this.speedOfSound;\n    const eps = this.eps;\n\n    for (let i = 0; i !== N; i++) {\n      const p = this.particles[i]; // Current particle\n\n      const neighbors = this.neighbors[i]; // Get neighbors\n\n      neighbors.length = 0;\n      this.getNeighbors(p, neighbors);\n      neighbors.push(this.particles[i]); // Add current too\n\n      const numNeighbors = neighbors.length; // Accumulate density for the particle\n\n      let sum = 0.0;\n\n      for (let j = 0; j !== numNeighbors; j++) {\n        //printf(\"Current particle has position %f %f %f\\n\",objects[id].pos.x(),objects[id].pos.y(),objects[id].pos.z());\n        p.position.vsub(neighbors[j].position, dist);\n        const len = dist.length();\n        const weight = this.w(len);\n        sum += neighbors[j].mass * weight;\n      } // Save\n\n\n      this.densities[i] = sum;\n      this.pressures[i] = cs * cs * (this.densities[i] - this.density);\n    } // Add forces\n    // Sum to these accelerations\n\n\n    const a_pressure = SPHSystem_update_a_pressure;\n    const a_visc = SPHSystem_update_a_visc;\n    const gradW = SPHSystem_update_gradW;\n    const r_vec = SPHSystem_update_r_vec;\n    const u = SPHSystem_update_u;\n\n    for (let i = 0; i !== N; i++) {\n      const particle = this.particles[i];\n      a_pressure.set(0, 0, 0);\n      a_visc.set(0, 0, 0); // Init vars\n\n      let Pij;\n      let nabla;\n\n      const neighbors = this.neighbors[i];\n      const numNeighbors = neighbors.length; //printf(\"Neighbors: \");\n\n      for (let j = 0; j !== numNeighbors; j++) {\n        const neighbor = neighbors[j]; //printf(\"%d \",nj);\n        // Get r once for all..\n\n        particle.position.vsub(neighbor.position, r_vec);\n        const r = r_vec.length(); // Pressure contribution\n\n        Pij = -neighbor.mass * (this.pressures[i] / (this.densities[i] * this.densities[i] + eps) + this.pressures[j] / (this.densities[j] * this.densities[j] + eps));\n        this.gradw(r_vec, gradW); // Add to pressure acceleration\n\n        gradW.scale(Pij, gradW);\n        a_pressure.vadd(gradW, a_pressure); // Viscosity contribution\n\n        neighbor.velocity.vsub(particle.velocity, u);\n        u.scale(1.0 / (0.0001 + this.densities[i] * this.densities[j]) * this.viscosity * neighbor.mass, u);\n        nabla = this.nablaw(r);\n        u.scale(nabla, u); // Add to viscosity acceleration\n\n        a_visc.vadd(u, a_visc);\n      } // Calculate force\n\n\n      a_visc.scale(particle.mass, a_visc);\n      a_pressure.scale(particle.mass, a_pressure); // Add force to particles\n\n      particle.force.vadd(a_visc, particle.force);\n      particle.force.vadd(a_pressure, particle.force);\n    }\n  } // Calculate the weight using the W(r) weightfunction\n\n\n  w(r) {\n    // 315\n    const h = this.smoothingRadius;\n    return 315.0 / (64.0 * Math.PI * h ** 9) * (h * h - r * r) ** 3;\n  } // calculate gradient of the weight function\n\n\n  gradw(rVec, resultVec) {\n    const r = rVec.length();\n    const h = this.smoothingRadius;\n    rVec.scale(945.0 / (32.0 * Math.PI * h ** 9) * (h * h - r * r) ** 2, resultVec);\n  } // Calculate nabla(W)\n\n\n  nablaw(r) {\n    const h = this.smoothingRadius;\n    const nabla = 945.0 / (32.0 * Math.PI * h ** 9) * (h * h - r * r) * (7 * r * r - 3 * h * h);\n    return nabla;\n  }\n\n}\nconst SPHSystem_getNeighbors_dist = new Vec3(); // Temp vectors for calculation\n\nconst SPHSystem_update_dist = new Vec3(); // Relative velocity\n\nconst SPHSystem_update_a_pressure = new Vec3();\nconst SPHSystem_update_a_visc = new Vec3();\nconst SPHSystem_update_gradW = new Vec3();\nconst SPHSystem_update_r_vec = new Vec3();\nconst SPHSystem_update_u = new Vec3();\n\n/**\n * Cylinder class.\n * @example\n *     const radiusTop = 0.5\n *     const radiusBottom = 0.5\n *     const height = 2\n *     const numSegments = 12\n *     const cylinderShape = new CANNON.Cylinder(radiusTop, radiusBottom, height, numSegments)\n *     const cylinderBody = new CANNON.Body({ mass: 1, shape: cylinderShape })\n *     world.addBody(cylinderBody)\n */\n\nclass Cylinder extends ConvexPolyhedron {\n  /** The radius of the top of the Cylinder. */\n\n  /** The radius of the bottom of the Cylinder. */\n\n  /** The height of the Cylinder. */\n\n  /** The number of segments to build the cylinder out of. */\n\n  /**\n   * @param radiusTop The radius of the top of the Cylinder.\n   * @param radiusBottom The radius of the bottom of the Cylinder.\n   * @param height The height of the Cylinder.\n   * @param numSegments The number of segments to build the cylinder out of.\n   */\n  constructor(radiusTop, radiusBottom, height, numSegments) {\n    if (radiusTop === void 0) {\n      radiusTop = 1;\n    }\n\n    if (radiusBottom === void 0) {\n      radiusBottom = 1;\n    }\n\n    if (height === void 0) {\n      height = 1;\n    }\n\n    if (numSegments === void 0) {\n      numSegments = 8;\n    }\n\n    if (radiusTop < 0) {\n      throw new Error('The cylinder radiusTop cannot be negative.');\n    }\n\n    if (radiusBottom < 0) {\n      throw new Error('The cylinder radiusBottom cannot be negative.');\n    }\n\n    const N = numSegments;\n    const vertices = [];\n    const axes = [];\n    const faces = [];\n    const bottomface = [];\n    const topface = [];\n    const cos = Math.cos;\n    const sin = Math.sin; // First bottom point\n\n    vertices.push(new Vec3(-radiusBottom * sin(0), -height * 0.5, radiusBottom * cos(0)));\n    bottomface.push(0); // First top point\n\n    vertices.push(new Vec3(-radiusTop * sin(0), height * 0.5, radiusTop * cos(0)));\n    topface.push(1);\n\n    for (let i = 0; i < N; i++) {\n      const theta = 2 * Math.PI / N * (i + 1);\n      const thetaN = 2 * Math.PI / N * (i + 0.5);\n\n      if (i < N - 1) {\n        // Bottom\n        vertices.push(new Vec3(-radiusBottom * sin(theta), -height * 0.5, radiusBottom * cos(theta)));\n        bottomface.push(2 * i + 2); // Top\n\n        vertices.push(new Vec3(-radiusTop * sin(theta), height * 0.5, radiusTop * cos(theta)));\n        topface.push(2 * i + 3); // Face\n\n        faces.push([2 * i, 2 * i + 1, 2 * i + 3, 2 * i + 2]);\n      } else {\n        faces.push([2 * i, 2 * i + 1, 1, 0]); // Connect\n      } // Axis: we can cut off half of them if we have even number of segments\n\n\n      if (N % 2 === 1 || i < N / 2) {\n        axes.push(new Vec3(-sin(thetaN), 0, cos(thetaN)));\n      }\n    }\n\n    faces.push(bottomface);\n    axes.push(new Vec3(0, 1, 0)); // Reorder top face\n\n    const temp = [];\n\n    for (let i = 0; i < topface.length; i++) {\n      temp.push(topface[topface.length - i - 1]);\n    }\n\n    faces.push(temp);\n    super({\n      vertices,\n      faces,\n      axes\n    });\n    this.type = Shape.types.CYLINDER;\n    this.radiusTop = radiusTop;\n    this.radiusBottom = radiusBottom;\n    this.height = height;\n    this.numSegments = numSegments;\n  }\n\n}\n\n/**\n * Particle shape.\n * @example\n *     const particleShape = new CANNON.Particle()\n *     const particleBody = new CANNON.Body({ mass: 1, shape: particleShape })\n *     world.addBody(particleBody)\n */\nclass Particle extends Shape {\n  constructor() {\n    super({\n      type: Shape.types.PARTICLE\n    });\n  }\n  /**\n   * calculateLocalInertia\n   */\n\n\n  calculateLocalInertia(mass, target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n\n    target.set(0, 0, 0);\n    return target;\n  }\n\n  volume() {\n    return 0;\n  }\n\n  updateBoundingSphereRadius() {\n    this.boundingSphereRadius = 0;\n  }\n\n  calculateWorldAABB(pos, quat, min, max) {\n    // Get each axis max\n    min.copy(pos);\n    max.copy(pos);\n  }\n\n}\n\n/**\n * A plane, facing in the Z direction. The plane has its surface at z=0 and everything below z=0 is assumed to be solid plane. To make the plane face in some other direction than z, you must put it inside a Body and rotate that body. See the demos.\n * @example\n *     const planeShape = new CANNON.Plane()\n *     const planeBody = new CANNON.Body({ mass: 0, shape:  planeShape })\n *     planeBody.quaternion.setFromEuler(-Math.PI / 2, 0, 0) // make it face up\n *     world.addBody(planeBody)\n */\nclass Plane extends Shape {\n  /** worldNormal */\n\n  /** worldNormalNeedsUpdate */\n  constructor() {\n    super({\n      type: Shape.types.PLANE\n    }); // World oriented normal\n\n    this.worldNormal = new Vec3();\n    this.worldNormalNeedsUpdate = true;\n    this.boundingSphereRadius = Number.MAX_VALUE;\n  }\n  /** computeWorldNormal */\n\n\n  computeWorldNormal(quat) {\n    const n = this.worldNormal;\n    n.set(0, 0, 1);\n    quat.vmult(n, n);\n    this.worldNormalNeedsUpdate = false;\n  }\n\n  calculateLocalInertia(mass, target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n\n    return target;\n  }\n\n  volume() {\n    return (// The plane is infinite...\n      Number.MAX_VALUE\n    );\n  }\n\n  calculateWorldAABB(pos, quat, min, max) {\n    // The plane AABB is infinite, except if the normal is pointing along any axis\n    tempNormal.set(0, 0, 1); // Default plane normal is z\n\n    quat.vmult(tempNormal, tempNormal);\n    const maxVal = Number.MAX_VALUE;\n    min.set(-maxVal, -maxVal, -maxVal);\n    max.set(maxVal, maxVal, maxVal);\n\n    if (tempNormal.x === 1) {\n      max.x = pos.x;\n    } else if (tempNormal.x === -1) {\n      min.x = pos.x;\n    }\n\n    if (tempNormal.y === 1) {\n      max.y = pos.y;\n    } else if (tempNormal.y === -1) {\n      min.y = pos.y;\n    }\n\n    if (tempNormal.z === 1) {\n      max.z = pos.z;\n    } else if (tempNormal.z === -1) {\n      min.z = pos.z;\n    }\n  }\n\n  updateBoundingSphereRadius() {\n    this.boundingSphereRadius = Number.MAX_VALUE;\n  }\n\n}\nconst tempNormal = new Vec3();\n\n/**\n * Heightfield shape class. Height data is given as an array. These data points are spread out evenly with a given distance.\n * @todo Should be possible to use along all axes, not just y\n * @todo should be possible to scale along all axes\n * @todo Refactor elementSize to elementSizeX and elementSizeY\n *\n * @example\n *     // Generate some height data (y-values).\n *     const data = []\n *     for (let i = 0; i < 1000; i++) {\n *         const y = 0.5 * Math.cos(0.2 * i)\n *         data.push(y)\n *     }\n *\n *     // Create the heightfield shape\n *     const heightfieldShape = new CANNON.Heightfield(data, {\n *         elementSize: 1 // Distance between the data points in X and Y directions\n *     })\n *     const heightfieldBody = new CANNON.Body({ shape: heightfieldShape })\n *     world.addBody(heightfieldBody)\n */\nclass Heightfield extends Shape {\n  /**\n   * An array of numbers, or height values, that are spread out along the x axis.\n   */\n\n  /**\n   * Max value of the data points in the data array.\n   */\n\n  /**\n   * Minimum value of the data points in the data array.\n   */\n\n  /**\n   * World spacing between the data points in X and Y direction.\n   * @todo elementSizeX and Y\n   * @default 1\n   */\n\n  /**\n   * @default true\n   */\n\n  /**\n   * @param data An array of numbers, or height values, that are spread out along the x axis.\n   */\n  constructor(data, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    options = Utils.defaults(options, {\n      maxValue: null,\n      minValue: null,\n      elementSize: 1\n    });\n    super({\n      type: Shape.types.HEIGHTFIELD\n    });\n    this.data = data;\n    this.maxValue = options.maxValue;\n    this.minValue = options.minValue;\n    this.elementSize = options.elementSize;\n\n    if (options.minValue === null) {\n      this.updateMinValue();\n    }\n\n    if (options.maxValue === null) {\n      this.updateMaxValue();\n    }\n\n    this.cacheEnabled = true;\n    this.pillarConvex = new ConvexPolyhedron();\n    this.pillarOffset = new Vec3();\n    this.updateBoundingSphereRadius(); // \"i_j_isUpper\" => { convex: ..., offset: ... }\n    // for example:\n    // _cachedPillars[\"0_2_1\"]\n\n    this._cachedPillars = {};\n  }\n  /**\n   * Call whenever you change the data array.\n   */\n\n\n  update() {\n    this._cachedPillars = {};\n  }\n  /**\n   * Update the `minValue` property\n   */\n\n\n  updateMinValue() {\n    const data = this.data;\n    let minValue = data[0][0];\n\n    for (let i = 0; i !== data.length; i++) {\n      for (let j = 0; j !== data[i].length; j++) {\n        const v = data[i][j];\n\n        if (v < minValue) {\n          minValue = v;\n        }\n      }\n    }\n\n    this.minValue = minValue;\n  }\n  /**\n   * Update the `maxValue` property\n   */\n\n\n  updateMaxValue() {\n    const data = this.data;\n    let maxValue = data[0][0];\n\n    for (let i = 0; i !== data.length; i++) {\n      for (let j = 0; j !== data[i].length; j++) {\n        const v = data[i][j];\n\n        if (v > maxValue) {\n          maxValue = v;\n        }\n      }\n    }\n\n    this.maxValue = maxValue;\n  }\n  /**\n   * Set the height value at an index. Don't forget to update maxValue and minValue after you're done.\n   */\n\n\n  setHeightValueAtIndex(xi, yi, value) {\n    const data = this.data;\n    data[xi][yi] = value; // Invalidate cache\n\n    this.clearCachedConvexTrianglePillar(xi, yi, false);\n\n    if (xi > 0) {\n      this.clearCachedConvexTrianglePillar(xi - 1, yi, true);\n      this.clearCachedConvexTrianglePillar(xi - 1, yi, false);\n    }\n\n    if (yi > 0) {\n      this.clearCachedConvexTrianglePillar(xi, yi - 1, true);\n      this.clearCachedConvexTrianglePillar(xi, yi - 1, false);\n    }\n\n    if (yi > 0 && xi > 0) {\n      this.clearCachedConvexTrianglePillar(xi - 1, yi - 1, true);\n    }\n  }\n  /**\n   * Get max/min in a rectangle in the matrix data\n   * @param result An array to store the results in.\n   * @return The result array, if it was passed in. Minimum will be at position 0 and max at 1.\n   */\n\n\n  getRectMinMax(iMinX, iMinY, iMaxX, iMaxY, result) {\n    if (result === void 0) {\n      result = [];\n    }\n\n    // Get max and min of the data\n    const data = this.data; // Set first value\n\n    let max = this.minValue;\n\n    for (let i = iMinX; i <= iMaxX; i++) {\n      for (let j = iMinY; j <= iMaxY; j++) {\n        const height = data[i][j];\n\n        if (height > max) {\n          max = height;\n        }\n      }\n    }\n\n    result[0] = this.minValue;\n    result[1] = max;\n  }\n  /**\n   * Get the index of a local position on the heightfield. The indexes indicate the rectangles, so if your terrain is made of N x N height data points, you will have rectangle indexes ranging from 0 to N-1.\n   * @param result Two-element array\n   * @param clamp If the position should be clamped to the heightfield edge.\n   */\n\n\n  getIndexOfPosition(x, y, result, clamp) {\n    // Get the index of the data points to test against\n    const w = this.elementSize;\n    const data = this.data;\n    let xi = Math.floor(x / w);\n    let yi = Math.floor(y / w);\n    result[0] = xi;\n    result[1] = yi;\n\n    if (clamp) {\n      // Clamp index to edges\n      if (xi < 0) {\n        xi = 0;\n      }\n\n      if (yi < 0) {\n        yi = 0;\n      }\n\n      if (xi >= data.length - 1) {\n        xi = data.length - 1;\n      }\n\n      if (yi >= data[0].length - 1) {\n        yi = data[0].length - 1;\n      }\n    } // Bail out if we are out of the terrain\n\n\n    if (xi < 0 || yi < 0 || xi >= data.length - 1 || yi >= data[0].length - 1) {\n      return false;\n    }\n\n    return true;\n  }\n\n  getTriangleAt(x, y, edgeClamp, a, b, c) {\n    const idx = getHeightAt_idx;\n    this.getIndexOfPosition(x, y, idx, edgeClamp);\n    let xi = idx[0];\n    let yi = idx[1];\n    const data = this.data;\n\n    if (edgeClamp) {\n      xi = Math.min(data.length - 2, Math.max(0, xi));\n      yi = Math.min(data[0].length - 2, Math.max(0, yi));\n    }\n\n    const elementSize = this.elementSize;\n    const lowerDist2 = (x / elementSize - xi) ** 2 + (y / elementSize - yi) ** 2;\n    const upperDist2 = (x / elementSize - (xi + 1)) ** 2 + (y / elementSize - (yi + 1)) ** 2;\n    const upper = lowerDist2 > upperDist2;\n    this.getTriangle(xi, yi, upper, a, b, c);\n    return upper;\n  }\n\n  getNormalAt(x, y, edgeClamp, result) {\n    const a = getNormalAt_a;\n    const b = getNormalAt_b;\n    const c = getNormalAt_c;\n    const e0 = getNormalAt_e0;\n    const e1 = getNormalAt_e1;\n    this.getTriangleAt(x, y, edgeClamp, a, b, c);\n    b.vsub(a, e0);\n    c.vsub(a, e1);\n    e0.cross(e1, result);\n    result.normalize();\n  }\n  /**\n   * Get an AABB of a square in the heightfield\n   * @param xi\n   * @param yi\n   * @param result\n   */\n\n\n  getAabbAtIndex(xi, yi, _ref) {\n    let {\n      lowerBound,\n      upperBound\n    } = _ref;\n    const data = this.data;\n    const elementSize = this.elementSize;\n    lowerBound.set(xi * elementSize, yi * elementSize, data[xi][yi]);\n    upperBound.set((xi + 1) * elementSize, (yi + 1) * elementSize, data[xi + 1][yi + 1]);\n  }\n  /**\n   * Get the height in the heightfield at a given position\n   */\n\n\n  getHeightAt(x, y, edgeClamp) {\n    const data = this.data;\n    const a = getHeightAt_a;\n    const b = getHeightAt_b;\n    const c = getHeightAt_c;\n    const idx = getHeightAt_idx;\n    this.getIndexOfPosition(x, y, idx, edgeClamp);\n    let xi = idx[0];\n    let yi = idx[1];\n\n    if (edgeClamp) {\n      xi = Math.min(data.length - 2, Math.max(0, xi));\n      yi = Math.min(data[0].length - 2, Math.max(0, yi));\n    }\n\n    const upper = this.getTriangleAt(x, y, edgeClamp, a, b, c);\n    barycentricWeights(x, y, a.x, a.y, b.x, b.y, c.x, c.y, getHeightAt_weights);\n    const w = getHeightAt_weights;\n\n    if (upper) {\n      // Top triangle verts\n      return data[xi + 1][yi + 1] * w.x + data[xi][yi + 1] * w.y + data[xi + 1][yi] * w.z;\n    } else {\n      // Top triangle verts\n      return data[xi][yi] * w.x + data[xi + 1][yi] * w.y + data[xi][yi + 1] * w.z;\n    }\n  }\n\n  getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle) {\n    return `${xi}_${yi}_${getUpperTriangle ? 1 : 0}`;\n  }\n\n  getCachedConvexTrianglePillar(xi, yi, getUpperTriangle) {\n    return this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)];\n  }\n\n  setCachedConvexTrianglePillar(xi, yi, getUpperTriangle, convex, offset) {\n    this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)] = {\n      convex,\n      offset\n    };\n  }\n\n  clearCachedConvexTrianglePillar(xi, yi, getUpperTriangle) {\n    delete this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)];\n  }\n  /**\n   * Get a triangle from the heightfield\n   */\n\n\n  getTriangle(xi, yi, upper, a, b, c) {\n    const data = this.data;\n    const elementSize = this.elementSize;\n\n    if (upper) {\n      // Top triangle verts\n      a.set((xi + 1) * elementSize, (yi + 1) * elementSize, data[xi + 1][yi + 1]);\n      b.set(xi * elementSize, (yi + 1) * elementSize, data[xi][yi + 1]);\n      c.set((xi + 1) * elementSize, yi * elementSize, data[xi + 1][yi]);\n    } else {\n      // Top triangle verts\n      a.set(xi * elementSize, yi * elementSize, data[xi][yi]);\n      b.set((xi + 1) * elementSize, yi * elementSize, data[xi + 1][yi]);\n      c.set(xi * elementSize, (yi + 1) * elementSize, data[xi][yi + 1]);\n    }\n  }\n  /**\n   * Get a triangle in the terrain in the form of a triangular convex shape.\n   */\n\n\n  getConvexTrianglePillar(xi, yi, getUpperTriangle) {\n    let result = this.pillarConvex;\n    let offsetResult = this.pillarOffset;\n\n    if (this.cacheEnabled) {\n      const data = this.getCachedConvexTrianglePillar(xi, yi, getUpperTriangle);\n\n      if (data) {\n        this.pillarConvex = data.convex;\n        this.pillarOffset = data.offset;\n        return;\n      }\n\n      result = new ConvexPolyhedron();\n      offsetResult = new Vec3();\n      this.pillarConvex = result;\n      this.pillarOffset = offsetResult;\n    }\n\n    const data = this.data;\n    const elementSize = this.elementSize;\n    const faces = result.faces; // Reuse verts if possible\n\n    result.vertices.length = 6;\n\n    for (let i = 0; i < 6; i++) {\n      if (!result.vertices[i]) {\n        result.vertices[i] = new Vec3();\n      }\n    } // Reuse faces if possible\n\n\n    faces.length = 5;\n\n    for (let i = 0; i < 5; i++) {\n      if (!faces[i]) {\n        faces[i] = [];\n      }\n    }\n\n    const verts = result.vertices;\n    const h = (Math.min(data[xi][yi], data[xi + 1][yi], data[xi][yi + 1], data[xi + 1][yi + 1]) - this.minValue) / 2 + this.minValue;\n\n    if (!getUpperTriangle) {\n      // Center of the triangle pillar - all polygons are given relative to this one\n      offsetResult.set((xi + 0.25) * elementSize, // sort of center of a triangle\n      (yi + 0.25) * elementSize, h // vertical center\n      ); // Top triangle verts\n\n      verts[0].set(-0.25 * elementSize, -0.25 * elementSize, data[xi][yi] - h);\n      verts[1].set(0.75 * elementSize, -0.25 * elementSize, data[xi + 1][yi] - h);\n      verts[2].set(-0.25 * elementSize, 0.75 * elementSize, data[xi][yi + 1] - h); // bottom triangle verts\n\n      verts[3].set(-0.25 * elementSize, -0.25 * elementSize, -Math.abs(h) - 1);\n      verts[4].set(0.75 * elementSize, -0.25 * elementSize, -Math.abs(h) - 1);\n      verts[5].set(-0.25 * elementSize, 0.75 * elementSize, -Math.abs(h) - 1); // top triangle\n\n      faces[0][0] = 0;\n      faces[0][1] = 1;\n      faces[0][2] = 2; // bottom triangle\n\n      faces[1][0] = 5;\n      faces[1][1] = 4;\n      faces[1][2] = 3; // -x facing quad\n\n      faces[2][0] = 0;\n      faces[2][1] = 2;\n      faces[2][2] = 5;\n      faces[2][3] = 3; // -y facing quad\n\n      faces[3][0] = 1;\n      faces[3][1] = 0;\n      faces[3][2] = 3;\n      faces[3][3] = 4; // +xy facing quad\n\n      faces[4][0] = 4;\n      faces[4][1] = 5;\n      faces[4][2] = 2;\n      faces[4][3] = 1;\n    } else {\n      // Center of the triangle pillar - all polygons are given relative to this one\n      offsetResult.set((xi + 0.75) * elementSize, // sort of center of a triangle\n      (yi + 0.75) * elementSize, h // vertical center\n      ); // Top triangle verts\n\n      verts[0].set(0.25 * elementSize, 0.25 * elementSize, data[xi + 1][yi + 1] - h);\n      verts[1].set(-0.75 * elementSize, 0.25 * elementSize, data[xi][yi + 1] - h);\n      verts[2].set(0.25 * elementSize, -0.75 * elementSize, data[xi + 1][yi] - h); // bottom triangle verts\n\n      verts[3].set(0.25 * elementSize, 0.25 * elementSize, -Math.abs(h) - 1);\n      verts[4].set(-0.75 * elementSize, 0.25 * elementSize, -Math.abs(h) - 1);\n      verts[5].set(0.25 * elementSize, -0.75 * elementSize, -Math.abs(h) - 1); // Top triangle\n\n      faces[0][0] = 0;\n      faces[0][1] = 1;\n      faces[0][2] = 2; // bottom triangle\n\n      faces[1][0] = 5;\n      faces[1][1] = 4;\n      faces[1][2] = 3; // +x facing quad\n\n      faces[2][0] = 2;\n      faces[2][1] = 5;\n      faces[2][2] = 3;\n      faces[2][3] = 0; // +y facing quad\n\n      faces[3][0] = 3;\n      faces[3][1] = 4;\n      faces[3][2] = 1;\n      faces[3][3] = 0; // -xy facing quad\n\n      faces[4][0] = 1;\n      faces[4][1] = 4;\n      faces[4][2] = 5;\n      faces[4][3] = 2;\n    }\n\n    result.computeNormals();\n    result.computeEdges();\n    result.updateBoundingSphereRadius();\n    this.setCachedConvexTrianglePillar(xi, yi, getUpperTriangle, result, offsetResult);\n  }\n\n  calculateLocalInertia(mass, target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n\n    target.set(0, 0, 0);\n    return target;\n  }\n\n  volume() {\n    return (// The terrain is infinite\n      Number.MAX_VALUE\n    );\n  }\n\n  calculateWorldAABB(pos, quat, min, max) {\n    /** @TODO do it properly */\n    min.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n    max.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n  }\n\n  updateBoundingSphereRadius() {\n    // Use the bounding box of the min/max values\n    const data = this.data;\n    const s = this.elementSize;\n    this.boundingSphereRadius = new Vec3(data.length * s, data[0].length * s, Math.max(Math.abs(this.maxValue), Math.abs(this.minValue))).length();\n  }\n  /**\n   * Sets the height values from an image. Currently only supported in browser.\n   */\n\n\n  setHeightsFromImage(image, scale) {\n    const {\n      x,\n      z,\n      y\n    } = scale;\n    const canvas = document.createElement('canvas');\n    canvas.width = image.width;\n    canvas.height = image.height;\n    const context = canvas.getContext('2d');\n    context.drawImage(image, 0, 0);\n    const imageData = context.getImageData(0, 0, image.width, image.height);\n    const matrix = this.data;\n    matrix.length = 0;\n    this.elementSize = Math.abs(x) / imageData.width;\n\n    for (let i = 0; i < imageData.height; i++) {\n      const row = [];\n\n      for (let j = 0; j < imageData.width; j++) {\n        const a = imageData.data[(i * imageData.height + j) * 4];\n        const b = imageData.data[(i * imageData.height + j) * 4 + 1];\n        const c = imageData.data[(i * imageData.height + j) * 4 + 2];\n        const height = (a + b + c) / 4 / 255 * z;\n\n        if (x < 0) {\n          row.push(height);\n        } else {\n          row.unshift(height);\n        }\n      }\n\n      if (y < 0) {\n        matrix.unshift(row);\n      } else {\n        matrix.push(row);\n      }\n    }\n\n    this.updateMaxValue();\n    this.updateMinValue();\n    this.update();\n  }\n\n}\nconst getHeightAt_idx = [];\nconst getHeightAt_weights = new Vec3();\nconst getHeightAt_a = new Vec3();\nconst getHeightAt_b = new Vec3();\nconst getHeightAt_c = new Vec3();\nconst getNormalAt_a = new Vec3();\nconst getNormalAt_b = new Vec3();\nconst getNormalAt_c = new Vec3();\nconst getNormalAt_e0 = new Vec3();\nconst getNormalAt_e1 = new Vec3(); // from https://en.wikipedia.org/wiki/Barycentric_coordinate_system\n\nfunction barycentricWeights(x, y, ax, ay, bx, by, cx, cy, result) {\n  result.x = ((by - cy) * (x - cx) + (cx - bx) * (y - cy)) / ((by - cy) * (ax - cx) + (cx - bx) * (ay - cy));\n  result.y = ((cy - ay) * (x - cx) + (ax - cx) * (y - cy)) / ((by - cy) * (ax - cx) + (cx - bx) * (ay - cy));\n  result.z = 1 - result.x - result.y;\n}\n\n/**\n * OctreeNode\n */\nclass OctreeNode {\n  /** The root node */\n\n  /** Boundary of this node */\n\n  /** Contained data at the current node level */\n\n  /** Children to this node */\n  constructor(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.root = options.root || null;\n    this.aabb = options.aabb ? options.aabb.clone() : new AABB();\n    this.data = [];\n    this.children = [];\n  }\n  /**\n   * reset\n   */\n\n\n  reset() {\n    this.children.length = this.data.length = 0;\n  }\n  /**\n   * Insert data into this node\n   * @return True if successful, otherwise false\n   */\n\n\n  insert(aabb, elementData, level) {\n    if (level === void 0) {\n      level = 0;\n    }\n\n    const nodeData = this.data; // Ignore objects that do not belong in this node\n\n    if (!this.aabb.contains(aabb)) {\n      return false; // object cannot be added\n    }\n\n    const children = this.children;\n    const maxDepth = this.maxDepth || this.root.maxDepth;\n\n    if (level < maxDepth) {\n      // Subdivide if there are no children yet\n      let subdivided = false;\n\n      if (!children.length) {\n        this.subdivide();\n        subdivided = true;\n      } // add to whichever node will accept it\n\n\n      for (let i = 0; i !== 8; i++) {\n        if (children[i].insert(aabb, elementData, level + 1)) {\n          return true;\n        }\n      }\n\n      if (subdivided) {\n        // No children accepted! Might as well just remove em since they contain none\n        children.length = 0;\n      }\n    } // Too deep, or children didnt want it. add it in current node\n\n\n    nodeData.push(elementData);\n    return true;\n  }\n  /**\n   * Create 8 equally sized children nodes and put them in the `children` array.\n   */\n\n\n  subdivide() {\n    const aabb = this.aabb;\n    const l = aabb.lowerBound;\n    const u = aabb.upperBound;\n    const children = this.children;\n    children.push(new OctreeNode({\n      aabb: new AABB({\n        lowerBound: new Vec3(0, 0, 0)\n      })\n    }), new OctreeNode({\n      aabb: new AABB({\n        lowerBound: new Vec3(1, 0, 0)\n      })\n    }), new OctreeNode({\n      aabb: new AABB({\n        lowerBound: new Vec3(1, 1, 0)\n      })\n    }), new OctreeNode({\n      aabb: new AABB({\n        lowerBound: new Vec3(1, 1, 1)\n      })\n    }), new OctreeNode({\n      aabb: new AABB({\n        lowerBound: new Vec3(0, 1, 1)\n      })\n    }), new OctreeNode({\n      aabb: new AABB({\n        lowerBound: new Vec3(0, 0, 1)\n      })\n    }), new OctreeNode({\n      aabb: new AABB({\n        lowerBound: new Vec3(1, 0, 1)\n      })\n    }), new OctreeNode({\n      aabb: new AABB({\n        lowerBound: new Vec3(0, 1, 0)\n      })\n    }));\n    u.vsub(l, halfDiagonal);\n    halfDiagonal.scale(0.5, halfDiagonal);\n    const root = this.root || this;\n\n    for (let i = 0; i !== 8; i++) {\n      const child = children[i]; // Set current node as root\n\n      child.root = root; // Compute bounds\n\n      const lowerBound = child.aabb.lowerBound;\n      lowerBound.x *= halfDiagonal.x;\n      lowerBound.y *= halfDiagonal.y;\n      lowerBound.z *= halfDiagonal.z;\n      lowerBound.vadd(l, lowerBound); // Upper bound is always lower bound + halfDiagonal\n\n      lowerBound.vadd(halfDiagonal, child.aabb.upperBound);\n    }\n  }\n  /**\n   * Get all data, potentially within an AABB\n   * @return The \"result\" object\n   */\n\n\n  aabbQuery(aabb, result) {\n    this.data; // abort if the range does not intersect this node\n    // if (!this.aabb.overlaps(aabb)){\n    //     return result;\n    // }\n    // Add objects at this level\n    // Array.prototype.push.apply(result, nodeData);\n    // Add child data\n    // @todo unwrap recursion into a queue / loop, that's faster in JS\n\n    this.children; // for (let i = 0, N = this.children.length; i !== N; i++) {\n    //     children[i].aabbQuery(aabb, result);\n    // }\n\n    const queue = [this];\n\n    while (queue.length) {\n      const node = queue.pop();\n\n      if (node.aabb.overlaps(aabb)) {\n        Array.prototype.push.apply(result, node.data);\n      }\n\n      Array.prototype.push.apply(queue, node.children);\n    }\n\n    return result;\n  }\n  /**\n   * Get all data, potentially intersected by a ray.\n   * @return The \"result\" object\n   */\n\n\n  rayQuery(ray, treeTransform, result) {\n    // Use aabb query for now.\n\n    /** @todo implement real ray query which needs less lookups */\n    ray.getAABB(tmpAABB);\n    tmpAABB.toLocalFrame(treeTransform, tmpAABB);\n    this.aabbQuery(tmpAABB, result);\n    return result;\n  }\n  /**\n   * removeEmptyNodes\n   */\n\n\n  removeEmptyNodes() {\n    for (let i = this.children.length - 1; i >= 0; i--) {\n      this.children[i].removeEmptyNodes();\n\n      if (!this.children[i].children.length && !this.children[i].data.length) {\n        this.children.splice(i, 1);\n      }\n    }\n  }\n\n}\n/**\n * Octree\n */\n\n\nclass Octree extends OctreeNode {\n  /**\n   * Maximum subdivision depth\n   * @default 8\n   */\n\n  /**\n   * @param aabb The total AABB of the tree\n   */\n  constructor(aabb, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    super({\n      root: null,\n      aabb\n    });\n    this.maxDepth = typeof options.maxDepth !== 'undefined' ? options.maxDepth : 8;\n  }\n\n}\nconst halfDiagonal = new Vec3();\nconst tmpAABB = new AABB();\n\n/**\n * Trimesh.\n * @example\n *     // How to make a mesh with a single triangle\n *     const vertices = [\n *         0, 0, 0, // vertex 0\n *         1, 0, 0, // vertex 1\n *         0, 1, 0  // vertex 2\n *     ]\n *     const indices = [\n *         0, 1, 2  // triangle 0\n *     ]\n *     const trimeshShape = new CANNON.Trimesh(vertices, indices)\n */\nclass Trimesh extends Shape {\n  /**\n   * vertices\n   */\n\n  /**\n   * Array of integers, indicating which vertices each triangle consists of. The length of this array is thus 3 times the number of triangles.\n   */\n\n  /**\n   * The normals data.\n   */\n\n  /**\n   * The local AABB of the mesh.\n   */\n\n  /**\n   * References to vertex pairs, making up all unique edges in the trimesh.\n   */\n\n  /**\n   * Local scaling of the mesh. Use .setScale() to set it.\n   */\n\n  /**\n   * The indexed triangles. Use .updateTree() to update it.\n   */\n  constructor(vertices, indices) {\n    super({\n      type: Shape.types.TRIMESH\n    });\n    this.vertices = new Float32Array(vertices);\n    this.indices = new Int16Array(indices);\n    this.normals = new Float32Array(indices.length);\n    this.aabb = new AABB();\n    this.edges = null;\n    this.scale = new Vec3(1, 1, 1);\n    this.tree = new Octree();\n    this.updateEdges();\n    this.updateNormals();\n    this.updateAABB();\n    this.updateBoundingSphereRadius();\n    this.updateTree();\n  }\n  /**\n   * updateTree\n   */\n\n\n  updateTree() {\n    const tree = this.tree;\n    tree.reset();\n    tree.aabb.copy(this.aabb);\n    const scale = this.scale; // The local mesh AABB is scaled, but the octree AABB should be unscaled\n\n    tree.aabb.lowerBound.x *= 1 / scale.x;\n    tree.aabb.lowerBound.y *= 1 / scale.y;\n    tree.aabb.lowerBound.z *= 1 / scale.z;\n    tree.aabb.upperBound.x *= 1 / scale.x;\n    tree.aabb.upperBound.y *= 1 / scale.y;\n    tree.aabb.upperBound.z *= 1 / scale.z; // Insert all triangles\n\n    const triangleAABB = new AABB();\n    const a = new Vec3();\n    const b = new Vec3();\n    const c = new Vec3();\n    const points = [a, b, c];\n\n    for (let i = 0; i < this.indices.length / 3; i++) {\n      //this.getTriangleVertices(i, a, b, c);\n      // Get unscaled triangle verts\n      const i3 = i * 3;\n\n      this._getUnscaledVertex(this.indices[i3], a);\n\n      this._getUnscaledVertex(this.indices[i3 + 1], b);\n\n      this._getUnscaledVertex(this.indices[i3 + 2], c);\n\n      triangleAABB.setFromPoints(points);\n      tree.insert(triangleAABB, i);\n    }\n\n    tree.removeEmptyNodes();\n  }\n  /**\n   * Get triangles in a local AABB from the trimesh.\n   * @param result An array of integers, referencing the queried triangles.\n   */\n\n\n  getTrianglesInAABB(aabb, result) {\n    unscaledAABB.copy(aabb); // Scale it to local\n\n    const scale = this.scale;\n    const isx = scale.x;\n    const isy = scale.y;\n    const isz = scale.z;\n    const l = unscaledAABB.lowerBound;\n    const u = unscaledAABB.upperBound;\n    l.x /= isx;\n    l.y /= isy;\n    l.z /= isz;\n    u.x /= isx;\n    u.y /= isy;\n    u.z /= isz;\n    return this.tree.aabbQuery(unscaledAABB, result);\n  }\n  /**\n   * setScale\n   */\n\n\n  setScale(scale) {\n    const wasUniform = this.scale.x === this.scale.y && this.scale.y === this.scale.z;\n    const isUniform = scale.x === scale.y && scale.y === scale.z;\n\n    if (!(wasUniform && isUniform)) {\n      // Non-uniform scaling. Need to update normals.\n      this.updateNormals();\n    }\n\n    this.scale.copy(scale);\n    this.updateAABB();\n    this.updateBoundingSphereRadius();\n  }\n  /**\n   * Compute the normals of the faces. Will save in the `.normals` array.\n   */\n\n\n  updateNormals() {\n    const n = computeNormals_n; // Generate normals\n\n    const normals = this.normals;\n\n    for (let i = 0; i < this.indices.length / 3; i++) {\n      const i3 = i * 3;\n      const a = this.indices[i3];\n      const b = this.indices[i3 + 1];\n      const c = this.indices[i3 + 2];\n      this.getVertex(a, va);\n      this.getVertex(b, vb);\n      this.getVertex(c, vc);\n      Trimesh.computeNormal(vb, va, vc, n);\n      normals[i3] = n.x;\n      normals[i3 + 1] = n.y;\n      normals[i3 + 2] = n.z;\n    }\n  }\n  /**\n   * Update the `.edges` property\n   */\n\n\n  updateEdges() {\n    const edges = {};\n\n    const add = (a, b) => {\n      const key = a < b ? `${a}_${b}` : `${b}_${a}`;\n      edges[key] = true;\n    };\n\n    for (let i = 0; i < this.indices.length / 3; i++) {\n      const i3 = i * 3;\n      const a = this.indices[i3];\n      const b = this.indices[i3 + 1];\n      const c = this.indices[i3 + 2];\n      add(a, b);\n      add(b, c);\n      add(c, a);\n    }\n\n    const keys = Object.keys(edges);\n    this.edges = new Int16Array(keys.length * 2);\n\n    for (let i = 0; i < keys.length; i++) {\n      const indices = keys[i].split('_');\n      this.edges[2 * i] = parseInt(indices[0], 10);\n      this.edges[2 * i + 1] = parseInt(indices[1], 10);\n    }\n  }\n  /**\n   * Get an edge vertex\n   * @param firstOrSecond 0 or 1, depending on which one of the vertices you need.\n   * @param vertexStore Where to store the result\n   */\n\n\n  getEdgeVertex(edgeIndex, firstOrSecond, vertexStore) {\n    const vertexIndex = this.edges[edgeIndex * 2 + (firstOrSecond ? 1 : 0)];\n    this.getVertex(vertexIndex, vertexStore);\n  }\n  /**\n   * Get a vector along an edge.\n   */\n\n\n  getEdgeVector(edgeIndex, vectorStore) {\n    const va = getEdgeVector_va;\n    const vb = getEdgeVector_vb;\n    this.getEdgeVertex(edgeIndex, 0, va);\n    this.getEdgeVertex(edgeIndex, 1, vb);\n    vb.vsub(va, vectorStore);\n  }\n  /**\n   * Get face normal given 3 vertices\n   */\n\n\n  static computeNormal(va, vb, vc, target) {\n    vb.vsub(va, ab);\n    vc.vsub(vb, cb);\n    cb.cross(ab, target);\n\n    if (!target.isZero()) {\n      target.normalize();\n    }\n  }\n  /**\n   * Get vertex i.\n   * @return The \"out\" vector object\n   */\n\n\n  getVertex(i, out) {\n    const scale = this.scale;\n\n    this._getUnscaledVertex(i, out);\n\n    out.x *= scale.x;\n    out.y *= scale.y;\n    out.z *= scale.z;\n    return out;\n  }\n  /**\n   * Get raw vertex i\n   * @return The \"out\" vector object\n   */\n\n\n  _getUnscaledVertex(i, out) {\n    const i3 = i * 3;\n    const vertices = this.vertices;\n    return out.set(vertices[i3], vertices[i3 + 1], vertices[i3 + 2]);\n  }\n  /**\n   * Get a vertex from the trimesh,transformed by the given position and quaternion.\n   * @return The \"out\" vector object\n   */\n\n\n  getWorldVertex(i, pos, quat, out) {\n    this.getVertex(i, out);\n    Transform.pointToWorldFrame(pos, quat, out, out);\n    return out;\n  }\n  /**\n   * Get the three vertices for triangle i.\n   */\n\n\n  getTriangleVertices(i, a, b, c) {\n    const i3 = i * 3;\n    this.getVertex(this.indices[i3], a);\n    this.getVertex(this.indices[i3 + 1], b);\n    this.getVertex(this.indices[i3 + 2], c);\n  }\n  /**\n   * Compute the normal of triangle i.\n   * @return The \"target\" vector object\n   */\n\n\n  getNormal(i, target) {\n    const i3 = i * 3;\n    return target.set(this.normals[i3], this.normals[i3 + 1], this.normals[i3 + 2]);\n  }\n  /**\n   * @return The \"target\" vector object\n   */\n\n\n  calculateLocalInertia(mass, target) {\n    // Approximate with box inertia\n    // Exact inertia calculation is overkill, but see http://geometrictools.com/Documentation/PolyhedralMassProperties.pdf for the correct way to do it\n    this.computeLocalAABB(cli_aabb);\n    const x = cli_aabb.upperBound.x - cli_aabb.lowerBound.x;\n    const y = cli_aabb.upperBound.y - cli_aabb.lowerBound.y;\n    const z = cli_aabb.upperBound.z - cli_aabb.lowerBound.z;\n    return target.set(1.0 / 12.0 * mass * (2 * y * 2 * y + 2 * z * 2 * z), 1.0 / 12.0 * mass * (2 * x * 2 * x + 2 * z * 2 * z), 1.0 / 12.0 * mass * (2 * y * 2 * y + 2 * x * 2 * x));\n  }\n  /**\n   * Compute the local AABB for the trimesh\n   */\n\n\n  computeLocalAABB(aabb) {\n    const l = aabb.lowerBound;\n    const u = aabb.upperBound;\n    const n = this.vertices.length;\n    this.vertices;\n    const v = computeLocalAABB_worldVert;\n    this.getVertex(0, v);\n    l.copy(v);\n    u.copy(v);\n\n    for (let i = 0; i !== n; i++) {\n      this.getVertex(i, v);\n\n      if (v.x < l.x) {\n        l.x = v.x;\n      } else if (v.x > u.x) {\n        u.x = v.x;\n      }\n\n      if (v.y < l.y) {\n        l.y = v.y;\n      } else if (v.y > u.y) {\n        u.y = v.y;\n      }\n\n      if (v.z < l.z) {\n        l.z = v.z;\n      } else if (v.z > u.z) {\n        u.z = v.z;\n      }\n    }\n  }\n  /**\n   * Update the `.aabb` property\n   */\n\n\n  updateAABB() {\n    this.computeLocalAABB(this.aabb);\n  }\n  /**\n   * Will update the `.boundingSphereRadius` property\n   */\n\n\n  updateBoundingSphereRadius() {\n    // Assume points are distributed with local (0,0,0) as center\n    let max2 = 0;\n    const vertices = this.vertices;\n    const v = new Vec3();\n\n    for (let i = 0, N = vertices.length / 3; i !== N; i++) {\n      this.getVertex(i, v);\n      const norm2 = v.lengthSquared();\n\n      if (norm2 > max2) {\n        max2 = norm2;\n      }\n    }\n\n    this.boundingSphereRadius = Math.sqrt(max2);\n  }\n  /**\n   * calculateWorldAABB\n   */\n\n\n  calculateWorldAABB(pos, quat, min, max) {\n    /*\n        const n = this.vertices.length / 3,\n            verts = this.vertices;\n        const minx,miny,minz,maxx,maxy,maxz;\n         const v = tempWorldVertex;\n        for(let i=0; i<n; i++){\n            this.getVertex(i, v);\n            quat.vmult(v, v);\n            pos.vadd(v, v);\n            if (v.x < minx || minx===undefined){\n                minx = v.x;\n            } else if(v.x > maxx || maxx===undefined){\n                maxx = v.x;\n            }\n             if (v.y < miny || miny===undefined){\n                miny = v.y;\n            } else if(v.y > maxy || maxy===undefined){\n                maxy = v.y;\n            }\n             if (v.z < minz || minz===undefined){\n                minz = v.z;\n            } else if(v.z > maxz || maxz===undefined){\n                maxz = v.z;\n            }\n        }\n        min.set(minx,miny,minz);\n        max.set(maxx,maxy,maxz);\n        */\n    // Faster approximation using local AABB\n    const frame = calculateWorldAABB_frame;\n    const result = calculateWorldAABB_aabb;\n    frame.position = pos;\n    frame.quaternion = quat;\n    this.aabb.toWorldFrame(frame, result);\n    min.copy(result.lowerBound);\n    max.copy(result.upperBound);\n  }\n  /**\n   * Get approximate volume\n   */\n\n\n  volume() {\n    return 4.0 * Math.PI * this.boundingSphereRadius / 3.0;\n  }\n  /**\n   * Create a Trimesh instance, shaped as a torus.\n   */\n\n\n  static createTorus(radius, tube, radialSegments, tubularSegments, arc) {\n    if (radius === void 0) {\n      radius = 1;\n    }\n\n    if (tube === void 0) {\n      tube = 0.5;\n    }\n\n    if (radialSegments === void 0) {\n      radialSegments = 8;\n    }\n\n    if (tubularSegments === void 0) {\n      tubularSegments = 6;\n    }\n\n    if (arc === void 0) {\n      arc = Math.PI * 2;\n    }\n\n    const vertices = [];\n    const indices = [];\n\n    for (let j = 0; j <= radialSegments; j++) {\n      for (let i = 0; i <= tubularSegments; i++) {\n        const u = i / tubularSegments * arc;\n        const v = j / radialSegments * Math.PI * 2;\n        const x = (radius + tube * Math.cos(v)) * Math.cos(u);\n        const y = (radius + tube * Math.cos(v)) * Math.sin(u);\n        const z = tube * Math.sin(v);\n        vertices.push(x, y, z);\n      }\n    }\n\n    for (let j = 1; j <= radialSegments; j++) {\n      for (let i = 1; i <= tubularSegments; i++) {\n        const a = (tubularSegments + 1) * j + i - 1;\n        const b = (tubularSegments + 1) * (j - 1) + i - 1;\n        const c = (tubularSegments + 1) * (j - 1) + i;\n        const d = (tubularSegments + 1) * j + i;\n        indices.push(a, b, d);\n        indices.push(b, c, d);\n      }\n    }\n\n    return new Trimesh(vertices, indices);\n  }\n\n}\nconst computeNormals_n = new Vec3();\nconst unscaledAABB = new AABB();\nconst getEdgeVector_va = new Vec3();\nconst getEdgeVector_vb = new Vec3();\nconst cb = new Vec3();\nconst ab = new Vec3();\nconst va = new Vec3();\nconst vb = new Vec3();\nconst vc = new Vec3();\nconst cli_aabb = new AABB();\nconst computeLocalAABB_worldVert = new Vec3();\nconst calculateWorldAABB_frame = new Transform();\nconst calculateWorldAABB_aabb = new AABB();\n\n/**\n * Constraint equation solver base class.\n */\nclass Solver {\n  /**\n   * All equations to be solved\n   */\n\n  /**\n   * @todo remove useless constructor\n   */\n  constructor() {\n    this.equations = [];\n  }\n  /**\n   * Should be implemented in subclasses!\n   * @todo use abstract\n   * @return number of iterations performed\n   */\n\n\n  solve(dt, world) {\n    return (// Should return the number of iterations done!\n      0\n    );\n  }\n  /**\n   * Add an equation\n   */\n\n\n  addEquation(eq) {\n    if (eq.enabled && !eq.bi.isTrigger && !eq.bj.isTrigger) {\n      this.equations.push(eq);\n    }\n  }\n  /**\n   * Remove an equation\n   */\n\n\n  removeEquation(eq) {\n    const eqs = this.equations;\n    const i = eqs.indexOf(eq);\n\n    if (i !== -1) {\n      eqs.splice(i, 1);\n    }\n  }\n  /**\n   * Add all equations\n   */\n\n\n  removeAllEquations() {\n    this.equations.length = 0;\n  }\n\n}\n\n/**\n * Constraint equation Gauss-Seidel solver.\n * @todo The spook parameters should be specified for each constraint, not globally.\n * @see https://www8.cs.umu.se/kurser/5DV058/VT09/lectures/spooknotes.pdf\n */\nclass GSSolver extends Solver {\n  /**\n   * The number of solver iterations determines quality of the constraints in the world.\n   * The more iterations, the more correct simulation. More iterations need more computations though. If you have a large gravity force in your world, you will need more iterations.\n   */\n\n  /**\n   * When tolerance is reached, the system is assumed to be converged.\n   */\n\n  /**\n   * @todo remove useless constructor\n   */\n  constructor() {\n    super();\n    this.iterations = 10;\n    this.tolerance = 1e-7;\n  }\n  /**\n   * Solve\n   * @return number of iterations performed\n   */\n\n\n  solve(dt, world) {\n    let iter = 0;\n    const maxIter = this.iterations;\n    const tolSquared = this.tolerance * this.tolerance;\n    const equations = this.equations;\n    const Neq = equations.length;\n    const bodies = world.bodies;\n    const Nbodies = bodies.length;\n    const h = dt;\n    let B;\n    let invC;\n    let deltalambda;\n    let deltalambdaTot;\n    let GWlambda;\n    let lambdaj; // Update solve mass\n\n    if (Neq !== 0) {\n      for (let i = 0; i !== Nbodies; i++) {\n        bodies[i].updateSolveMassProperties();\n      }\n    } // Things that do not change during iteration can be computed once\n\n\n    const invCs = GSSolver_solve_invCs;\n    const Bs = GSSolver_solve_Bs;\n    const lambda = GSSolver_solve_lambda;\n    invCs.length = Neq;\n    Bs.length = Neq;\n    lambda.length = Neq;\n\n    for (let i = 0; i !== Neq; i++) {\n      const c = equations[i];\n      lambda[i] = 0.0;\n      Bs[i] = c.computeB(h);\n      invCs[i] = 1.0 / c.computeC();\n    }\n\n    if (Neq !== 0) {\n      // Reset vlambda\n      for (let i = 0; i !== Nbodies; i++) {\n        const b = bodies[i];\n        const vlambda = b.vlambda;\n        const wlambda = b.wlambda;\n        vlambda.set(0, 0, 0);\n        wlambda.set(0, 0, 0);\n      } // Iterate over equations\n\n\n      for (iter = 0; iter !== maxIter; iter++) {\n        // Accumulate the total error for each iteration.\n        deltalambdaTot = 0.0;\n\n        for (let j = 0; j !== Neq; j++) {\n          const c = equations[j]; // Compute iteration\n\n          B = Bs[j];\n          invC = invCs[j];\n          lambdaj = lambda[j];\n          GWlambda = c.computeGWlambda();\n          deltalambda = invC * (B - GWlambda - c.eps * lambdaj); // Clamp if we are not within the min/max interval\n\n          if (lambdaj + deltalambda < c.minForce) {\n            deltalambda = c.minForce - lambdaj;\n          } else if (lambdaj + deltalambda > c.maxForce) {\n            deltalambda = c.maxForce - lambdaj;\n          }\n\n          lambda[j] += deltalambda;\n          deltalambdaTot += deltalambda > 0.0 ? deltalambda : -deltalambda; // abs(deltalambda)\n\n          c.addToWlambda(deltalambda);\n        } // If the total error is small enough - stop iterate\n\n\n        if (deltalambdaTot * deltalambdaTot < tolSquared) {\n          break;\n        }\n      } // Add result to velocity\n\n\n      for (let i = 0; i !== Nbodies; i++) {\n        const b = bodies[i];\n        const v = b.velocity;\n        const w = b.angularVelocity;\n        b.vlambda.vmul(b.linearFactor, b.vlambda);\n        v.vadd(b.vlambda, v);\n        b.wlambda.vmul(b.angularFactor, b.wlambda);\n        w.vadd(b.wlambda, w);\n      } // Set the `.multiplier` property of each equation\n\n\n      let l = equations.length;\n      const invDt = 1 / h;\n\n      while (l--) {\n        equations[l].multiplier = lambda[l] * invDt;\n      }\n    }\n\n    return iter;\n  }\n\n} // Just temporary number holders that we want to reuse each iteration.\n\nconst GSSolver_solve_lambda = [];\nconst GSSolver_solve_invCs = [];\nconst GSSolver_solve_Bs = [];\n\n/**\n * Splits the equations into islands and solves them independently. Can improve performance.\n */\nclass SplitSolver extends Solver {\n  /**\n   * The number of solver iterations determines quality of the constraints in the world. The more iterations, the more correct simulation. More iterations need more computations though. If you have a large gravity force in your world, you will need more iterations.\n   */\n\n  /**\n   * When tolerance is reached, the system is assumed to be converged.\n   */\n\n  /** subsolver */\n  constructor(subsolver) {\n    super();\n    this.iterations = 10;\n    this.tolerance = 1e-7;\n    this.subsolver = subsolver;\n    this.nodes = [];\n    this.nodePool = []; // Create needed nodes, reuse if possible\n\n    while (this.nodePool.length < 128) {\n      this.nodePool.push(this.createNode());\n    }\n  }\n  /**\n   * createNode\n   */\n\n\n  createNode() {\n    return {\n      body: null,\n      children: [],\n      eqs: [],\n      visited: false\n    };\n  }\n  /**\n   * Solve the subsystems\n   * @return number of iterations performed\n   */\n\n\n  solve(dt, world) {\n    const nodes = SplitSolver_solve_nodes;\n    const nodePool = this.nodePool;\n    const bodies = world.bodies;\n    const equations = this.equations;\n    const Neq = equations.length;\n    const Nbodies = bodies.length;\n    const subsolver = this.subsolver; // Create needed nodes, reuse if possible\n\n    while (nodePool.length < Nbodies) {\n      nodePool.push(this.createNode());\n    }\n\n    nodes.length = Nbodies;\n\n    for (let i = 0; i < Nbodies; i++) {\n      nodes[i] = nodePool[i];\n    } // Reset node values\n\n\n    for (let i = 0; i !== Nbodies; i++) {\n      const node = nodes[i];\n      node.body = bodies[i];\n      node.children.length = 0;\n      node.eqs.length = 0;\n      node.visited = false;\n    }\n\n    for (let k = 0; k !== Neq; k++) {\n      const eq = equations[k];\n      const i = bodies.indexOf(eq.bi);\n      const j = bodies.indexOf(eq.bj);\n      const ni = nodes[i];\n      const nj = nodes[j];\n      ni.children.push(nj);\n      ni.eqs.push(eq);\n      nj.children.push(ni);\n      nj.eqs.push(eq);\n    }\n\n    let child;\n    let n = 0;\n    let eqs = SplitSolver_solve_eqs;\n    subsolver.tolerance = this.tolerance;\n    subsolver.iterations = this.iterations;\n    const dummyWorld = SplitSolver_solve_dummyWorld;\n\n    while (child = getUnvisitedNode(nodes)) {\n      eqs.length = 0;\n      dummyWorld.bodies.length = 0;\n      bfs(child, visitFunc, dummyWorld.bodies, eqs);\n      const Neqs = eqs.length;\n      eqs = eqs.sort(sortById);\n\n      for (let i = 0; i !== Neqs; i++) {\n        subsolver.addEquation(eqs[i]);\n      }\n\n      subsolver.solve(dt, dummyWorld);\n      subsolver.removeAllEquations();\n      n++;\n    }\n\n    return n;\n  }\n\n} // Returns the number of subsystems\n\nconst SplitSolver_solve_nodes = []; // All allocated node objects\n\nconst SplitSolver_solve_eqs = []; // Temp array\n\nconst SplitSolver_solve_dummyWorld = {\n  bodies: []\n}; // Temp object\n\nconst STATIC = Body.STATIC;\n\nfunction getUnvisitedNode(nodes) {\n  const Nnodes = nodes.length;\n\n  for (let i = 0; i !== Nnodes; i++) {\n    const node = nodes[i];\n\n    if (!node.visited && !(node.body.type & STATIC)) {\n      return node;\n    }\n  }\n\n  return false;\n}\n\nconst queue = [];\n\nfunction bfs(root, visitFunc, bds, eqs) {\n  queue.push(root);\n  root.visited = true;\n  visitFunc(root, bds, eqs);\n\n  while (queue.length) {\n    const node = queue.pop(); // Loop over unvisited child nodes\n\n    let child;\n\n    while (child = getUnvisitedNode(node.children)) {\n      child.visited = true;\n      visitFunc(child, bds, eqs);\n      queue.push(child);\n    }\n  }\n}\n\nfunction visitFunc(node, bds, eqs) {\n  bds.push(node.body);\n  const Neqs = node.eqs.length;\n\n  for (let i = 0; i !== Neqs; i++) {\n    const eq = node.eqs[i];\n\n    if (!eqs.includes(eq)) {\n      eqs.push(eq);\n    }\n  }\n}\n\nfunction sortById(a, b) {\n  return b.id - a.id;\n}\n\n/**\n * For pooling objects that can be reused.\n */\nclass Pool {\n  constructor() {\n    this.objects = [];\n    this.type = Object;\n  }\n\n  /**\n   * Release an object after use\n   */\n  release() {\n    const Nargs = arguments.length;\n\n    for (let i = 0; i !== Nargs; i++) {\n      this.objects.push(i < 0 || arguments.length <= i ? undefined : arguments[i]);\n    }\n\n    return this;\n  }\n  /**\n   * Get an object\n   */\n\n\n  get() {\n    if (this.objects.length === 0) {\n      return this.constructObject();\n    } else {\n      return this.objects.pop();\n    }\n  }\n  /**\n   * Construct an object. Should be implemented in each subclass.\n   */\n\n\n  constructObject() {\n    throw new Error('constructObject() not implemented in this Pool subclass yet!');\n  }\n  /**\n   * @return Self, for chaining\n   */\n\n\n  resize(size) {\n    const objects = this.objects;\n\n    while (objects.length > size) {\n      objects.pop();\n    }\n\n    while (objects.length < size) {\n      objects.push(this.constructObject());\n    }\n\n    return this;\n  }\n\n}\n\n/**\n * Vec3Pool\n */\n\nclass Vec3Pool extends Pool {\n  constructor() {\n    super(...arguments);\n    this.type = Vec3;\n  }\n\n  /**\n   * Construct a vector\n   */\n  constructObject() {\n    return new Vec3();\n  }\n\n}\n\n// Naming rule: based of the order in SHAPE_TYPES,\n// the first part of the method is formed by the\n// shape type that comes before, in the second part\n// there is the shape type that comes after in the SHAPE_TYPES list\nconst COLLISION_TYPES = {\n  sphereSphere: Shape.types.SPHERE,\n  spherePlane: Shape.types.SPHERE | Shape.types.PLANE,\n  boxBox: Shape.types.BOX | Shape.types.BOX,\n  sphereBox: Shape.types.SPHERE | Shape.types.BOX,\n  planeBox: Shape.types.PLANE | Shape.types.BOX,\n  convexConvex: Shape.types.CONVEXPOLYHEDRON,\n  sphereConvex: Shape.types.SPHERE | Shape.types.CONVEXPOLYHEDRON,\n  planeConvex: Shape.types.PLANE | Shape.types.CONVEXPOLYHEDRON,\n  boxConvex: Shape.types.BOX | Shape.types.CONVEXPOLYHEDRON,\n  sphereHeightfield: Shape.types.SPHERE | Shape.types.HEIGHTFIELD,\n  boxHeightfield: Shape.types.BOX | Shape.types.HEIGHTFIELD,\n  convexHeightfield: Shape.types.CONVEXPOLYHEDRON | Shape.types.HEIGHTFIELD,\n  sphereParticle: Shape.types.PARTICLE | Shape.types.SPHERE,\n  planeParticle: Shape.types.PLANE | Shape.types.PARTICLE,\n  boxParticle: Shape.types.BOX | Shape.types.PARTICLE,\n  convexParticle: Shape.types.PARTICLE | Shape.types.CONVEXPOLYHEDRON,\n  cylinderCylinder: Shape.types.CYLINDER,\n  sphereCylinder: Shape.types.SPHERE | Shape.types.CYLINDER,\n  planeCylinder: Shape.types.PLANE | Shape.types.CYLINDER,\n  boxCylinder: Shape.types.BOX | Shape.types.CYLINDER,\n  convexCylinder: Shape.types.CONVEXPOLYHEDRON | Shape.types.CYLINDER,\n  heightfieldCylinder: Shape.types.HEIGHTFIELD | Shape.types.CYLINDER,\n  particleCylinder: Shape.types.PARTICLE | Shape.types.CYLINDER,\n  sphereTrimesh: Shape.types.SPHERE | Shape.types.TRIMESH,\n  planeTrimesh: Shape.types.PLANE | Shape.types.TRIMESH\n};\n\n/**\n * Helper class for the World. Generates ContactEquations.\n * @todo Sphere-ConvexPolyhedron contacts\n * @todo Contact reduction\n * @todo should move methods to prototype\n */\nclass Narrowphase {\n  /**\n   * Internal storage of pooled contact points.\n   */\n\n  /**\n   * Pooled vectors.\n   */\n  get [COLLISION_TYPES.sphereSphere]() {\n    return this.sphereSphere;\n  }\n\n  get [COLLISION_TYPES.spherePlane]() {\n    return this.spherePlane;\n  }\n\n  get [COLLISION_TYPES.boxBox]() {\n    return this.boxBox;\n  }\n\n  get [COLLISION_TYPES.sphereBox]() {\n    return this.sphereBox;\n  }\n\n  get [COLLISION_TYPES.planeBox]() {\n    return this.planeBox;\n  }\n\n  get [COLLISION_TYPES.convexConvex]() {\n    return this.convexConvex;\n  }\n\n  get [COLLISION_TYPES.sphereConvex]() {\n    return this.sphereConvex;\n  }\n\n  get [COLLISION_TYPES.planeConvex]() {\n    return this.planeConvex;\n  }\n\n  get [COLLISION_TYPES.boxConvex]() {\n    return this.boxConvex;\n  }\n\n  get [COLLISION_TYPES.sphereHeightfield]() {\n    return this.sphereHeightfield;\n  }\n\n  get [COLLISION_TYPES.boxHeightfield]() {\n    return this.boxHeightfield;\n  }\n\n  get [COLLISION_TYPES.convexHeightfield]() {\n    return this.convexHeightfield;\n  }\n\n  get [COLLISION_TYPES.sphereParticle]() {\n    return this.sphereParticle;\n  }\n\n  get [COLLISION_TYPES.planeParticle]() {\n    return this.planeParticle;\n  }\n\n  get [COLLISION_TYPES.boxParticle]() {\n    return this.boxParticle;\n  }\n\n  get [COLLISION_TYPES.convexParticle]() {\n    return this.convexParticle;\n  }\n\n  get [COLLISION_TYPES.cylinderCylinder]() {\n    return this.convexConvex;\n  }\n\n  get [COLLISION_TYPES.sphereCylinder]() {\n    return this.sphereConvex;\n  }\n\n  get [COLLISION_TYPES.planeCylinder]() {\n    return this.planeConvex;\n  }\n\n  get [COLLISION_TYPES.boxCylinder]() {\n    return this.boxConvex;\n  }\n\n  get [COLLISION_TYPES.convexCylinder]() {\n    return this.convexConvex;\n  }\n\n  get [COLLISION_TYPES.heightfieldCylinder]() {\n    return this.heightfieldCylinder;\n  }\n\n  get [COLLISION_TYPES.particleCylinder]() {\n    return this.particleCylinder;\n  }\n\n  get [COLLISION_TYPES.sphereTrimesh]() {\n    return this.sphereTrimesh;\n  }\n\n  get [COLLISION_TYPES.planeTrimesh]() {\n    return this.planeTrimesh;\n  } // get [COLLISION_TYPES.convexTrimesh]() {\n  //   return this.convexTrimesh\n  // }\n\n\n  constructor(world) {\n    this.contactPointPool = [];\n    this.frictionEquationPool = [];\n    this.result = [];\n    this.frictionResult = [];\n    this.v3pool = new Vec3Pool();\n    this.world = world;\n    this.currentContactMaterial = world.defaultContactMaterial;\n    this.enableFrictionReduction = false;\n  }\n  /**\n   * Make a contact object, by using the internal pool or creating a new one.\n   */\n\n\n  createContactEquation(bi, bj, si, sj, overrideShapeA, overrideShapeB) {\n    let c;\n\n    if (this.contactPointPool.length) {\n      c = this.contactPointPool.pop();\n      c.bi = bi;\n      c.bj = bj;\n    } else {\n      c = new ContactEquation(bi, bj);\n    }\n\n    c.enabled = bi.collisionResponse && bj.collisionResponse && si.collisionResponse && sj.collisionResponse;\n    const cm = this.currentContactMaterial;\n    c.restitution = cm.restitution;\n    c.setSpookParams(cm.contactEquationStiffness, cm.contactEquationRelaxation, this.world.dt);\n    const matA = si.material || bi.material;\n    const matB = sj.material || bj.material;\n\n    if (matA && matB && matA.restitution >= 0 && matB.restitution >= 0) {\n      c.restitution = matA.restitution * matB.restitution;\n    }\n\n    c.si = overrideShapeA || si;\n    c.sj = overrideShapeB || sj;\n    return c;\n  }\n\n  createFrictionEquationsFromContact(contactEquation, outArray) {\n    const bodyA = contactEquation.bi;\n    const bodyB = contactEquation.bj;\n    const shapeA = contactEquation.si;\n    const shapeB = contactEquation.sj;\n    const world = this.world;\n    const cm = this.currentContactMaterial; // If friction or restitution were specified in the material, use them\n\n    let friction = cm.friction;\n    const matA = shapeA.material || bodyA.material;\n    const matB = shapeB.material || bodyB.material;\n\n    if (matA && matB && matA.friction >= 0 && matB.friction >= 0) {\n      friction = matA.friction * matB.friction;\n    }\n\n    if (friction > 0) {\n      // Create 2 tangent equations\n      // Users may provide a force different from global gravity to use when computing contact friction.\n      const mug = friction * (world.frictionGravity || world.gravity).length();\n      let reducedMass = bodyA.invMass + bodyB.invMass;\n\n      if (reducedMass > 0) {\n        reducedMass = 1 / reducedMass;\n      }\n\n      const pool = this.frictionEquationPool;\n      const c1 = pool.length ? pool.pop() : new FrictionEquation(bodyA, bodyB, mug * reducedMass);\n      const c2 = pool.length ? pool.pop() : new FrictionEquation(bodyA, bodyB, mug * reducedMass);\n      c1.bi = c2.bi = bodyA;\n      c1.bj = c2.bj = bodyB;\n      c1.minForce = c2.minForce = -mug * reducedMass;\n      c1.maxForce = c2.maxForce = mug * reducedMass; // Copy over the relative vectors\n\n      c1.ri.copy(contactEquation.ri);\n      c1.rj.copy(contactEquation.rj);\n      c2.ri.copy(contactEquation.ri);\n      c2.rj.copy(contactEquation.rj); // Construct tangents\n\n      contactEquation.ni.tangents(c1.t, c2.t); // Set spook params\n\n      c1.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, world.dt);\n      c2.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, world.dt);\n      c1.enabled = c2.enabled = contactEquation.enabled;\n      outArray.push(c1, c2);\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Take the average N latest contact point on the plane.\n   */\n\n\n  createFrictionFromAverage(numContacts) {\n    // The last contactEquation\n    let c = this.result[this.result.length - 1]; // Create the result: two \"average\" friction equations\n\n    if (!this.createFrictionEquationsFromContact(c, this.frictionResult) || numContacts === 1) {\n      return;\n    }\n\n    const f1 = this.frictionResult[this.frictionResult.length - 2];\n    const f2 = this.frictionResult[this.frictionResult.length - 1];\n    averageNormal.setZero();\n    averageContactPointA.setZero();\n    averageContactPointB.setZero();\n    const bodyA = c.bi;\n    c.bj;\n\n    for (let i = 0; i !== numContacts; i++) {\n      c = this.result[this.result.length - 1 - i];\n\n      if (c.bi !== bodyA) {\n        averageNormal.vadd(c.ni, averageNormal);\n        averageContactPointA.vadd(c.ri, averageContactPointA);\n        averageContactPointB.vadd(c.rj, averageContactPointB);\n      } else {\n        averageNormal.vsub(c.ni, averageNormal);\n        averageContactPointA.vadd(c.rj, averageContactPointA);\n        averageContactPointB.vadd(c.ri, averageContactPointB);\n      }\n    }\n\n    const invNumContacts = 1 / numContacts;\n    averageContactPointA.scale(invNumContacts, f1.ri);\n    averageContactPointB.scale(invNumContacts, f1.rj);\n    f2.ri.copy(f1.ri); // Should be the same\n\n    f2.rj.copy(f1.rj);\n    averageNormal.normalize();\n    averageNormal.tangents(f1.t, f2.t); // return eq;\n  }\n  /**\n   * Generate all contacts between a list of body pairs\n   * @param p1 Array of body indices\n   * @param p2 Array of body indices\n   * @param result Array to store generated contacts\n   * @param oldcontacts Optional. Array of reusable contact objects\n   */\n\n\n  getContacts(p1, p2, world, result, oldcontacts, frictionResult, frictionPool) {\n    // Save old contact objects\n    this.contactPointPool = oldcontacts;\n    this.frictionEquationPool = frictionPool;\n    this.result = result;\n    this.frictionResult = frictionResult;\n    const qi = tmpQuat1;\n    const qj = tmpQuat2;\n    const xi = tmpVec1;\n    const xj = tmpVec2;\n\n    for (let k = 0, N = p1.length; k !== N; k++) {\n      // Get current collision bodies\n      const bi = p1[k];\n      const bj = p2[k]; // Get contact material\n\n      let bodyContactMaterial = null;\n\n      if (bi.material && bj.material) {\n        bodyContactMaterial = world.getContactMaterial(bi.material, bj.material) || null;\n      }\n\n      const justTest = bi.type & Body.KINEMATIC && bj.type & Body.STATIC || bi.type & Body.STATIC && bj.type & Body.KINEMATIC || bi.type & Body.KINEMATIC && bj.type & Body.KINEMATIC;\n\n      for (let i = 0; i < bi.shapes.length; i++) {\n        bi.quaternion.mult(bi.shapeOrientations[i], qi);\n        bi.quaternion.vmult(bi.shapeOffsets[i], xi);\n        xi.vadd(bi.position, xi);\n        const si = bi.shapes[i];\n\n        for (let j = 0; j < bj.shapes.length; j++) {\n          // Compute world transform of shapes\n          bj.quaternion.mult(bj.shapeOrientations[j], qj);\n          bj.quaternion.vmult(bj.shapeOffsets[j], xj);\n          xj.vadd(bj.position, xj);\n          const sj = bj.shapes[j];\n\n          if (!(si.collisionFilterMask & sj.collisionFilterGroup && sj.collisionFilterMask & si.collisionFilterGroup)) {\n            continue;\n          }\n\n          if (xi.distanceTo(xj) > si.boundingSphereRadius + sj.boundingSphereRadius) {\n            continue;\n          } // Get collision material\n\n\n          let shapeContactMaterial = null;\n\n          if (si.material && sj.material) {\n            shapeContactMaterial = world.getContactMaterial(si.material, sj.material) || null;\n          }\n\n          this.currentContactMaterial = shapeContactMaterial || bodyContactMaterial || world.defaultContactMaterial; // Get contacts\n\n          const resolverIndex = si.type | sj.type;\n          const resolver = this[resolverIndex];\n\n          if (resolver) {\n            let retval = false; // TO DO: investigate why sphereParticle and convexParticle\n            // resolvers expect si and sj shapes to be in reverse order\n            // (i.e. larger integer value type first instead of smaller first)\n\n            if (si.type < sj.type) {\n              retval = resolver.call(this, si, sj, xi, xj, qi, qj, bi, bj, si, sj, justTest);\n            } else {\n              retval = resolver.call(this, sj, si, xj, xi, qj, qi, bj, bi, si, sj, justTest);\n            }\n\n            if (retval && justTest) {\n              // Register overlap\n              world.shapeOverlapKeeper.set(si.id, sj.id);\n              world.bodyOverlapKeeper.set(bi.id, bj.id);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  sphereSphere(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    if (justTest) {\n      return xi.distanceSquared(xj) < (si.radius + sj.radius) ** 2;\n    } // We will have only one contact in this case\n\n\n    const contactEq = this.createContactEquation(bi, bj, si, sj, rsi, rsj); // Contact normal\n\n    xj.vsub(xi, contactEq.ni);\n    contactEq.ni.normalize(); // Contact point locations\n\n    contactEq.ri.copy(contactEq.ni);\n    contactEq.rj.copy(contactEq.ni);\n    contactEq.ri.scale(si.radius, contactEq.ri);\n    contactEq.rj.scale(-sj.radius, contactEq.rj);\n    contactEq.ri.vadd(xi, contactEq.ri);\n    contactEq.ri.vsub(bi.position, contactEq.ri);\n    contactEq.rj.vadd(xj, contactEq.rj);\n    contactEq.rj.vsub(bj.position, contactEq.rj);\n    this.result.push(contactEq);\n    this.createFrictionEquationsFromContact(contactEq, this.frictionResult);\n  }\n\n  spherePlane(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    // We will have one contact in this case\n    const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj); // Contact normal\n\n    r.ni.set(0, 0, 1);\n    qj.vmult(r.ni, r.ni);\n    r.ni.negate(r.ni); // body i is the sphere, flip normal\n\n    r.ni.normalize(); // Needed?\n    // Vector from sphere center to contact point\n\n    r.ni.scale(si.radius, r.ri); // Project down sphere on plane\n\n    xi.vsub(xj, point_on_plane_to_sphere);\n    r.ni.scale(r.ni.dot(point_on_plane_to_sphere), plane_to_sphere_ortho);\n    point_on_plane_to_sphere.vsub(plane_to_sphere_ortho, r.rj); // The sphere position projected to plane\n\n    if (-point_on_plane_to_sphere.dot(r.ni) <= si.radius) {\n      if (justTest) {\n        return true;\n      } // Make it relative to the body\n\n\n      const ri = r.ri;\n      const rj = r.rj;\n      ri.vadd(xi, ri);\n      ri.vsub(bi.position, ri);\n      rj.vadd(xj, rj);\n      rj.vsub(bj.position, rj);\n      this.result.push(r);\n      this.createFrictionEquationsFromContact(r, this.frictionResult);\n    }\n  }\n\n  boxBox(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    si.convexPolyhedronRepresentation.material = si.material;\n    sj.convexPolyhedronRepresentation.material = sj.material;\n    si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;\n    sj.convexPolyhedronRepresentation.collisionResponse = sj.collisionResponse;\n    return this.convexConvex(si.convexPolyhedronRepresentation, sj.convexPolyhedronRepresentation, xi, xj, qi, qj, bi, bj, si, sj, justTest);\n  }\n\n  sphereBox(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    const v3pool = this.v3pool; // we refer to the box as body j\n\n    const sides = sphereBox_sides;\n    xi.vsub(xj, box_to_sphere);\n    sj.getSideNormals(sides, qj);\n    const R = si.radius;\n\n    let found = false; // Store the resulting side penetration info\n\n    const side_ns = sphereBox_side_ns;\n    const side_ns1 = sphereBox_side_ns1;\n    const side_ns2 = sphereBox_side_ns2;\n    let side_h = null;\n    let side_penetrations = 0;\n    let side_dot1 = 0;\n    let side_dot2 = 0;\n    let side_distance = null;\n\n    for (let idx = 0, nsides = sides.length; idx !== nsides && found === false; idx++) {\n      // Get the plane side normal (ns)\n      const ns = sphereBox_ns;\n      ns.copy(sides[idx]);\n      const h = ns.length();\n      ns.normalize(); // The normal/distance dot product tells which side of the plane we are\n\n      const dot = box_to_sphere.dot(ns);\n\n      if (dot < h + R && dot > 0) {\n        // Intersects plane. Now check the other two dimensions\n        const ns1 = sphereBox_ns1;\n        const ns2 = sphereBox_ns2;\n        ns1.copy(sides[(idx + 1) % 3]);\n        ns2.copy(sides[(idx + 2) % 3]);\n        const h1 = ns1.length();\n        const h2 = ns2.length();\n        ns1.normalize();\n        ns2.normalize();\n        const dot1 = box_to_sphere.dot(ns1);\n        const dot2 = box_to_sphere.dot(ns2);\n\n        if (dot1 < h1 && dot1 > -h1 && dot2 < h2 && dot2 > -h2) {\n          const dist = Math.abs(dot - h - R);\n\n          if (side_distance === null || dist < side_distance) {\n            side_distance = dist;\n            side_dot1 = dot1;\n            side_dot2 = dot2;\n            side_h = h;\n            side_ns.copy(ns);\n            side_ns1.copy(ns1);\n            side_ns2.copy(ns2);\n            side_penetrations++;\n\n            if (justTest) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n\n    if (side_penetrations) {\n      found = true;\n      const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n      side_ns.scale(-R, r.ri); // Sphere r\n\n      r.ni.copy(side_ns);\n      r.ni.negate(r.ni); // Normal should be out of sphere\n\n      side_ns.scale(side_h, side_ns);\n      side_ns1.scale(side_dot1, side_ns1);\n      side_ns.vadd(side_ns1, side_ns);\n      side_ns2.scale(side_dot2, side_ns2);\n      side_ns.vadd(side_ns2, r.rj); // Make relative to bodies\n\n      r.ri.vadd(xi, r.ri);\n      r.ri.vsub(bi.position, r.ri);\n      r.rj.vadd(xj, r.rj);\n      r.rj.vsub(bj.position, r.rj);\n      this.result.push(r);\n      this.createFrictionEquationsFromContact(r, this.frictionResult);\n    } // Check corners\n\n\n    let rj = v3pool.get();\n    const sphere_to_corner = sphereBox_sphere_to_corner;\n\n    for (let j = 0; j !== 2 && !found; j++) {\n      for (let k = 0; k !== 2 && !found; k++) {\n        for (let l = 0; l !== 2 && !found; l++) {\n          rj.set(0, 0, 0);\n\n          if (j) {\n            rj.vadd(sides[0], rj);\n          } else {\n            rj.vsub(sides[0], rj);\n          }\n\n          if (k) {\n            rj.vadd(sides[1], rj);\n          } else {\n            rj.vsub(sides[1], rj);\n          }\n\n          if (l) {\n            rj.vadd(sides[2], rj);\n          } else {\n            rj.vsub(sides[2], rj);\n          } // World position of corner\n\n\n          xj.vadd(rj, sphere_to_corner);\n          sphere_to_corner.vsub(xi, sphere_to_corner);\n\n          if (sphere_to_corner.lengthSquared() < R * R) {\n            if (justTest) {\n              return true;\n            }\n\n            found = true;\n            const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n            r.ri.copy(sphere_to_corner);\n            r.ri.normalize();\n            r.ni.copy(r.ri);\n            r.ri.scale(R, r.ri);\n            r.rj.copy(rj); // Make relative to bodies\n\n            r.ri.vadd(xi, r.ri);\n            r.ri.vsub(bi.position, r.ri);\n            r.rj.vadd(xj, r.rj);\n            r.rj.vsub(bj.position, r.rj);\n            this.result.push(r);\n            this.createFrictionEquationsFromContact(r, this.frictionResult);\n          }\n        }\n      }\n    }\n\n    v3pool.release(rj);\n    rj = null; // Check edges\n\n    const edgeTangent = v3pool.get();\n    const edgeCenter = v3pool.get();\n    const r = v3pool.get(); // r = edge center to sphere center\n\n    const orthogonal = v3pool.get();\n    const dist = v3pool.get();\n    const Nsides = sides.length;\n\n    for (let j = 0; j !== Nsides && !found; j++) {\n      for (let k = 0; k !== Nsides && !found; k++) {\n        if (j % 3 !== k % 3) {\n          // Get edge tangent\n          sides[k].cross(sides[j], edgeTangent);\n          edgeTangent.normalize();\n          sides[j].vadd(sides[k], edgeCenter);\n          r.copy(xi);\n          r.vsub(edgeCenter, r);\n          r.vsub(xj, r);\n          const orthonorm = r.dot(edgeTangent); // distance from edge center to sphere center in the tangent direction\n\n          edgeTangent.scale(orthonorm, orthogonal); // Vector from edge center to sphere center in the tangent direction\n          // Find the third side orthogonal to this one\n\n          let l = 0;\n\n          while (l === j % 3 || l === k % 3) {\n            l++;\n          } // vec from edge center to sphere projected to the plane orthogonal to the edge tangent\n\n\n          dist.copy(xi);\n          dist.vsub(orthogonal, dist);\n          dist.vsub(edgeCenter, dist);\n          dist.vsub(xj, dist); // Distances in tangent direction and distance in the plane orthogonal to it\n\n          const tdist = Math.abs(orthonorm);\n          const ndist = dist.length();\n\n          if (tdist < sides[l].length() && ndist < R) {\n            if (justTest) {\n              return true;\n            }\n\n            found = true;\n            const res = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n            edgeCenter.vadd(orthogonal, res.rj); // box rj\n\n            res.rj.copy(res.rj);\n            dist.negate(res.ni);\n            res.ni.normalize();\n            res.ri.copy(res.rj);\n            res.ri.vadd(xj, res.ri);\n            res.ri.vsub(xi, res.ri);\n            res.ri.normalize();\n            res.ri.scale(R, res.ri); // Make relative to bodies\n\n            res.ri.vadd(xi, res.ri);\n            res.ri.vsub(bi.position, res.ri);\n            res.rj.vadd(xj, res.rj);\n            res.rj.vsub(bj.position, res.rj);\n            this.result.push(res);\n            this.createFrictionEquationsFromContact(res, this.frictionResult);\n          }\n        }\n      }\n    }\n\n    v3pool.release(edgeTangent, edgeCenter, r, orthogonal, dist);\n  }\n\n  planeBox(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    sj.convexPolyhedronRepresentation.material = sj.material;\n    sj.convexPolyhedronRepresentation.collisionResponse = sj.collisionResponse;\n    sj.convexPolyhedronRepresentation.id = sj.id;\n    return this.planeConvex(si, sj.convexPolyhedronRepresentation, xi, xj, qi, qj, bi, bj, si, sj, justTest);\n  }\n\n  convexConvex(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest, faceListA, faceListB) {\n    const sepAxis = convexConvex_sepAxis;\n\n    if (xi.distanceTo(xj) > si.boundingSphereRadius + sj.boundingSphereRadius) {\n      return;\n    }\n\n    if (si.findSeparatingAxis(sj, xi, qi, xj, qj, sepAxis, faceListA, faceListB)) {\n      const res = [];\n      const q = convexConvex_q;\n      si.clipAgainstHull(xi, qi, sj, xj, qj, sepAxis, -100, 100, res);\n      let numContacts = 0;\n\n      for (let j = 0; j !== res.length; j++) {\n        if (justTest) {\n          return true;\n        }\n\n        const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n        const ri = r.ri;\n        const rj = r.rj;\n        sepAxis.negate(r.ni);\n        res[j].normal.negate(q);\n        q.scale(res[j].depth, q);\n        res[j].point.vadd(q, ri);\n        rj.copy(res[j].point); // Contact points are in world coordinates. Transform back to relative\n\n        ri.vsub(xi, ri);\n        rj.vsub(xj, rj); // Make relative to bodies\n\n        ri.vadd(xi, ri);\n        ri.vsub(bi.position, ri);\n        rj.vadd(xj, rj);\n        rj.vsub(bj.position, rj);\n        this.result.push(r);\n        numContacts++;\n\n        if (!this.enableFrictionReduction) {\n          this.createFrictionEquationsFromContact(r, this.frictionResult);\n        }\n      }\n\n      if (this.enableFrictionReduction && numContacts) {\n        this.createFrictionFromAverage(numContacts);\n      }\n    }\n  }\n\n  sphereConvex(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    const v3pool = this.v3pool;\n    xi.vsub(xj, convex_to_sphere);\n    const normals = sj.faceNormals;\n    const faces = sj.faces;\n    const verts = sj.vertices;\n    const R = si.radius;\n    //     return;\n    // }\n\n    let found = false; // Check corners\n\n    for (let i = 0; i !== verts.length; i++) {\n      const v = verts[i]; // World position of corner\n\n      const worldCorner = sphereConvex_worldCorner;\n      qj.vmult(v, worldCorner);\n      xj.vadd(worldCorner, worldCorner);\n      const sphere_to_corner = sphereConvex_sphereToCorner;\n      worldCorner.vsub(xi, sphere_to_corner);\n\n      if (sphere_to_corner.lengthSquared() < R * R) {\n        if (justTest) {\n          return true;\n        }\n\n        found = true;\n        const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n        r.ri.copy(sphere_to_corner);\n        r.ri.normalize();\n        r.ni.copy(r.ri);\n        r.ri.scale(R, r.ri);\n        worldCorner.vsub(xj, r.rj); // Should be relative to the body.\n\n        r.ri.vadd(xi, r.ri);\n        r.ri.vsub(bi.position, r.ri); // Should be relative to the body.\n\n        r.rj.vadd(xj, r.rj);\n        r.rj.vsub(bj.position, r.rj);\n        this.result.push(r);\n        this.createFrictionEquationsFromContact(r, this.frictionResult);\n        return;\n      }\n    } // Check side (plane) intersections\n\n\n    for (let i = 0, nfaces = faces.length; i !== nfaces && found === false; i++) {\n      const normal = normals[i];\n      const face = faces[i]; // Get world-transformed normal of the face\n\n      const worldNormal = sphereConvex_worldNormal;\n      qj.vmult(normal, worldNormal); // Get a world vertex from the face\n\n      const worldPoint = sphereConvex_worldPoint;\n      qj.vmult(verts[face[0]], worldPoint);\n      worldPoint.vadd(xj, worldPoint); // Get a point on the sphere, closest to the face normal\n\n      const worldSpherePointClosestToPlane = sphereConvex_worldSpherePointClosestToPlane;\n      worldNormal.scale(-R, worldSpherePointClosestToPlane);\n      xi.vadd(worldSpherePointClosestToPlane, worldSpherePointClosestToPlane); // Vector from a face point to the closest point on the sphere\n\n      const penetrationVec = sphereConvex_penetrationVec;\n      worldSpherePointClosestToPlane.vsub(worldPoint, penetrationVec); // The penetration. Negative value means overlap.\n\n      const penetration = penetrationVec.dot(worldNormal);\n      const worldPointToSphere = sphereConvex_sphereToWorldPoint;\n      xi.vsub(worldPoint, worldPointToSphere);\n\n      if (penetration < 0 && worldPointToSphere.dot(worldNormal) > 0) {\n        // Intersects plane. Now check if the sphere is inside the face polygon\n        const faceVerts = []; // Face vertices, in world coords\n\n        for (let j = 0, Nverts = face.length; j !== Nverts; j++) {\n          const worldVertex = v3pool.get();\n          qj.vmult(verts[face[j]], worldVertex);\n          xj.vadd(worldVertex, worldVertex);\n          faceVerts.push(worldVertex);\n        }\n\n        if (pointInPolygon(faceVerts, worldNormal, xi)) {\n          // Is the sphere center in the face polygon?\n          if (justTest) {\n            return true;\n          }\n\n          found = true;\n          const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n          worldNormal.scale(-R, r.ri); // Contact offset, from sphere center to contact\n\n          worldNormal.negate(r.ni); // Normal pointing out of sphere\n\n          const penetrationVec2 = v3pool.get();\n          worldNormal.scale(-penetration, penetrationVec2);\n          const penetrationSpherePoint = v3pool.get();\n          worldNormal.scale(-R, penetrationSpherePoint); //xi.vsub(xj).vadd(penetrationSpherePoint).vadd(penetrationVec2 , r.rj);\n\n          xi.vsub(xj, r.rj);\n          r.rj.vadd(penetrationSpherePoint, r.rj);\n          r.rj.vadd(penetrationVec2, r.rj); // Should be relative to the body.\n\n          r.rj.vadd(xj, r.rj);\n          r.rj.vsub(bj.position, r.rj); // Should be relative to the body.\n\n          r.ri.vadd(xi, r.ri);\n          r.ri.vsub(bi.position, r.ri);\n          v3pool.release(penetrationVec2);\n          v3pool.release(penetrationSpherePoint);\n          this.result.push(r);\n          this.createFrictionEquationsFromContact(r, this.frictionResult); // Release world vertices\n\n          for (let j = 0, Nfaceverts = faceVerts.length; j !== Nfaceverts; j++) {\n            v3pool.release(faceVerts[j]);\n          }\n\n          return; // We only expect *one* face contact\n        } else {\n          // Edge?\n          for (let j = 0; j !== face.length; j++) {\n            // Get two world transformed vertices\n            const v1 = v3pool.get();\n            const v2 = v3pool.get();\n            qj.vmult(verts[face[(j + 1) % face.length]], v1);\n            qj.vmult(verts[face[(j + 2) % face.length]], v2);\n            xj.vadd(v1, v1);\n            xj.vadd(v2, v2); // Construct edge vector\n\n            const edge = sphereConvex_edge;\n            v2.vsub(v1, edge); // Construct the same vector, but normalized\n\n            const edgeUnit = sphereConvex_edgeUnit;\n            edge.unit(edgeUnit); // p is xi projected onto the edge\n\n            const p = v3pool.get();\n            const v1_to_xi = v3pool.get();\n            xi.vsub(v1, v1_to_xi);\n            const dot = v1_to_xi.dot(edgeUnit);\n            edgeUnit.scale(dot, p);\n            p.vadd(v1, p); // Compute a vector from p to the center of the sphere\n\n            const xi_to_p = v3pool.get();\n            p.vsub(xi, xi_to_p); // Collision if the edge-sphere distance is less than the radius\n            // AND if p is in between v1 and v2\n\n            if (dot > 0 && dot * dot < edge.lengthSquared() && xi_to_p.lengthSquared() < R * R) {\n              // Collision if the edge-sphere distance is less than the radius\n              // Edge contact!\n              if (justTest) {\n                return true;\n              }\n\n              const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n              p.vsub(xj, r.rj);\n              p.vsub(xi, r.ni);\n              r.ni.normalize();\n              r.ni.scale(R, r.ri); // Should be relative to the body.\n\n              r.rj.vadd(xj, r.rj);\n              r.rj.vsub(bj.position, r.rj); // Should be relative to the body.\n\n              r.ri.vadd(xi, r.ri);\n              r.ri.vsub(bi.position, r.ri);\n              this.result.push(r);\n              this.createFrictionEquationsFromContact(r, this.frictionResult); // Release world vertices\n\n              for (let j = 0, Nfaceverts = faceVerts.length; j !== Nfaceverts; j++) {\n                v3pool.release(faceVerts[j]);\n              }\n\n              v3pool.release(v1);\n              v3pool.release(v2);\n              v3pool.release(p);\n              v3pool.release(xi_to_p);\n              v3pool.release(v1_to_xi);\n              return;\n            }\n\n            v3pool.release(v1);\n            v3pool.release(v2);\n            v3pool.release(p);\n            v3pool.release(xi_to_p);\n            v3pool.release(v1_to_xi);\n          }\n        } // Release world vertices\n\n\n        for (let j = 0, Nfaceverts = faceVerts.length; j !== Nfaceverts; j++) {\n          v3pool.release(faceVerts[j]);\n        }\n      }\n    }\n  }\n\n  planeConvex(planeShape, convexShape, planePosition, convexPosition, planeQuat, convexQuat, planeBody, convexBody, si, sj, justTest) {\n    // Simply return the points behind the plane.\n    const worldVertex = planeConvex_v;\n    const worldNormal = planeConvex_normal;\n    worldNormal.set(0, 0, 1);\n    planeQuat.vmult(worldNormal, worldNormal); // Turn normal according to plane orientation\n\n    let numContacts = 0;\n    const relpos = planeConvex_relpos;\n\n    for (let i = 0; i !== convexShape.vertices.length; i++) {\n      // Get world convex vertex\n      worldVertex.copy(convexShape.vertices[i]);\n      convexQuat.vmult(worldVertex, worldVertex);\n      convexPosition.vadd(worldVertex, worldVertex);\n      worldVertex.vsub(planePosition, relpos);\n      const dot = worldNormal.dot(relpos);\n\n      if (dot <= 0.0) {\n        if (justTest) {\n          return true;\n        }\n\n        const r = this.createContactEquation(planeBody, convexBody, planeShape, convexShape, si, sj); // Get vertex position projected on plane\n\n        const projected = planeConvex_projected;\n        worldNormal.scale(worldNormal.dot(relpos), projected);\n        worldVertex.vsub(projected, projected);\n        projected.vsub(planePosition, r.ri); // From plane to vertex projected on plane\n\n        r.ni.copy(worldNormal); // Contact normal is the plane normal out from plane\n        // rj is now just the vector from the convex center to the vertex\n\n        worldVertex.vsub(convexPosition, r.rj); // Make it relative to the body\n\n        r.ri.vadd(planePosition, r.ri);\n        r.ri.vsub(planeBody.position, r.ri);\n        r.rj.vadd(convexPosition, r.rj);\n        r.rj.vsub(convexBody.position, r.rj);\n        this.result.push(r);\n        numContacts++;\n\n        if (!this.enableFrictionReduction) {\n          this.createFrictionEquationsFromContact(r, this.frictionResult);\n        }\n      }\n    }\n\n    if (this.enableFrictionReduction && numContacts) {\n      this.createFrictionFromAverage(numContacts);\n    }\n  }\n\n  boxConvex(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    si.convexPolyhedronRepresentation.material = si.material;\n    si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;\n    return this.convexConvex(si.convexPolyhedronRepresentation, sj, xi, xj, qi, qj, bi, bj, si, sj, justTest);\n  }\n\n  sphereHeightfield(sphereShape, hfShape, spherePos, hfPos, sphereQuat, hfQuat, sphereBody, hfBody, rsi, rsj, justTest) {\n    const data = hfShape.data;\n    const radius = sphereShape.radius;\n    const w = hfShape.elementSize;\n    const worldPillarOffset = sphereHeightfield_tmp2; // Get sphere position to heightfield local!\n\n    const localSpherePos = sphereHeightfield_tmp1;\n    Transform.pointToLocalFrame(hfPos, hfQuat, spherePos, localSpherePos); // Get the index of the data points to test against\n\n    let iMinX = Math.floor((localSpherePos.x - radius) / w) - 1;\n    let iMaxX = Math.ceil((localSpherePos.x + radius) / w) + 1;\n    let iMinY = Math.floor((localSpherePos.y - radius) / w) - 1;\n    let iMaxY = Math.ceil((localSpherePos.y + radius) / w) + 1; // Bail out if we are out of the terrain\n\n    if (iMaxX < 0 || iMaxY < 0 || iMinX > data.length || iMinY > data[0].length) {\n      return;\n    } // Clamp index to edges\n\n\n    if (iMinX < 0) {\n      iMinX = 0;\n    }\n\n    if (iMaxX < 0) {\n      iMaxX = 0;\n    }\n\n    if (iMinY < 0) {\n      iMinY = 0;\n    }\n\n    if (iMaxY < 0) {\n      iMaxY = 0;\n    }\n\n    if (iMinX >= data.length) {\n      iMinX = data.length - 1;\n    }\n\n    if (iMaxX >= data.length) {\n      iMaxX = data.length - 1;\n    }\n\n    if (iMaxY >= data[0].length) {\n      iMaxY = data[0].length - 1;\n    }\n\n    if (iMinY >= data[0].length) {\n      iMinY = data[0].length - 1;\n    }\n\n    const minMax = [];\n    hfShape.getRectMinMax(iMinX, iMinY, iMaxX, iMaxY, minMax);\n    const min = minMax[0];\n    const max = minMax[1]; // Bail out if we can't touch the bounding height box\n\n    if (localSpherePos.z - radius > max || localSpherePos.z + radius < min) {\n      return;\n    }\n\n    const result = this.result;\n\n    for (let i = iMinX; i < iMaxX; i++) {\n      for (let j = iMinY; j < iMaxY; j++) {\n        const numContactsBefore = result.length;\n        let intersecting = false; // Lower triangle\n\n        hfShape.getConvexTrianglePillar(i, j, false);\n        Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);\n\n        if (spherePos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + sphereShape.boundingSphereRadius) {\n          intersecting = this.sphereConvex(sphereShape, hfShape.pillarConvex, spherePos, worldPillarOffset, sphereQuat, hfQuat, sphereBody, hfBody, sphereShape, hfShape, justTest);\n        }\n\n        if (justTest && intersecting) {\n          return true;\n        } // Upper triangle\n\n\n        hfShape.getConvexTrianglePillar(i, j, true);\n        Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);\n\n        if (spherePos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + sphereShape.boundingSphereRadius) {\n          intersecting = this.sphereConvex(sphereShape, hfShape.pillarConvex, spherePos, worldPillarOffset, sphereQuat, hfQuat, sphereBody, hfBody, sphereShape, hfShape, justTest);\n        }\n\n        if (justTest && intersecting) {\n          return true;\n        }\n\n        const numContacts = result.length - numContactsBefore;\n\n        if (numContacts > 2) {\n          return;\n        }\n        /*\n          // Skip all but 1\n          for (let k = 0; k < numContacts - 1; k++) {\n              result.pop();\n          }\n        */\n\n      }\n    }\n  }\n\n  boxHeightfield(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    si.convexPolyhedronRepresentation.material = si.material;\n    si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;\n    return this.convexHeightfield(si.convexPolyhedronRepresentation, sj, xi, xj, qi, qj, bi, bj, si, sj, justTest);\n  }\n\n  convexHeightfield(convexShape, hfShape, convexPos, hfPos, convexQuat, hfQuat, convexBody, hfBody, rsi, rsj, justTest) {\n    const data = hfShape.data;\n    const w = hfShape.elementSize;\n    const radius = convexShape.boundingSphereRadius;\n    const worldPillarOffset = convexHeightfield_tmp2;\n    const faceList = convexHeightfield_faceList; // Get sphere position to heightfield local!\n\n    const localConvexPos = convexHeightfield_tmp1;\n    Transform.pointToLocalFrame(hfPos, hfQuat, convexPos, localConvexPos); // Get the index of the data points to test against\n\n    let iMinX = Math.floor((localConvexPos.x - radius) / w) - 1;\n    let iMaxX = Math.ceil((localConvexPos.x + radius) / w) + 1;\n    let iMinY = Math.floor((localConvexPos.y - radius) / w) - 1;\n    let iMaxY = Math.ceil((localConvexPos.y + radius) / w) + 1; // Bail out if we are out of the terrain\n\n    if (iMaxX < 0 || iMaxY < 0 || iMinX > data.length || iMinY > data[0].length) {\n      return;\n    } // Clamp index to edges\n\n\n    if (iMinX < 0) {\n      iMinX = 0;\n    }\n\n    if (iMaxX < 0) {\n      iMaxX = 0;\n    }\n\n    if (iMinY < 0) {\n      iMinY = 0;\n    }\n\n    if (iMaxY < 0) {\n      iMaxY = 0;\n    }\n\n    if (iMinX >= data.length) {\n      iMinX = data.length - 1;\n    }\n\n    if (iMaxX >= data.length) {\n      iMaxX = data.length - 1;\n    }\n\n    if (iMaxY >= data[0].length) {\n      iMaxY = data[0].length - 1;\n    }\n\n    if (iMinY >= data[0].length) {\n      iMinY = data[0].length - 1;\n    }\n\n    const minMax = [];\n    hfShape.getRectMinMax(iMinX, iMinY, iMaxX, iMaxY, minMax);\n    const min = minMax[0];\n    const max = minMax[1]; // Bail out if we're cant touch the bounding height box\n\n    if (localConvexPos.z - radius > max || localConvexPos.z + radius < min) {\n      return;\n    }\n\n    for (let i = iMinX; i < iMaxX; i++) {\n      for (let j = iMinY; j < iMaxY; j++) {\n        let intersecting = false; // Lower triangle\n\n        hfShape.getConvexTrianglePillar(i, j, false);\n        Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);\n\n        if (convexPos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + convexShape.boundingSphereRadius) {\n          intersecting = this.convexConvex(convexShape, hfShape.pillarConvex, convexPos, worldPillarOffset, convexQuat, hfQuat, convexBody, hfBody, null, null, justTest, faceList, null);\n        }\n\n        if (justTest && intersecting) {\n          return true;\n        } // Upper triangle\n\n\n        hfShape.getConvexTrianglePillar(i, j, true);\n        Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);\n\n        if (convexPos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + convexShape.boundingSphereRadius) {\n          intersecting = this.convexConvex(convexShape, hfShape.pillarConvex, convexPos, worldPillarOffset, convexQuat, hfQuat, convexBody, hfBody, null, null, justTest, faceList, null);\n        }\n\n        if (justTest && intersecting) {\n          return true;\n        }\n      }\n    }\n  }\n\n  sphereParticle(sj, si, xj, xi, qj, qi, bj, bi, rsi, rsj, justTest) {\n    // The normal is the unit vector from sphere center to particle center\n    const normal = particleSphere_normal;\n    normal.set(0, 0, 1);\n    xi.vsub(xj, normal);\n    const lengthSquared = normal.lengthSquared();\n\n    if (lengthSquared <= sj.radius * sj.radius) {\n      if (justTest) {\n        return true;\n      }\n\n      const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n      normal.normalize();\n      r.rj.copy(normal);\n      r.rj.scale(sj.radius, r.rj);\n      r.ni.copy(normal); // Contact normal\n\n      r.ni.negate(r.ni);\n      r.ri.set(0, 0, 0); // Center of particle\n\n      this.result.push(r);\n      this.createFrictionEquationsFromContact(r, this.frictionResult);\n    }\n  }\n\n  planeParticle(sj, si, xj, xi, qj, qi, bj, bi, rsi, rsj, justTest) {\n    const normal = particlePlane_normal;\n    normal.set(0, 0, 1);\n    bj.quaternion.vmult(normal, normal); // Turn normal according to plane orientation\n\n    const relpos = particlePlane_relpos;\n    xi.vsub(bj.position, relpos);\n    const dot = normal.dot(relpos);\n\n    if (dot <= 0.0) {\n      if (justTest) {\n        return true;\n      }\n\n      const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n      r.ni.copy(normal); // Contact normal is the plane normal\n\n      r.ni.negate(r.ni);\n      r.ri.set(0, 0, 0); // Center of particle\n      // Get particle position projected on plane\n\n      const projected = particlePlane_projected;\n      normal.scale(normal.dot(xi), projected);\n      xi.vsub(projected, projected); //projected.vadd(bj.position,projected);\n      // rj is now the projected world position minus plane position\n\n      r.rj.copy(projected);\n      this.result.push(r);\n      this.createFrictionEquationsFromContact(r, this.frictionResult);\n    }\n  }\n\n  boxParticle(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    si.convexPolyhedronRepresentation.material = si.material;\n    si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;\n    return this.convexParticle(si.convexPolyhedronRepresentation, sj, xi, xj, qi, qj, bi, bj, si, sj, justTest);\n  }\n\n  convexParticle(sj, si, xj, xi, qj, qi, bj, bi, rsi, rsj, justTest) {\n    let penetratedFaceIndex = -1;\n    const penetratedFaceNormal = convexParticle_penetratedFaceNormal;\n    const worldPenetrationVec = convexParticle_worldPenetrationVec;\n    let minPenetration = null;\n\n    const local = convexParticle_local;\n    local.copy(xi);\n    local.vsub(xj, local); // Convert position to relative the convex origin\n\n    qj.conjugate(cqj);\n    cqj.vmult(local, local);\n\n    if (sj.pointIsInside(local)) {\n      if (sj.worldVerticesNeedsUpdate) {\n        sj.computeWorldVertices(xj, qj);\n      }\n\n      if (sj.worldFaceNormalsNeedsUpdate) {\n        sj.computeWorldFaceNormals(qj);\n      } // For each world polygon in the polyhedra\n\n\n      for (let i = 0, nfaces = sj.faces.length; i !== nfaces; i++) {\n        // Construct world face vertices\n        const verts = [sj.worldVertices[sj.faces[i][0]]];\n        const normal = sj.worldFaceNormals[i]; // Check how much the particle penetrates the polygon plane.\n\n        xi.vsub(verts[0], convexParticle_vertexToParticle);\n        const penetration = -normal.dot(convexParticle_vertexToParticle);\n\n        if (minPenetration === null || Math.abs(penetration) < Math.abs(minPenetration)) {\n          if (justTest) {\n            return true;\n          }\n\n          minPenetration = penetration;\n          penetratedFaceIndex = i;\n          penetratedFaceNormal.copy(normal);\n        }\n      }\n\n      if (penetratedFaceIndex !== -1) {\n        // Setup contact\n        const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n        penetratedFaceNormal.scale(minPenetration, worldPenetrationVec); // rj is the particle position projected to the face\n\n        worldPenetrationVec.vadd(xi, worldPenetrationVec);\n        worldPenetrationVec.vsub(xj, worldPenetrationVec);\n        r.rj.copy(worldPenetrationVec); //const projectedToFace = xi.vsub(xj).vadd(worldPenetrationVec);\n        //projectedToFace.copy(r.rj);\n        //qj.vmult(r.rj,r.rj);\n\n        penetratedFaceNormal.negate(r.ni); // Contact normal\n\n        r.ri.set(0, 0, 0); // Center of particle\n\n        const ri = r.ri;\n        const rj = r.rj; // Make relative to bodies\n\n        ri.vadd(xi, ri);\n        ri.vsub(bi.position, ri);\n        rj.vadd(xj, rj);\n        rj.vsub(bj.position, rj);\n        this.result.push(r);\n        this.createFrictionEquationsFromContact(r, this.frictionResult);\n      } else {\n        console.warn('Point found inside convex, but did not find penetrating face!');\n      }\n    }\n  }\n\n  heightfieldCylinder(hfShape, convexShape, hfPos, convexPos, hfQuat, convexQuat, hfBody, convexBody, rsi, rsj, justTest) {\n    return this.convexHeightfield(convexShape, hfShape, convexPos, hfPos, convexQuat, hfQuat, convexBody, hfBody, rsi, rsj, justTest);\n  }\n\n  particleCylinder(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    return this.convexParticle(sj, si, xj, xi, qj, qi, bj, bi, rsi, rsj, justTest);\n  }\n\n  sphereTrimesh(sphereShape, trimeshShape, spherePos, trimeshPos, sphereQuat, trimeshQuat, sphereBody, trimeshBody, rsi, rsj, justTest) {\n    const edgeVertexA = sphereTrimesh_edgeVertexA;\n    const edgeVertexB = sphereTrimesh_edgeVertexB;\n    const edgeVector = sphereTrimesh_edgeVector;\n    const edgeVectorUnit = sphereTrimesh_edgeVectorUnit;\n    const localSpherePos = sphereTrimesh_localSpherePos;\n    const tmp = sphereTrimesh_tmp;\n    const localSphereAABB = sphereTrimesh_localSphereAABB;\n    const v2 = sphereTrimesh_v2;\n    const relpos = sphereTrimesh_relpos;\n    const triangles = sphereTrimesh_triangles; // Convert sphere position to local in the trimesh\n\n    Transform.pointToLocalFrame(trimeshPos, trimeshQuat, spherePos, localSpherePos); // Get the aabb of the sphere locally in the trimesh\n\n    const sphereRadius = sphereShape.radius;\n    localSphereAABB.lowerBound.set(localSpherePos.x - sphereRadius, localSpherePos.y - sphereRadius, localSpherePos.z - sphereRadius);\n    localSphereAABB.upperBound.set(localSpherePos.x + sphereRadius, localSpherePos.y + sphereRadius, localSpherePos.z + sphereRadius);\n    trimeshShape.getTrianglesInAABB(localSphereAABB, triangles); //for (let i = 0; i < trimeshShape.indices.length / 3; i++) triangles.push(i); // All\n    // Vertices\n\n    const v = sphereTrimesh_v;\n    const radiusSquared = sphereShape.radius * sphereShape.radius;\n\n    for (let i = 0; i < triangles.length; i++) {\n      for (let j = 0; j < 3; j++) {\n        trimeshShape.getVertex(trimeshShape.indices[triangles[i] * 3 + j], v); // Check vertex overlap in sphere\n\n        v.vsub(localSpherePos, relpos);\n\n        if (relpos.lengthSquared() <= radiusSquared) {\n          // Safe up\n          v2.copy(v);\n          Transform.pointToWorldFrame(trimeshPos, trimeshQuat, v2, v);\n          v.vsub(spherePos, relpos);\n\n          if (justTest) {\n            return true;\n          }\n\n          let r = this.createContactEquation(sphereBody, trimeshBody, sphereShape, trimeshShape, rsi, rsj);\n          r.ni.copy(relpos);\n          r.ni.normalize(); // ri is the vector from sphere center to the sphere surface\n\n          r.ri.copy(r.ni);\n          r.ri.scale(sphereShape.radius, r.ri);\n          r.ri.vadd(spherePos, r.ri);\n          r.ri.vsub(sphereBody.position, r.ri);\n          r.rj.copy(v);\n          r.rj.vsub(trimeshBody.position, r.rj); // Store result\n\n          this.result.push(r);\n          this.createFrictionEquationsFromContact(r, this.frictionResult);\n        }\n      }\n    } // Check all edges\n\n\n    for (let i = 0; i < triangles.length; i++) {\n      for (let j = 0; j < 3; j++) {\n        trimeshShape.getVertex(trimeshShape.indices[triangles[i] * 3 + j], edgeVertexA);\n        trimeshShape.getVertex(trimeshShape.indices[triangles[i] * 3 + (j + 1) % 3], edgeVertexB);\n        edgeVertexB.vsub(edgeVertexA, edgeVector); // Project sphere position to the edge\n\n        localSpherePos.vsub(edgeVertexB, tmp);\n        const positionAlongEdgeB = tmp.dot(edgeVector);\n        localSpherePos.vsub(edgeVertexA, tmp);\n        let positionAlongEdgeA = tmp.dot(edgeVector);\n\n        if (positionAlongEdgeA > 0 && positionAlongEdgeB < 0) {\n          // Now check the orthogonal distance from edge to sphere center\n          localSpherePos.vsub(edgeVertexA, tmp);\n          edgeVectorUnit.copy(edgeVector);\n          edgeVectorUnit.normalize();\n          positionAlongEdgeA = tmp.dot(edgeVectorUnit);\n          edgeVectorUnit.scale(positionAlongEdgeA, tmp);\n          tmp.vadd(edgeVertexA, tmp); // tmp is now the sphere center position projected to the edge, defined locally in the trimesh frame\n\n          const dist = tmp.distanceTo(localSpherePos);\n\n          if (dist < sphereShape.radius) {\n            if (justTest) {\n              return true;\n            }\n\n            const r = this.createContactEquation(sphereBody, trimeshBody, sphereShape, trimeshShape, rsi, rsj);\n            tmp.vsub(localSpherePos, r.ni);\n            r.ni.normalize();\n            r.ni.scale(sphereShape.radius, r.ri);\n            r.ri.vadd(spherePos, r.ri);\n            r.ri.vsub(sphereBody.position, r.ri);\n            Transform.pointToWorldFrame(trimeshPos, trimeshQuat, tmp, tmp);\n            tmp.vsub(trimeshBody.position, r.rj);\n            Transform.vectorToWorldFrame(trimeshQuat, r.ni, r.ni);\n            Transform.vectorToWorldFrame(trimeshQuat, r.ri, r.ri);\n            this.result.push(r);\n            this.createFrictionEquationsFromContact(r, this.frictionResult);\n          }\n        }\n      }\n    } // Triangle faces\n\n\n    const va = sphereTrimesh_va;\n    const vb = sphereTrimesh_vb;\n    const vc = sphereTrimesh_vc;\n    const normal = sphereTrimesh_normal;\n\n    for (let i = 0, N = triangles.length; i !== N; i++) {\n      trimeshShape.getTriangleVertices(triangles[i], va, vb, vc);\n      trimeshShape.getNormal(triangles[i], normal);\n      localSpherePos.vsub(va, tmp);\n      let dist = tmp.dot(normal);\n      normal.scale(dist, tmp);\n      localSpherePos.vsub(tmp, tmp); // tmp is now the sphere position projected to the triangle plane\n\n      dist = tmp.distanceTo(localSpherePos);\n\n      if (Ray.pointInTriangle(tmp, va, vb, vc) && dist < sphereShape.radius) {\n        if (justTest) {\n          return true;\n        }\n\n        let r = this.createContactEquation(sphereBody, trimeshBody, sphereShape, trimeshShape, rsi, rsj);\n        tmp.vsub(localSpherePos, r.ni);\n        r.ni.normalize();\n        r.ni.scale(sphereShape.radius, r.ri);\n        r.ri.vadd(spherePos, r.ri);\n        r.ri.vsub(sphereBody.position, r.ri);\n        Transform.pointToWorldFrame(trimeshPos, trimeshQuat, tmp, tmp);\n        tmp.vsub(trimeshBody.position, r.rj);\n        Transform.vectorToWorldFrame(trimeshQuat, r.ni, r.ni);\n        Transform.vectorToWorldFrame(trimeshQuat, r.ri, r.ri);\n        this.result.push(r);\n        this.createFrictionEquationsFromContact(r, this.frictionResult);\n      }\n    }\n\n    triangles.length = 0;\n  }\n\n  planeTrimesh(planeShape, trimeshShape, planePos, trimeshPos, planeQuat, trimeshQuat, planeBody, trimeshBody, rsi, rsj, justTest) {\n    // Make contacts!\n    const v = new Vec3();\n    const normal = planeTrimesh_normal;\n    normal.set(0, 0, 1);\n    planeQuat.vmult(normal, normal); // Turn normal according to plane\n\n    for (let i = 0; i < trimeshShape.vertices.length / 3; i++) {\n      // Get world vertex from trimesh\n      trimeshShape.getVertex(i, v); // Safe up\n\n      const v2 = new Vec3();\n      v2.copy(v);\n      Transform.pointToWorldFrame(trimeshPos, trimeshQuat, v2, v); // Check plane side\n\n      const relpos = planeTrimesh_relpos;\n      v.vsub(planePos, relpos);\n      const dot = normal.dot(relpos);\n\n      if (dot <= 0.0) {\n        if (justTest) {\n          return true;\n        }\n\n        const r = this.createContactEquation(planeBody, trimeshBody, planeShape, trimeshShape, rsi, rsj);\n        r.ni.copy(normal); // Contact normal is the plane normal\n        // Get vertex position projected on plane\n\n        const projected = planeTrimesh_projected;\n        normal.scale(relpos.dot(normal), projected);\n        v.vsub(projected, projected); // ri is the projected world position minus plane position\n\n        r.ri.copy(projected);\n        r.ri.vsub(planeBody.position, r.ri);\n        r.rj.copy(v);\n        r.rj.vsub(trimeshBody.position, r.rj); // Store result\n\n        this.result.push(r);\n        this.createFrictionEquationsFromContact(r, this.frictionResult);\n      }\n    }\n  } // convexTrimesh(\n  //   si: ConvexPolyhedron, sj: Trimesh, xi: Vec3, xj: Vec3, qi: Quaternion, qj: Quaternion,\n  //   bi: Body, bj: Body, rsi?: Shape | null, rsj?: Shape | null,\n  //   faceListA?: number[] | null, faceListB?: number[] | null,\n  // ) {\n  //   const sepAxis = convexConvex_sepAxis;\n  //   if(xi.distanceTo(xj) > si.boundingSphereRadius + sj.boundingSphereRadius){\n  //       return;\n  //   }\n  //   // Construct a temp hull for each triangle\n  //   const hullB = new ConvexPolyhedron();\n  //   hullB.faces = [[0,1,2]];\n  //   const va = new Vec3();\n  //   const vb = new Vec3();\n  //   const vc = new Vec3();\n  //   hullB.vertices = [\n  //       va,\n  //       vb,\n  //       vc\n  //   ];\n  //   for (let i = 0; i < sj.indices.length / 3; i++) {\n  //       const triangleNormal = new Vec3();\n  //       sj.getNormal(i, triangleNormal);\n  //       hullB.faceNormals = [triangleNormal];\n  //       sj.getTriangleVertices(i, va, vb, vc);\n  //       let d = si.testSepAxis(triangleNormal, hullB, xi, qi, xj, qj);\n  //       if(!d){\n  //           triangleNormal.scale(-1, triangleNormal);\n  //           d = si.testSepAxis(triangleNormal, hullB, xi, qi, xj, qj);\n  //           if(!d){\n  //               continue;\n  //           }\n  //       }\n  //       const res: ConvexPolyhedronContactPoint[] = [];\n  //       const q = convexConvex_q;\n  //       si.clipAgainstHull(xi,qi,hullB,xj,qj,triangleNormal,-100,100,res);\n  //       for(let j = 0; j !== res.length; j++){\n  //           const r = this.createContactEquation(bi,bj,si,sj,rsi,rsj),\n  //               ri = r.ri,\n  //               rj = r.rj;\n  //           r.ni.copy(triangleNormal);\n  //           r.ni.negate(r.ni);\n  //           res[j].normal.negate(q);\n  //           q.mult(res[j].depth, q);\n  //           res[j].point.vadd(q, ri);\n  //           rj.copy(res[j].point);\n  //           // Contact points are in world coordinates. Transform back to relative\n  //           ri.vsub(xi,ri);\n  //           rj.vsub(xj,rj);\n  //           // Make relative to bodies\n  //           ri.vadd(xi, ri);\n  //           ri.vsub(bi.position, ri);\n  //           rj.vadd(xj, rj);\n  //           rj.vsub(bj.position, rj);\n  //           result.push(r);\n  //       }\n  //   }\n  // }\n\n\n}\nconst averageNormal = new Vec3();\nconst averageContactPointA = new Vec3();\nconst averageContactPointB = new Vec3();\nconst tmpVec1 = new Vec3();\nconst tmpVec2 = new Vec3();\nconst tmpQuat1 = new Quaternion();\nconst tmpQuat2 = new Quaternion();\n\nconst planeTrimesh_normal = new Vec3();\nconst planeTrimesh_relpos = new Vec3();\nconst planeTrimesh_projected = new Vec3();\nconst sphereTrimesh_normal = new Vec3();\nconst sphereTrimesh_relpos = new Vec3();\nnew Vec3();\nconst sphereTrimesh_v = new Vec3();\nconst sphereTrimesh_v2 = new Vec3();\nconst sphereTrimesh_edgeVertexA = new Vec3();\nconst sphereTrimesh_edgeVertexB = new Vec3();\nconst sphereTrimesh_edgeVector = new Vec3();\nconst sphereTrimesh_edgeVectorUnit = new Vec3();\nconst sphereTrimesh_localSpherePos = new Vec3();\nconst sphereTrimesh_tmp = new Vec3();\nconst sphereTrimesh_va = new Vec3();\nconst sphereTrimesh_vb = new Vec3();\nconst sphereTrimesh_vc = new Vec3();\nconst sphereTrimesh_localSphereAABB = new AABB();\nconst sphereTrimesh_triangles = [];\nconst point_on_plane_to_sphere = new Vec3();\nconst plane_to_sphere_ortho = new Vec3(); // See http://bulletphysics.com/Bullet/BulletFull/SphereTriangleDetector_8cpp_source.html\n\nconst pointInPolygon_edge = new Vec3();\nconst pointInPolygon_edge_x_normal = new Vec3();\nconst pointInPolygon_vtp = new Vec3();\n\nfunction pointInPolygon(verts, normal, p) {\n  let positiveResult = null;\n  const N = verts.length;\n\n  for (let i = 0; i !== N; i++) {\n    const v = verts[i]; // Get edge to the next vertex\n\n    const edge = pointInPolygon_edge;\n    verts[(i + 1) % N].vsub(v, edge); // Get cross product between polygon normal and the edge\n\n    const edge_x_normal = pointInPolygon_edge_x_normal; //const edge_x_normal = new Vec3();\n\n    edge.cross(normal, edge_x_normal); // Get vector between point and current vertex\n\n    const vertex_to_p = pointInPolygon_vtp;\n    p.vsub(v, vertex_to_p); // This dot product determines which side of the edge the point is\n\n    const r = edge_x_normal.dot(vertex_to_p); // If all such dot products have same sign, we are inside the polygon.\n\n    if (positiveResult === null || r > 0 && positiveResult === true || r <= 0 && positiveResult === false) {\n      if (positiveResult === null) {\n        positiveResult = r > 0;\n      }\n\n      continue;\n    } else {\n      return false; // Encountered some other sign. Exit.\n    }\n  } // If we got here, all dot products were of the same sign.\n\n\n  return true;\n}\n\nconst box_to_sphere = new Vec3();\nconst sphereBox_ns = new Vec3();\nconst sphereBox_ns1 = new Vec3();\nconst sphereBox_ns2 = new Vec3();\nconst sphereBox_sides = [new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3()];\nconst sphereBox_sphere_to_corner = new Vec3();\nconst sphereBox_side_ns = new Vec3();\nconst sphereBox_side_ns1 = new Vec3();\nconst sphereBox_side_ns2 = new Vec3();\nconst convex_to_sphere = new Vec3();\nconst sphereConvex_edge = new Vec3();\nconst sphereConvex_edgeUnit = new Vec3();\nconst sphereConvex_sphereToCorner = new Vec3();\nconst sphereConvex_worldCorner = new Vec3();\nconst sphereConvex_worldNormal = new Vec3();\nconst sphereConvex_worldPoint = new Vec3();\nconst sphereConvex_worldSpherePointClosestToPlane = new Vec3();\nconst sphereConvex_penetrationVec = new Vec3();\nconst sphereConvex_sphereToWorldPoint = new Vec3();\nnew Vec3();\nnew Vec3();\nconst planeConvex_v = new Vec3();\nconst planeConvex_normal = new Vec3();\nconst planeConvex_relpos = new Vec3();\nconst planeConvex_projected = new Vec3();\nconst convexConvex_sepAxis = new Vec3();\nconst convexConvex_q = new Vec3();\nconst particlePlane_normal = new Vec3();\nconst particlePlane_relpos = new Vec3();\nconst particlePlane_projected = new Vec3();\nconst particleSphere_normal = new Vec3(); // WIP\n\nconst cqj = new Quaternion();\nconst convexParticle_local = new Vec3();\nnew Vec3();\nconst convexParticle_penetratedFaceNormal = new Vec3();\nconst convexParticle_vertexToParticle = new Vec3();\nconst convexParticle_worldPenetrationVec = new Vec3();\nconst convexHeightfield_tmp1 = new Vec3();\nconst convexHeightfield_tmp2 = new Vec3();\nconst convexHeightfield_faceList = [0];\nconst sphereHeightfield_tmp1 = new Vec3();\nconst sphereHeightfield_tmp2 = new Vec3();\n\nclass OverlapKeeper {\n  /**\n   * @todo Remove useless constructor\n   */\n  constructor() {\n    this.current = [];\n    this.previous = [];\n  }\n  /**\n   * getKey\n   */\n\n\n  getKey(i, j) {\n    if (j < i) {\n      const temp = j;\n      j = i;\n      i = temp;\n    }\n\n    return i << 16 | j;\n  }\n  /**\n   * set\n   */\n\n\n  set(i, j) {\n    // Insertion sort. This way the diff will have linear complexity.\n    const key = this.getKey(i, j);\n    const current = this.current;\n    let index = 0;\n\n    while (key > current[index]) {\n      index++;\n    }\n\n    if (key === current[index]) {\n      return; // Pair was already added\n    }\n\n    for (let j = current.length - 1; j >= index; j--) {\n      current[j + 1] = current[j];\n    }\n\n    current[index] = key;\n  }\n  /**\n   * tick\n   */\n\n\n  tick() {\n    const tmp = this.current;\n    this.current = this.previous;\n    this.previous = tmp;\n    this.current.length = 0;\n  }\n  /**\n   * getDiff\n   */\n\n\n  getDiff(additions, removals) {\n    const a = this.current;\n    const b = this.previous;\n    const al = a.length;\n    const bl = b.length;\n    let j = 0;\n\n    for (let i = 0; i < al; i++) {\n      let found = false;\n      const keyA = a[i];\n\n      while (keyA > b[j]) {\n        j++;\n      }\n\n      found = keyA === b[j];\n\n      if (!found) {\n        unpackAndPush(additions, keyA);\n      }\n    }\n\n    j = 0;\n\n    for (let i = 0; i < bl; i++) {\n      let found = false;\n      const keyB = b[i];\n\n      while (keyB > a[j]) {\n        j++;\n      }\n\n      found = a[j] === keyB;\n\n      if (!found) {\n        unpackAndPush(removals, keyB);\n      }\n    }\n  }\n\n}\n\nfunction unpackAndPush(array, key) {\n  array.push((key & 0xffff0000) >> 16, key & 0x0000ffff);\n}\n\nconst getKey = (i, j) => i < j ? `${i}-${j}` : `${j}-${i}`;\n/**\n * TupleDictionary\n */\n\n\nclass TupleDictionary {\n  constructor() {\n    this.data = {\n      keys: []\n    };\n  }\n\n  /** get */\n  get(i, j) {\n    const key = getKey(i, j);\n    return this.data[key];\n  }\n  /** set */\n\n\n  set(i, j, value) {\n    const key = getKey(i, j); // Check if key already exists\n\n    if (!this.get(i, j)) {\n      this.data.keys.push(key);\n    }\n\n    this.data[key] = value;\n  }\n  /** delete */\n\n\n  delete(i, j) {\n    const key = getKey(i, j);\n    const index = this.data.keys.indexOf(key);\n\n    if (index !== -1) {\n      this.data.keys.splice(index, 1);\n    }\n\n    delete this.data[key];\n  }\n  /** reset */\n\n\n  reset() {\n    const data = this.data;\n    const keys = data.keys;\n\n    while (keys.length > 0) {\n      const key = keys.pop();\n      delete data[key];\n    }\n  }\n\n}\n\n/**\n * The physics world\n */\nclass World extends EventTarget {\n  /**\n   * Currently / last used timestep. Is set to -1 if not available. This value is updated before each internal step, which means that it is \"fresh\" inside event callbacks.\n   */\n\n  /**\n   * Makes bodies go to sleep when they've been inactive.\n   * @default false\n   */\n\n  /**\n   * All the current contacts (instances of ContactEquation) in the world.\n   */\n\n  /**\n   * How often to normalize quaternions. Set to 0 for every step, 1 for every second etc.. A larger value increases performance. If bodies tend to explode, set to a smaller value (zero to be sure nothing can go wrong).\n   * @default 0\n   */\n\n  /**\n   * Set to true to use fast quaternion normalization. It is often enough accurate to use.\n   * If bodies tend to explode, set to false.\n   * @default false\n   */\n\n  /**\n   * The wall-clock time since simulation start.\n   */\n\n  /**\n   * Number of timesteps taken since start.\n   */\n\n  /**\n   * Default and last timestep sizes.\n   */\n\n  /**\n   * The gravity of the world.\n   */\n\n  /**\n   * Gravity to use when approximating the friction max force (mu*mass*gravity).\n   * If undefined, global gravity will be used.\n   * Use to enable friction in a World with a null gravity vector (no gravity).\n   */\n\n  /**\n   * The broadphase algorithm to use.\n   * @default NaiveBroadphase\n   */\n\n  /**\n   * All bodies in this world\n   */\n\n  /**\n   * True if any bodies are not sleeping, false if every body is sleeping.\n   */\n\n  /**\n   * The solver algorithm to use.\n   * @default GSSolver\n   */\n\n  /**\n   * collisionMatrix\n   */\n\n  /**\n   * CollisionMatrix from the previous step.\n   */\n\n  /**\n   * All added contactmaterials.\n   */\n\n  /**\n   * Used to look up a ContactMaterial given two instances of Material.\n   */\n\n  /**\n   * The default material of the bodies.\n   */\n\n  /**\n   * This contact material is used if no suitable contactmaterial is found for a contact.\n   */\n\n  /**\n   * Time accumulator for interpolation.\n   * @see https://gafferongames.com/game-physics/fix-your-timestep/\n   */\n\n  /**\n   * Dispatched after a body has been added to the world.\n   */\n\n  /**\n   * Dispatched after a body has been removed from the world.\n   */\n  constructor(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    super();\n    this.dt = -1;\n    this.allowSleep = !!options.allowSleep;\n    this.contacts = [];\n    this.frictionEquations = [];\n    this.quatNormalizeSkip = options.quatNormalizeSkip !== undefined ? options.quatNormalizeSkip : 0;\n    this.quatNormalizeFast = options.quatNormalizeFast !== undefined ? options.quatNormalizeFast : false;\n    this.time = 0.0;\n    this.stepnumber = 0;\n    this.default_dt = 1 / 60;\n    this.nextId = 0;\n    this.gravity = new Vec3();\n\n    if (options.gravity) {\n      this.gravity.copy(options.gravity);\n    }\n\n    if (options.frictionGravity) {\n      this.frictionGravity = new Vec3();\n      this.frictionGravity.copy(options.frictionGravity);\n    }\n\n    this.broadphase = options.broadphase !== undefined ? options.broadphase : new NaiveBroadphase();\n    this.bodies = [];\n    this.hasActiveBodies = false;\n    this.solver = options.solver !== undefined ? options.solver : new GSSolver();\n    this.constraints = [];\n    this.narrowphase = new Narrowphase(this);\n    this.collisionMatrix = new ArrayCollisionMatrix();\n    this.collisionMatrixPrevious = new ArrayCollisionMatrix();\n    this.bodyOverlapKeeper = new OverlapKeeper();\n    this.shapeOverlapKeeper = new OverlapKeeper();\n    this.contactmaterials = [];\n    this.contactMaterialTable = new TupleDictionary();\n    this.defaultMaterial = new Material('default');\n    this.defaultContactMaterial = new ContactMaterial(this.defaultMaterial, this.defaultMaterial, {\n      friction: 0.3,\n      restitution: 0.0\n    });\n    this.doProfiling = false;\n    this.profile = {\n      solve: 0,\n      makeContactConstraints: 0,\n      broadphase: 0,\n      integrate: 0,\n      narrowphase: 0\n    };\n    this.accumulator = 0;\n    this.subsystems = [];\n    this.addBodyEvent = {\n      type: 'addBody',\n      body: null\n    };\n    this.removeBodyEvent = {\n      type: 'removeBody',\n      body: null\n    };\n    this.idToBodyMap = {};\n    this.broadphase.setWorld(this);\n  }\n  /**\n   * Get the contact material between materials m1 and m2\n   * @return The contact material if it was found.\n   */\n\n\n  getContactMaterial(m1, m2) {\n    return this.contactMaterialTable.get(m1.id, m2.id);\n  }\n  /**\n   * Store old collision state info\n   */\n\n\n  collisionMatrixTick() {\n    const temp = this.collisionMatrixPrevious;\n    this.collisionMatrixPrevious = this.collisionMatrix;\n    this.collisionMatrix = temp;\n    this.collisionMatrix.reset();\n    this.bodyOverlapKeeper.tick();\n    this.shapeOverlapKeeper.tick();\n  }\n  /**\n   * Add a constraint to the simulation.\n   */\n\n\n  addConstraint(c) {\n    this.constraints.push(c);\n  }\n  /**\n   * Removes a constraint\n   */\n\n\n  removeConstraint(c) {\n    const idx = this.constraints.indexOf(c);\n\n    if (idx !== -1) {\n      this.constraints.splice(idx, 1);\n    }\n  }\n  /**\n   * Raycast test\n   * @deprecated Use .raycastAll, .raycastClosest or .raycastAny instead.\n   */\n\n\n  rayTest(from, to, result) {\n    if (result instanceof RaycastResult) {\n      // Do raycastClosest\n      this.raycastClosest(from, to, {\n        skipBackfaces: true\n      }, result);\n    } else {\n      // Do raycastAll\n      this.raycastAll(from, to, {\n        skipBackfaces: true\n      }, result);\n    }\n  }\n  /**\n   * Ray cast against all bodies. The provided callback will be executed for each hit with a RaycastResult as single argument.\n   * @return True if any body was hit.\n   */\n\n\n  raycastAll(from, to, options, callback) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    options.mode = Ray.ALL;\n    options.from = from;\n    options.to = to;\n    options.callback = callback;\n    return tmpRay.intersectWorld(this, options);\n  }\n  /**\n   * Ray cast, and stop at the first result. Note that the order is random - but the method is fast.\n   * @return True if any body was hit.\n   */\n\n\n  raycastAny(from, to, options, result) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    options.mode = Ray.ANY;\n    options.from = from;\n    options.to = to;\n    options.result = result;\n    return tmpRay.intersectWorld(this, options);\n  }\n  /**\n   * Ray cast, and return information of the closest hit.\n   * @return True if any body was hit.\n   */\n\n\n  raycastClosest(from, to, options, result) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    options.mode = Ray.CLOSEST;\n    options.from = from;\n    options.to = to;\n    options.result = result;\n    return tmpRay.intersectWorld(this, options);\n  }\n  /**\n   * Add a rigid body to the simulation.\n   * @todo If the simulation has not yet started, why recrete and copy arrays for each body? Accumulate in dynamic arrays in this case.\n   * @todo Adding an array of bodies should be possible. This would save some loops too\n   */\n\n\n  addBody(body) {\n    if (this.bodies.includes(body)) {\n      return;\n    }\n\n    body.index = this.bodies.length;\n    this.bodies.push(body);\n    body.world = this;\n    body.initPosition.copy(body.position);\n    body.initVelocity.copy(body.velocity);\n    body.timeLastSleepy = this.time;\n\n    if (body instanceof Body) {\n      body.initAngularVelocity.copy(body.angularVelocity);\n      body.initQuaternion.copy(body.quaternion);\n    }\n\n    this.collisionMatrix.setNumObjects(this.bodies.length);\n    this.addBodyEvent.body = body;\n    this.idToBodyMap[body.id] = body;\n    this.dispatchEvent(this.addBodyEvent);\n  }\n  /**\n   * Remove a rigid body from the simulation.\n   */\n\n\n  removeBody(body) {\n    body.world = null;\n    const n = this.bodies.length - 1;\n    const bodies = this.bodies;\n    const idx = bodies.indexOf(body);\n\n    if (idx !== -1) {\n      bodies.splice(idx, 1); // Todo: should use a garbage free method\n      // Recompute index\n\n      for (let i = 0; i !== bodies.length; i++) {\n        bodies[i].index = i;\n      }\n\n      this.collisionMatrix.setNumObjects(n);\n      this.removeBodyEvent.body = body;\n      delete this.idToBodyMap[body.id];\n      this.dispatchEvent(this.removeBodyEvent);\n    }\n  }\n\n  getBodyById(id) {\n    return this.idToBodyMap[id];\n  }\n  /**\n   * @todo Make a faster map\n   */\n\n\n  getShapeById(id) {\n    const bodies = this.bodies;\n\n    for (let i = 0; i < bodies.length; i++) {\n      const shapes = bodies[i].shapes;\n\n      for (let j = 0; j < shapes.length; j++) {\n        const shape = shapes[j];\n\n        if (shape.id === id) {\n          return shape;\n        }\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Adds a contact material to the World\n   */\n\n\n  addContactMaterial(cmat) {\n    // Add contact material\n    this.contactmaterials.push(cmat); // Add current contact material to the material table\n\n    this.contactMaterialTable.set(cmat.materials[0].id, cmat.materials[1].id, cmat);\n  }\n  /**\n   * Removes a contact material from the World.\n   */\n\n\n  removeContactMaterial(cmat) {\n    const idx = this.contactmaterials.indexOf(cmat);\n\n    if (idx === -1) {\n      return;\n    }\n\n    this.contactmaterials.splice(idx, 1);\n    this.contactMaterialTable.delete(cmat.materials[0].id, cmat.materials[1].id);\n  }\n  /**\n   * Step the simulation forward keeping track of last called time\n   * to be able to step the world at a fixed rate, independently of framerate.\n   *\n   * @param dt The fixed time step size to use (default: 1 / 60).\n   * @param maxSubSteps Maximum number of fixed steps to take per function call (default: 10).\n   * @see https://gafferongames.com/post/fix_your_timestep/\n   * @example\n   *     // Run the simulation independently of framerate every 1 / 60 ms\n   *     world.fixedStep()\n   */\n\n\n  fixedStep(dt, maxSubSteps) {\n    if (dt === void 0) {\n      dt = 1 / 60;\n    }\n\n    if (maxSubSteps === void 0) {\n      maxSubSteps = 10;\n    }\n\n    const time = performance.now() / 1000; // seconds\n\n    if (!this.lastCallTime) {\n      this.step(dt, undefined, maxSubSteps);\n    } else {\n      const timeSinceLastCalled = time - this.lastCallTime;\n      this.step(dt, timeSinceLastCalled, maxSubSteps);\n    }\n\n    this.lastCallTime = time;\n  }\n  /**\n   * Step the physics world forward in time.\n   *\n   * There are two modes. The simple mode is fixed timestepping without interpolation. In this case you only use the first argument. The second case uses interpolation. In that you also provide the time since the function was last used, as well as the maximum fixed timesteps to take.\n   *\n   * @param dt The fixed time step size to use.\n   * @param timeSinceLastCalled The time elapsed since the function was last called.\n   * @param maxSubSteps Maximum number of fixed steps to take per function call (default: 10).\n   * @see https://web.archive.org/web/20180426154531/http://bulletphysics.org/mediawiki-1.5.8/index.php/Stepping_The_World#What_do_the_parameters_to_btDynamicsWorld::stepSimulation_mean.3F\n   * @example\n   *     // fixed timestepping without interpolation\n   *     world.step(1 / 60)\n   */\n\n\n  step(dt, timeSinceLastCalled, maxSubSteps) {\n    if (maxSubSteps === void 0) {\n      maxSubSteps = 10;\n    }\n\n    if (timeSinceLastCalled === undefined) {\n      // Fixed, simple stepping\n      this.internalStep(dt); // Increment time\n\n      this.time += dt;\n    } else {\n      this.accumulator += timeSinceLastCalled;\n      const t0 = performance.now();\n      let substeps = 0;\n\n      while (this.accumulator >= dt && substeps < maxSubSteps) {\n        // Do fixed steps to catch up\n        this.internalStep(dt);\n        this.accumulator -= dt;\n        substeps++;\n\n        if (performance.now() - t0 > dt * 1000) {\n          // The framerate is not interactive anymore.\n          // We are below the target framerate.\n          // Better bail out.\n          break;\n        }\n      } // Remove the excess accumulator, since we may not\n      // have had enough substeps available to catch up\n\n\n      this.accumulator = this.accumulator % dt;\n      const t = this.accumulator / dt;\n\n      for (let j = 0; j !== this.bodies.length; j++) {\n        const b = this.bodies[j];\n        b.previousPosition.lerp(b.position, t, b.interpolatedPosition);\n        b.previousQuaternion.slerp(b.quaternion, t, b.interpolatedQuaternion);\n        b.previousQuaternion.normalize();\n      }\n\n      this.time += timeSinceLastCalled;\n    }\n  }\n\n  internalStep(dt) {\n    this.dt = dt;\n    const contacts = this.contacts;\n    const p1 = World_step_p1;\n    const p2 = World_step_p2;\n    const N = this.bodies.length;\n    const bodies = this.bodies;\n    const solver = this.solver;\n    const gravity = this.gravity;\n    const doProfiling = this.doProfiling;\n    const profile = this.profile;\n    const DYNAMIC = Body.DYNAMIC;\n    let profilingStart = -Infinity;\n    const constraints = this.constraints;\n    const frictionEquationPool = World_step_frictionEquationPool;\n    gravity.length();\n    const gx = gravity.x;\n    const gy = gravity.y;\n    const gz = gravity.z;\n    let i = 0;\n\n    if (doProfiling) {\n      profilingStart = performance.now();\n    } // Add gravity to all objects\n\n\n    for (i = 0; i !== N; i++) {\n      const bi = bodies[i];\n\n      if (bi.type === DYNAMIC) {\n        // Only for dynamic bodies\n        const f = bi.force;\n        const m = bi.mass;\n        f.x += m * gx;\n        f.y += m * gy;\n        f.z += m * gz;\n      }\n    } // Update subsystems\n\n\n    for (let i = 0, Nsubsystems = this.subsystems.length; i !== Nsubsystems; i++) {\n      this.subsystems[i].update();\n    } // Collision detection\n\n\n    if (doProfiling) {\n      profilingStart = performance.now();\n    }\n\n    p1.length = 0; // Clean up pair arrays from last step\n\n    p2.length = 0;\n    this.broadphase.collisionPairs(this, p1, p2);\n\n    if (doProfiling) {\n      profile.broadphase = performance.now() - profilingStart;\n    } // Remove constrained pairs with collideConnected == false\n\n\n    let Nconstraints = constraints.length;\n\n    for (i = 0; i !== Nconstraints; i++) {\n      const c = constraints[i];\n\n      if (!c.collideConnected) {\n        for (let j = p1.length - 1; j >= 0; j -= 1) {\n          if (c.bodyA === p1[j] && c.bodyB === p2[j] || c.bodyB === p1[j] && c.bodyA === p2[j]) {\n            p1.splice(j, 1);\n            p2.splice(j, 1);\n          }\n        }\n      }\n    }\n\n    this.collisionMatrixTick(); // Generate contacts\n\n    if (doProfiling) {\n      profilingStart = performance.now();\n    }\n\n    const oldcontacts = World_step_oldContacts;\n    const NoldContacts = contacts.length;\n\n    for (i = 0; i !== NoldContacts; i++) {\n      oldcontacts.push(contacts[i]);\n    }\n\n    contacts.length = 0; // Transfer FrictionEquation from current list to the pool for reuse\n\n    const NoldFrictionEquations = this.frictionEquations.length;\n\n    for (i = 0; i !== NoldFrictionEquations; i++) {\n      frictionEquationPool.push(this.frictionEquations[i]);\n    }\n\n    this.frictionEquations.length = 0;\n    this.narrowphase.getContacts(p1, p2, this, contacts, oldcontacts, // To be reused\n    this.frictionEquations, frictionEquationPool);\n\n    if (doProfiling) {\n      profile.narrowphase = performance.now() - profilingStart;\n    } // Loop over all collisions\n\n\n    if (doProfiling) {\n      profilingStart = performance.now();\n    } // Add all friction eqs\n\n\n    for (i = 0; i < this.frictionEquations.length; i++) {\n      solver.addEquation(this.frictionEquations[i]);\n    }\n\n    const ncontacts = contacts.length;\n\n    for (let k = 0; k !== ncontacts; k++) {\n      // Current contact\n      const c = contacts[k]; // Get current collision indeces\n\n      const bi = c.bi;\n      const bj = c.bj;\n      const si = c.si;\n      const sj = c.sj; // Get collision properties\n\n      let cm;\n\n      if (bi.material && bj.material) {\n        cm = this.getContactMaterial(bi.material, bj.material) || this.defaultContactMaterial;\n      } else {\n        cm = this.defaultContactMaterial;\n      } // c.enabled = bi.collisionResponse && bj.collisionResponse && si.collisionResponse && sj.collisionResponse;\n\n\n      cm.friction; // c.restitution = cm.restitution;\n      // If friction or restitution were specified in the material, use them\n\n      if (bi.material && bj.material) {\n        if (bi.material.friction >= 0 && bj.material.friction >= 0) {\n          bi.material.friction * bj.material.friction;\n        }\n\n        if (bi.material.restitution >= 0 && bj.material.restitution >= 0) {\n          c.restitution = bi.material.restitution * bj.material.restitution;\n        }\n      } // c.setSpookParams(\n      //           cm.contactEquationStiffness,\n      //           cm.contactEquationRelaxation,\n      //           dt\n      //       );\n\n\n      solver.addEquation(c); // // Add friction constraint equation\n      // if(mu > 0){\n      // \t// Create 2 tangent equations\n      // \tconst mug = mu * gnorm;\n      // \tconst reducedMass = (bi.invMass + bj.invMass);\n      // \tif(reducedMass > 0){\n      // \t\treducedMass = 1/reducedMass;\n      // \t}\n      // \tconst pool = frictionEquationPool;\n      // \tconst c1 = pool.length ? pool.pop() : new FrictionEquation(bi,bj,mug*reducedMass);\n      // \tconst c2 = pool.length ? pool.pop() : new FrictionEquation(bi,bj,mug*reducedMass);\n      // \tthis.frictionEquations.push(c1, c2);\n      // \tc1.bi = c2.bi = bi;\n      // \tc1.bj = c2.bj = bj;\n      // \tc1.minForce = c2.minForce = -mug*reducedMass;\n      // \tc1.maxForce = c2.maxForce = mug*reducedMass;\n      // \t// Copy over the relative vectors\n      // \tc1.ri.copy(c.ri);\n      // \tc1.rj.copy(c.rj);\n      // \tc2.ri.copy(c.ri);\n      // \tc2.rj.copy(c.rj);\n      // \t// Construct tangents\n      // \tc.ni.tangents(c1.t, c2.t);\n      //           // Set spook params\n      //           c1.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, dt);\n      //           c2.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, dt);\n      //           c1.enabled = c2.enabled = c.enabled;\n      // \t// Add equations to solver\n      // \tsolver.addEquation(c1);\n      // \tsolver.addEquation(c2);\n      // }\n\n      if (bi.allowSleep && bi.type === Body.DYNAMIC && bi.sleepState === Body.SLEEPING && bj.sleepState === Body.AWAKE && bj.type !== Body.STATIC) {\n        const speedSquaredB = bj.velocity.lengthSquared() + bj.angularVelocity.lengthSquared();\n        const speedLimitSquaredB = bj.sleepSpeedLimit ** 2;\n\n        if (speedSquaredB >= speedLimitSquaredB * 2) {\n          bi.wakeUpAfterNarrowphase = true;\n        }\n      }\n\n      if (bj.allowSleep && bj.type === Body.DYNAMIC && bj.sleepState === Body.SLEEPING && bi.sleepState === Body.AWAKE && bi.type !== Body.STATIC) {\n        const speedSquaredA = bi.velocity.lengthSquared() + bi.angularVelocity.lengthSquared();\n        const speedLimitSquaredA = bi.sleepSpeedLimit ** 2;\n\n        if (speedSquaredA >= speedLimitSquaredA * 2) {\n          bj.wakeUpAfterNarrowphase = true;\n        }\n      } // Now we know that i and j are in contact. Set collision matrix state\n\n\n      this.collisionMatrix.set(bi, bj, true);\n\n      if (!this.collisionMatrixPrevious.get(bi, bj)) {\n        // First contact!\n        // We reuse the collideEvent object, otherwise we will end up creating new objects for each new contact, even if there's no event listener attached.\n        World_step_collideEvent.body = bj;\n        World_step_collideEvent.contact = c;\n        bi.dispatchEvent(World_step_collideEvent);\n        World_step_collideEvent.body = bi;\n        bj.dispatchEvent(World_step_collideEvent);\n      }\n\n      this.bodyOverlapKeeper.set(bi.id, bj.id);\n      this.shapeOverlapKeeper.set(si.id, sj.id);\n    }\n\n    this.emitContactEvents();\n\n    if (doProfiling) {\n      profile.makeContactConstraints = performance.now() - profilingStart;\n      profilingStart = performance.now();\n    } // Wake up bodies\n\n\n    for (i = 0; i !== N; i++) {\n      const bi = bodies[i];\n\n      if (bi.wakeUpAfterNarrowphase) {\n        bi.wakeUp();\n        bi.wakeUpAfterNarrowphase = false;\n      }\n    } // Add user-added constraints\n\n\n    Nconstraints = constraints.length;\n\n    for (i = 0; i !== Nconstraints; i++) {\n      const c = constraints[i];\n      c.update();\n\n      for (let j = 0, Neq = c.equations.length; j !== Neq; j++) {\n        const eq = c.equations[j];\n        solver.addEquation(eq);\n      }\n    } // Solve the constrained system\n\n\n    solver.solve(dt, this);\n\n    if (doProfiling) {\n      profile.solve = performance.now() - profilingStart;\n    } // Remove all contacts from solver\n\n\n    solver.removeAllEquations(); // Apply damping, see http://code.google.com/p/bullet/issues/detail?id=74 for details\n\n    const pow = Math.pow;\n\n    for (i = 0; i !== N; i++) {\n      const bi = bodies[i];\n\n      if (bi.type & DYNAMIC) {\n        // Only for dynamic bodies\n        const ld = pow(1.0 - bi.linearDamping, dt);\n        const v = bi.velocity;\n        v.scale(ld, v);\n        const av = bi.angularVelocity;\n\n        if (av) {\n          const ad = pow(1.0 - bi.angularDamping, dt);\n          av.scale(ad, av);\n        }\n      }\n    }\n\n    this.dispatchEvent(World_step_preStepEvent); // Leap frog\n    // vnew = v + h*f/m\n    // xnew = x + h*vnew\n\n    if (doProfiling) {\n      profilingStart = performance.now();\n    }\n\n    const stepnumber = this.stepnumber;\n    const quatNormalize = stepnumber % (this.quatNormalizeSkip + 1) === 0;\n    const quatNormalizeFast = this.quatNormalizeFast;\n\n    for (i = 0; i !== N; i++) {\n      bodies[i].integrate(dt, quatNormalize, quatNormalizeFast);\n    }\n\n    this.clearForces();\n    this.broadphase.dirty = true;\n\n    if (doProfiling) {\n      profile.integrate = performance.now() - profilingStart;\n    } // Update step number\n\n\n    this.stepnumber += 1;\n    this.dispatchEvent(World_step_postStepEvent); // Sleeping update\n\n    let hasActiveBodies = true;\n\n    if (this.allowSleep) {\n      hasActiveBodies = false;\n\n      for (i = 0; i !== N; i++) {\n        const bi = bodies[i];\n        bi.sleepTick(this.time);\n\n        if (bi.sleepState !== Body.SLEEPING) {\n          hasActiveBodies = true;\n        }\n      }\n    }\n\n    this.hasActiveBodies = hasActiveBodies;\n  }\n\n  emitContactEvents() {\n    const hasBeginContact = this.hasAnyEventListener('beginContact');\n    const hasEndContact = this.hasAnyEventListener('endContact');\n\n    if (hasBeginContact || hasEndContact) {\n      this.bodyOverlapKeeper.getDiff(additions, removals);\n    }\n\n    if (hasBeginContact) {\n      for (let i = 0, l = additions.length; i < l; i += 2) {\n        beginContactEvent.bodyA = this.getBodyById(additions[i]);\n        beginContactEvent.bodyB = this.getBodyById(additions[i + 1]);\n        this.dispatchEvent(beginContactEvent);\n      }\n\n      beginContactEvent.bodyA = beginContactEvent.bodyB = null;\n    }\n\n    if (hasEndContact) {\n      for (let i = 0, l = removals.length; i < l; i += 2) {\n        endContactEvent.bodyA = this.getBodyById(removals[i]);\n        endContactEvent.bodyB = this.getBodyById(removals[i + 1]);\n        this.dispatchEvent(endContactEvent);\n      }\n\n      endContactEvent.bodyA = endContactEvent.bodyB = null;\n    }\n\n    additions.length = removals.length = 0;\n    const hasBeginShapeContact = this.hasAnyEventListener('beginShapeContact');\n    const hasEndShapeContact = this.hasAnyEventListener('endShapeContact');\n\n    if (hasBeginShapeContact || hasEndShapeContact) {\n      this.shapeOverlapKeeper.getDiff(additions, removals);\n    }\n\n    if (hasBeginShapeContact) {\n      for (let i = 0, l = additions.length; i < l; i += 2) {\n        const shapeA = this.getShapeById(additions[i]);\n        const shapeB = this.getShapeById(additions[i + 1]);\n        beginShapeContactEvent.shapeA = shapeA;\n        beginShapeContactEvent.shapeB = shapeB;\n        if (shapeA) beginShapeContactEvent.bodyA = shapeA.body;\n        if (shapeB) beginShapeContactEvent.bodyB = shapeB.body;\n        this.dispatchEvent(beginShapeContactEvent);\n      }\n\n      beginShapeContactEvent.bodyA = beginShapeContactEvent.bodyB = beginShapeContactEvent.shapeA = beginShapeContactEvent.shapeB = null;\n    }\n\n    if (hasEndShapeContact) {\n      for (let i = 0, l = removals.length; i < l; i += 2) {\n        const shapeA = this.getShapeById(removals[i]);\n        const shapeB = this.getShapeById(removals[i + 1]);\n        endShapeContactEvent.shapeA = shapeA;\n        endShapeContactEvent.shapeB = shapeB;\n        if (shapeA) endShapeContactEvent.bodyA = shapeA.body;\n        if (shapeB) endShapeContactEvent.bodyB = shapeB.body;\n        this.dispatchEvent(endShapeContactEvent);\n      }\n\n      endShapeContactEvent.bodyA = endShapeContactEvent.bodyB = endShapeContactEvent.shapeA = endShapeContactEvent.shapeB = null;\n    }\n  }\n  /**\n   * Sets all body forces in the world to zero.\n   */\n\n\n  clearForces() {\n    const bodies = this.bodies;\n    const N = bodies.length;\n\n    for (let i = 0; i !== N; i++) {\n      const b = bodies[i];\n      b.force;\n      b.torque;\n      b.force.set(0, 0, 0);\n      b.torque.set(0, 0, 0);\n    }\n  }\n\n} // Temp stuff\n\nnew AABB();\nconst tmpRay = new Ray(); // performance.now() fallback on Date.now()\n\nconst performance = globalThis.performance || {};\n\nif (!performance.now) {\n  let nowOffset = Date.now();\n\n  if (performance.timing && performance.timing.navigationStart) {\n    nowOffset = performance.timing.navigationStart;\n  }\n\n  performance.now = () => Date.now() - nowOffset;\n}\n\nnew Vec3(); // Dispatched after the world has stepped forward in time.\n// Reusable event objects to save memory.\n\nconst World_step_postStepEvent = {\n  type: 'postStep'\n}; // Dispatched before the world steps forward in time.\n\nconst World_step_preStepEvent = {\n  type: 'preStep'\n};\nconst World_step_collideEvent = {\n  type: Body.COLLIDE_EVENT_NAME,\n  body: null,\n  contact: null\n}; // Pools for unused objects\n\nconst World_step_oldContacts = [];\nconst World_step_frictionEquationPool = []; // Reusable arrays for collision pairs\n\nconst World_step_p1 = [];\nconst World_step_p2 = []; // Stuff for emitContactEvents\n\nconst additions = [];\nconst removals = [];\nconst beginContactEvent = {\n  type: 'beginContact',\n  bodyA: null,\n  bodyB: null\n};\nconst endContactEvent = {\n  type: 'endContact',\n  bodyA: null,\n  bodyB: null\n};\nconst beginShapeContactEvent = {\n  type: 'beginShapeContact',\n  bodyA: null,\n  bodyB: null,\n  shapeA: null,\n  shapeB: null\n};\nconst endShapeContactEvent = {\n  type: 'endShapeContact',\n  bodyA: null,\n  bodyB: null,\n  shapeA: null,\n  shapeB: null\n};\n\nexport { AABB, ArrayCollisionMatrix, BODY_SLEEP_STATES, BODY_TYPES, Body, Box, Broadphase, COLLISION_TYPES, ConeTwistConstraint, Constraint, ContactEquation, ContactMaterial, ConvexPolyhedron, Cylinder, DistanceConstraint, Equation, EventTarget, FrictionEquation, GSSolver, GridBroadphase, Heightfield, HingeConstraint, JacobianElement, LockConstraint, Mat3, Material, NaiveBroadphase, Narrowphase, ObjectCollisionMatrix, Particle, Plane, PointToPointConstraint, Pool, Quaternion, RAY_MODES, Ray, RaycastResult, RaycastVehicle, RigidVehicle, RotationalEquation, RotationalMotorEquation, SAPBroadphase, SHAPE_TYPES, SPHSystem, Shape, Solver, Sphere, SplitSolver, Spring, Transform, Trimesh, Vec3, Vec3Pool, WheelInfo, World };\n"],"mappings":"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In5B,IAAI,EAAE;AAC/B,IAAMq5B,iBAAiB,GAAG,IAAIr5B,IAAI,EAAE;AACpC,IAAMs5B,YAAY,GAAG,IAAIt5B,IAAI,EAAE;AAC/B,IAAMu5B,YAAY,GAAG,IAAIv5B,IAAI,EAAE;AAC/B,IAAMy5B,uBAAuB,GAAG,IAAIz5B,IAAI,EAAE;AAC1C,IAAM05B,uBAAuB,GAAG,IAAI15B,IAAI,EAAE;AAC1C,IAAM25B,aAAa,GAAG,IAAI35B,IAAI,EAAE;AAChC,IAAM45B,aAAa,GAAG,IAAI55B,IAAI,EAAE;AAChC,IAAM85B,iBAAiB,GAAG,IAAI95B,IAAI,EAAE;AACpC,IAAMg6B,iBAAiB,GAAG,IAAIh6B,IAAI,EAAE;AACpC,IAAMw5B,cAAc,GAAG,IAAIx5B,IAAI,EAAE;;AAEjC;AACA;AACA;AAFA,IAGMo6B,SAAS;EACb;AACF;AACA;AACA;;EAEE;AACF;AACA;AACA;;EAEE;AACF;AACA;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;AACA;;EAEE;AACF;AACA;AACA;;EAEE;AACF;AACA;AACA;;EAEE;AACF;AACA;AACA;;EAEE;AACF;AACA;AACA;;EAEE;AACF;AACA;AACA;;EAEE;AACF;AACA;AACA;;EAEE;;EAEA;;EAEA;AACF;AACA;AACA;;EAEE;AACF;AACA;AACA;;EAEE;AACF;AACA;AACA;;EAEE;AACF;AACA;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;AACA;;EAEE;AACF;AACA;AACA;;EAEE;AACF;AACA;AACA;;EAEE;AACF;AACA;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;AACA;;EAEE;AACF;AACA;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;EACE,mBAAYx0B,OAAO,EAAE;IAAA;IACn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"},"metadata":{},"sourceType":"module"}