{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/lucas/Desktop/Estudos Js/React-Playground/reactApp/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { Vec3, Quaternion, Shape } from 'cannon-es';\nimport { MeshBasicMaterial, SphereGeometry, BoxGeometry, PlaneGeometry, Mesh, CylinderGeometry, BufferGeometry, Float32BufferAttribute } from 'three';\nfunction CannonDebugger(scene, world, _temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n    _ref$color = _ref.color,\n    color = _ref$color === void 0 ? 0x00ff00 : _ref$color,\n    _ref$scale = _ref.scale,\n    scale = _ref$scale === void 0 ? 1 : _ref$scale,\n    onInit = _ref.onInit,\n    onUpdate = _ref.onUpdate;\n  var _meshes = [];\n  var _material = new MeshBasicMaterial({\n    color: color != null ? color : 0x00ff00,\n    wireframe: true\n  });\n  var _tempVec0 = new Vec3();\n  var _tempVec1 = new Vec3();\n  var _tempVec2 = new Vec3();\n  var _tempQuat0 = new Quaternion();\n  var _sphereGeometry = new SphereGeometry(1);\n  var _boxGeometry = new BoxGeometry(1, 1, 1);\n  var _planeGeometry = new PlaneGeometry(10, 10, 10, 10); // Move the planeGeometry forward a little bit to prevent z-fighting\n\n  _planeGeometry.translate(0, 0, 0.0001);\n  function createConvexPolyhedronGeometry(shape) {\n    var geometry = new BufferGeometry(); // Add vertices\n\n    var positions = [];\n    for (var i = 0; i < shape.vertices.length; i++) {\n      var vertex = shape.vertices[i];\n      positions.push(vertex.x, vertex.y, vertex.z);\n    }\n    geometry.setAttribute('position', new Float32BufferAttribute(positions, 3)); // Add faces\n\n    var indices = [];\n    for (var _i = 0; _i < shape.faces.length; _i++) {\n      var face = shape.faces[_i];\n      var a = face[0];\n      for (var j = 1; j < face.length - 1; j++) {\n        var b = face[j];\n        var c = face[j + 1];\n        indices.push(a, b, c);\n      }\n    }\n    geometry.setIndex(indices);\n    geometry.computeBoundingSphere();\n    geometry.computeVertexNormals();\n    return geometry;\n  }\n  function createTrimeshGeometry(shape) {\n    var geometry = new BufferGeometry();\n    var positions = [];\n    var v0 = _tempVec0;\n    var v1 = _tempVec1;\n    var v2 = _tempVec2;\n    for (var i = 0; i < shape.indices.length / 3; i++) {\n      shape.getTriangleVertices(i, v0, v1, v2);\n      positions.push(v0.x, v0.y, v0.z);\n      positions.push(v1.x, v1.y, v1.z);\n      positions.push(v2.x, v2.y, v2.z);\n    }\n    geometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n    geometry.computeBoundingSphere();\n    geometry.computeVertexNormals();\n    return geometry;\n  }\n  function createHeightfieldGeometry(shape) {\n    var geometry = new BufferGeometry();\n    var s = shape.elementSize || 1; // assumes square heightfield, else i*x, j*y\n\n    var positions = shape.data.flatMap(function (row, i) {\n      return row.flatMap(function (z, j) {\n        return [i * s, j * s, z];\n      });\n    });\n    var indices = [];\n    for (var xi = 0; xi < shape.data.length - 1; xi++) {\n      for (var yi = 0; yi < shape.data[xi].length - 1; yi++) {\n        var stride = shape.data[xi].length;\n        var index = xi * stride + yi;\n        indices.push(index + 1, index + stride, index + stride + 1);\n        indices.push(index + stride, index + 1, index);\n      }\n    }\n    geometry.setIndex(indices);\n    geometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n    geometry.computeBoundingSphere();\n    geometry.computeVertexNormals();\n    return geometry;\n  }\n  function createMesh(shape) {\n    var mesh = new Mesh();\n    var _Shape$types = Shape.types,\n      SPHERE = _Shape$types.SPHERE,\n      BOX = _Shape$types.BOX,\n      PLANE = _Shape$types.PLANE,\n      CYLINDER = _Shape$types.CYLINDER,\n      CONVEXPOLYHEDRON = _Shape$types.CONVEXPOLYHEDRON,\n      TRIMESH = _Shape$types.TRIMESH,\n      HEIGHTFIELD = _Shape$types.HEIGHTFIELD;\n    switch (shape.type) {\n      case SPHERE:\n        {\n          mesh = new Mesh(_sphereGeometry, _material);\n          break;\n        }\n      case BOX:\n        {\n          mesh = new Mesh(_boxGeometry, _material);\n          break;\n        }\n      case PLANE:\n        {\n          mesh = new Mesh(_planeGeometry, _material);\n          break;\n        }\n      case CYLINDER:\n        {\n          var geometry = new CylinderGeometry(shape.radiusTop, shape.radiusBottom, shape.height, shape.numSegments);\n          mesh = new Mesh(geometry, _material);\n          shape.geometryId = geometry.id;\n          break;\n        }\n      case CONVEXPOLYHEDRON:\n        {\n          var _geometry = createConvexPolyhedronGeometry(shape);\n          mesh = new Mesh(_geometry, _material);\n          shape.geometryId = _geometry.id;\n          break;\n        }\n      case TRIMESH:\n        {\n          var _geometry2 = createTrimeshGeometry(shape);\n          mesh = new Mesh(_geometry2, _material);\n          shape.geometryId = _geometry2.id;\n          break;\n        }\n      case HEIGHTFIELD:\n        {\n          var _geometry3 = createHeightfieldGeometry(shape);\n          mesh = new Mesh(_geometry3, _material);\n          shape.geometryId = _geometry3.id;\n          break;\n        }\n    }\n    scene.add(mesh);\n    return mesh;\n  }\n  function scaleMesh(mesh, shape) {\n    var _Shape$types2 = Shape.types,\n      SPHERE = _Shape$types2.SPHERE,\n      BOX = _Shape$types2.BOX,\n      PLANE = _Shape$types2.PLANE,\n      CYLINDER = _Shape$types2.CYLINDER,\n      CONVEXPOLYHEDRON = _Shape$types2.CONVEXPOLYHEDRON,\n      TRIMESH = _Shape$types2.TRIMESH,\n      HEIGHTFIELD = _Shape$types2.HEIGHTFIELD;\n    switch (shape.type) {\n      case SPHERE:\n        {\n          var radius = shape.radius;\n          mesh.scale.set(radius * scale, radius * scale, radius * scale);\n          break;\n        }\n      case BOX:\n        {\n          mesh.scale.copy(shape.halfExtents);\n          mesh.scale.multiplyScalar(2 * scale);\n          break;\n        }\n      case PLANE:\n        {\n          break;\n        }\n      case CYLINDER:\n        {\n          mesh.scale.set(1 * scale, 1 * scale, 1 * scale);\n          break;\n        }\n      case CONVEXPOLYHEDRON:\n        {\n          mesh.scale.set(1 * scale, 1 * scale, 1 * scale);\n          break;\n        }\n      case TRIMESH:\n        {\n          mesh.scale.copy(shape.scale).multiplyScalar(scale);\n          break;\n        }\n      case HEIGHTFIELD:\n        {\n          mesh.scale.set(1 * scale, 1 * scale, 1 * scale);\n          break;\n        }\n    }\n  }\n  function typeMatch(mesh, shape) {\n    if (!mesh) return false;\n    var geometry = mesh.geometry;\n    return geometry instanceof SphereGeometry && shape.type === Shape.types.SPHERE || geometry instanceof BoxGeometry && shape.type === Shape.types.BOX || geometry instanceof PlaneGeometry && shape.type === Shape.types.PLANE || geometry.id === shape.geometryId && shape.type === Shape.types.CYLINDER || geometry.id === shape.geometryId && shape.type === Shape.types.CONVEXPOLYHEDRON || geometry.id === shape.geometryId && shape.type === Shape.types.TRIMESH || geometry.id === shape.geometryId && shape.type === Shape.types.HEIGHTFIELD;\n  }\n  function updateMesh(index, shape) {\n    var mesh = _meshes[index];\n    var didCreateNewMesh = false;\n    if (!typeMatch(mesh, shape)) {\n      if (mesh) scene.remove(mesh);\n      _meshes[index] = mesh = createMesh(shape);\n      didCreateNewMesh = true;\n    }\n    scaleMesh(mesh, shape);\n    return didCreateNewMesh;\n  }\n  function update() {\n    var meshes = _meshes;\n    var shapeWorldPosition = _tempVec0;\n    var shapeWorldQuaternion = _tempQuat0;\n    var meshIndex = 0;\n    var _iterator = _createForOfIteratorHelper(world.bodies),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var body = _step.value;\n        for (var _i2 = 0; _i2 !== body.shapes.length; _i2++) {\n          var shape = body.shapes[_i2];\n          var didCreateNewMesh = updateMesh(meshIndex, shape);\n          var _mesh = meshes[meshIndex];\n          if (_mesh) {\n            // Get world position\n            body.quaternion.vmult(body.shapeOffsets[_i2], shapeWorldPosition);\n            body.position.vadd(shapeWorldPosition, shapeWorldPosition); // Get world quaternion\n\n            body.quaternion.mult(body.shapeOrientations[_i2], shapeWorldQuaternion); // Copy to meshes\n\n            _mesh.position.copy(shapeWorldPosition);\n            _mesh.quaternion.copy(shapeWorldQuaternion);\n            if (didCreateNewMesh && onInit instanceof Function) onInit(body, _mesh, shape);\n            if (!didCreateNewMesh && onUpdate instanceof Function) onUpdate(body, _mesh, shape);\n          }\n          meshIndex++;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    for (var i = meshIndex; i < meshes.length; i++) {\n      var mesh = meshes[i];\n      if (mesh) scene.remove(mesh);\n    }\n    meshes.length = meshIndex;\n  }\n  return {\n    update: update\n  };\n}\nexport { CannonDebugger as default };","map":{"version":3,"names":["Vec3","Quaternion","Shape","MeshBasicMaterial","SphereGeometry","BoxGeometry","PlaneGeometry","Mesh","CylinderGeometry","BufferGeometry","Float32BufferAttribute","CannonDebugger","scene","world","_temp","color","scale","onInit","onUpdate","_meshes","_material","wireframe","_tempVec0","_tempVec1","_tempVec2","_tempQuat0","_sphereGeometry","_boxGeometry","_planeGeometry","translate","createConvexPolyhedronGeometry","shape","geometry","positions","i","vertices","length","vertex","push","x","y","z","setAttribute","indices","faces","face","a","j","b","c","setIndex","computeBoundingSphere","computeVertexNormals","createTrimeshGeometry","v0","v1","v2","getTriangleVertices","createHeightfieldGeometry","s","elementSize","data","flatMap","row","xi","yi","stride","index","createMesh","mesh","types","SPHERE","BOX","PLANE","CYLINDER","CONVEXPOLYHEDRON","TRIMESH","HEIGHTFIELD","type","radiusTop","radiusBottom","height","numSegments","geometryId","id","add","scaleMesh","radius","set","copy","halfExtents","multiplyScalar","typeMatch","updateMesh","didCreateNewMesh","remove","update","meshes","shapeWorldPosition","shapeWorldQuaternion","meshIndex","bodies","body","shapes","quaternion","vmult","shapeOffsets","position","vadd","mult","shapeOrientations","Function","default"],"sources":["C:/Users/lucas/Desktop/Estudos Js/React-Playground/reactapp/node_modules/cannon-es-debugger/dist/cannon-es-debugger.js"],"sourcesContent":["import { Vec3, Quaternion, Shape } from 'cannon-es';\nimport { MeshBasicMaterial, SphereGeometry, BoxGeometry, PlaneGeometry, Mesh, CylinderGeometry, BufferGeometry, Float32BufferAttribute } from 'three';\n\nfunction CannonDebugger(scene, world, _temp) {\n  let {\n    color = 0x00ff00,\n    scale = 1,\n    onInit,\n    onUpdate\n  } = _temp === void 0 ? {} : _temp;\n  const _meshes = [];\n\n  const _material = new MeshBasicMaterial({\n    color: color != null ? color : 0x00ff00,\n    wireframe: true\n  });\n\n  const _tempVec0 = new Vec3();\n\n  const _tempVec1 = new Vec3();\n\n  const _tempVec2 = new Vec3();\n\n  const _tempQuat0 = new Quaternion();\n\n  const _sphereGeometry = new SphereGeometry(1);\n\n  const _boxGeometry = new BoxGeometry(1, 1, 1);\n\n  const _planeGeometry = new PlaneGeometry(10, 10, 10, 10); // Move the planeGeometry forward a little bit to prevent z-fighting\n\n\n  _planeGeometry.translate(0, 0, 0.0001);\n\n  function createConvexPolyhedronGeometry(shape) {\n    const geometry = new BufferGeometry(); // Add vertices\n\n    const positions = [];\n\n    for (let i = 0; i < shape.vertices.length; i++) {\n      const vertex = shape.vertices[i];\n      positions.push(vertex.x, vertex.y, vertex.z);\n    }\n\n    geometry.setAttribute('position', new Float32BufferAttribute(positions, 3)); // Add faces\n\n    const indices = [];\n\n    for (let i = 0; i < shape.faces.length; i++) {\n      const face = shape.faces[i];\n      const a = face[0];\n\n      for (let j = 1; j < face.length - 1; j++) {\n        const b = face[j];\n        const c = face[j + 1];\n        indices.push(a, b, c);\n      }\n    }\n\n    geometry.setIndex(indices);\n    geometry.computeBoundingSphere();\n    geometry.computeVertexNormals();\n    return geometry;\n  }\n\n  function createTrimeshGeometry(shape) {\n    const geometry = new BufferGeometry();\n    const positions = [];\n    const v0 = _tempVec0;\n    const v1 = _tempVec1;\n    const v2 = _tempVec2;\n\n    for (let i = 0; i < shape.indices.length / 3; i++) {\n      shape.getTriangleVertices(i, v0, v1, v2);\n      positions.push(v0.x, v0.y, v0.z);\n      positions.push(v1.x, v1.y, v1.z);\n      positions.push(v2.x, v2.y, v2.z);\n    }\n\n    geometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n    geometry.computeBoundingSphere();\n    geometry.computeVertexNormals();\n    return geometry;\n  }\n\n  function createHeightfieldGeometry(shape) {\n    const geometry = new BufferGeometry();\n    const s = shape.elementSize || 1; // assumes square heightfield, else i*x, j*y\n\n    const positions = shape.data.flatMap((row, i) => row.flatMap((z, j) => [i * s, j * s, z]));\n    const indices = [];\n\n    for (let xi = 0; xi < shape.data.length - 1; xi++) {\n      for (let yi = 0; yi < shape.data[xi].length - 1; yi++) {\n        const stride = shape.data[xi].length;\n        const index = xi * stride + yi;\n        indices.push(index + 1, index + stride, index + stride + 1);\n        indices.push(index + stride, index + 1, index);\n      }\n    }\n\n    geometry.setIndex(indices);\n    geometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n    geometry.computeBoundingSphere();\n    geometry.computeVertexNormals();\n    return geometry;\n  }\n\n  function createMesh(shape) {\n    let mesh = new Mesh();\n    const {\n      SPHERE,\n      BOX,\n      PLANE,\n      CYLINDER,\n      CONVEXPOLYHEDRON,\n      TRIMESH,\n      HEIGHTFIELD\n    } = Shape.types;\n\n    switch (shape.type) {\n      case SPHERE:\n        {\n          mesh = new Mesh(_sphereGeometry, _material);\n          break;\n        }\n\n      case BOX:\n        {\n          mesh = new Mesh(_boxGeometry, _material);\n          break;\n        }\n\n      case PLANE:\n        {\n          mesh = new Mesh(_planeGeometry, _material);\n          break;\n        }\n\n      case CYLINDER:\n        {\n          const geometry = new CylinderGeometry(shape.radiusTop, shape.radiusBottom, shape.height, shape.numSegments);\n          mesh = new Mesh(geometry, _material);\n          shape.geometryId = geometry.id;\n          break;\n        }\n\n      case CONVEXPOLYHEDRON:\n        {\n          const geometry = createConvexPolyhedronGeometry(shape);\n          mesh = new Mesh(geometry, _material);\n          shape.geometryId = geometry.id;\n          break;\n        }\n\n      case TRIMESH:\n        {\n          const geometry = createTrimeshGeometry(shape);\n          mesh = new Mesh(geometry, _material);\n          shape.geometryId = geometry.id;\n          break;\n        }\n\n      case HEIGHTFIELD:\n        {\n          const geometry = createHeightfieldGeometry(shape);\n          mesh = new Mesh(geometry, _material);\n          shape.geometryId = geometry.id;\n          break;\n        }\n    }\n\n    scene.add(mesh);\n    return mesh;\n  }\n\n  function scaleMesh(mesh, shape) {\n    const {\n      SPHERE,\n      BOX,\n      PLANE,\n      CYLINDER,\n      CONVEXPOLYHEDRON,\n      TRIMESH,\n      HEIGHTFIELD\n    } = Shape.types;\n\n    switch (shape.type) {\n      case SPHERE:\n        {\n          const {\n            radius\n          } = shape;\n          mesh.scale.set(radius * scale, radius * scale, radius * scale);\n          break;\n        }\n\n      case BOX:\n        {\n          mesh.scale.copy(shape.halfExtents);\n          mesh.scale.multiplyScalar(2 * scale);\n          break;\n        }\n\n      case PLANE:\n        {\n          break;\n        }\n\n      case CYLINDER:\n        {\n          mesh.scale.set(1 * scale, 1 * scale, 1 * scale);\n          break;\n        }\n\n      case CONVEXPOLYHEDRON:\n        {\n          mesh.scale.set(1 * scale, 1 * scale, 1 * scale);\n          break;\n        }\n\n      case TRIMESH:\n        {\n          mesh.scale.copy(shape.scale).multiplyScalar(scale);\n          break;\n        }\n\n      case HEIGHTFIELD:\n        {\n          mesh.scale.set(1 * scale, 1 * scale, 1 * scale);\n          break;\n        }\n    }\n  }\n\n  function typeMatch(mesh, shape) {\n    if (!mesh) return false;\n    const {\n      geometry\n    } = mesh;\n    return geometry instanceof SphereGeometry && shape.type === Shape.types.SPHERE || geometry instanceof BoxGeometry && shape.type === Shape.types.BOX || geometry instanceof PlaneGeometry && shape.type === Shape.types.PLANE || geometry.id === shape.geometryId && shape.type === Shape.types.CYLINDER || geometry.id === shape.geometryId && shape.type === Shape.types.CONVEXPOLYHEDRON || geometry.id === shape.geometryId && shape.type === Shape.types.TRIMESH || geometry.id === shape.geometryId && shape.type === Shape.types.HEIGHTFIELD;\n  }\n\n  function updateMesh(index, shape) {\n    let mesh = _meshes[index];\n    let didCreateNewMesh = false;\n\n    if (!typeMatch(mesh, shape)) {\n      if (mesh) scene.remove(mesh);\n      _meshes[index] = mesh = createMesh(shape);\n      didCreateNewMesh = true;\n    }\n\n    scaleMesh(mesh, shape);\n    return didCreateNewMesh;\n  }\n\n  function update() {\n    const meshes = _meshes;\n    const shapeWorldPosition = _tempVec0;\n    const shapeWorldQuaternion = _tempQuat0;\n    let meshIndex = 0;\n\n    for (const body of world.bodies) {\n      for (let i = 0; i !== body.shapes.length; i++) {\n        const shape = body.shapes[i];\n        const didCreateNewMesh = updateMesh(meshIndex, shape);\n        const mesh = meshes[meshIndex];\n\n        if (mesh) {\n          // Get world position\n          body.quaternion.vmult(body.shapeOffsets[i], shapeWorldPosition);\n          body.position.vadd(shapeWorldPosition, shapeWorldPosition); // Get world quaternion\n\n          body.quaternion.mult(body.shapeOrientations[i], shapeWorldQuaternion); // Copy to meshes\n\n          mesh.position.copy(shapeWorldPosition);\n          mesh.quaternion.copy(shapeWorldQuaternion);\n          if (didCreateNewMesh && onInit instanceof Function) onInit(body, mesh, shape);\n          if (!didCreateNewMesh && onUpdate instanceof Function) onUpdate(body, mesh, shape);\n        }\n\n        meshIndex++;\n      }\n    }\n\n    for (let i = meshIndex; i < meshes.length; i++) {\n      const mesh = meshes[i];\n      if (mesh) scene.remove(mesh);\n    }\n\n    meshes.length = meshIndex;\n  }\n\n  return {\n    update\n  };\n}\n\nexport { CannonDebugger as default };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}